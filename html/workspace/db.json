{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/HCCODEC-Blog.md","hash":"4546179dce0f904958640cb9aea56c8b3d288a37","modified":1646286065704},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":499162500000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":499162500000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":499162500000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":499162500000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":499162500000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":499162500000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":499162500000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":499162500000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":499162500000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":499162500000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":499162500000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":499162500000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":499162500000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":499162500000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":499162500000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":499162500000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":499162500000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":499162500000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":499162500000},{"_id":"public/2022/03/03/HCCODEC-Blog/index.html","hash":"e241fd90d457f76f5366cb884a5cbbac944e18ff","modified":1646286070739},{"_id":"public/2022/03/03/hello-world/index.html","hash":"d9b7e9476540c8371b8d3b396ac6ede6a851e5ab","modified":1646282296888},{"_id":"public/archives/index.html","hash":"34b3389b3d518c63d6b62765abd28955f72f2598","modified":1646360863097},{"_id":"public/index.html","hash":"81112e0dd9b8f5c0ffa646ed30815ac16ae5bc2e","modified":1646718735344},{"_id":"public/archives/2022/index.html","hash":"f63f0cf0832270e2b30b909412131ef33cf5abcd","modified":1646360863097},{"_id":"public/archives/2022/03/index.html","hash":"b3c77ccd854a90ec907c7a89c62eccca3900a10c","modified":1646360863097},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1646273810688},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1646273810688},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1646273810688},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1646273810688},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1646273810688},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1646273810688},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1646273810688},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1646273810688},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1646273810688},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1646273810688},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1646273810688},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1646273810688},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1646273810688},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1646273810688},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1646273810688},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1646273810688},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1646273810688},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1646273810688},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1646273810688},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1646273810688},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1646273810688},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1646273810688},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1646273810688},{"_id":"source/_posts/React-Native 定义事件基类  EventBus.6.md","hash":"dd7e1d2622666e7c5aee7ea0d01ce1455244fb7c","modified":1631692598759},{"_id":"source/_posts/Office 激活密钥.3.md","hash":"dd729f9f66068bbf0162082b8988a405e1905630","modified":1631692598757},{"_id":"source/_posts/HTML实现水平垂直居中.11.md","hash":"a9a27f1723b025815af7146c22dda7d137c08fb7","modified":1631692616131},{"_id":"source/_posts/SQL示例-大学柜子里的东西.2.md","hash":"e62a245a3f11a9d67cc4e71dc19c28885e591e38","modified":1631692598756},{"_id":"source/_posts/NodeJS 从安装到卸载再到重装.17.md","hash":"f77336ac1b6744e06bcbb433e3ef82ea8cd027aa","modified":1631692598773},{"_id":"source/_posts/conda及pip配置文件 - 已整理.9.md","hash":"ff7230f3fcedb99918f6e54f5b3059f747859f55","modified":1631692611378},{"_id":"source/_posts/nodejsTips.16.md","hash":"a3676e3eb972195b28b320f57171252262d63dd8","modified":1631692598773},{"_id":"source/_posts/useless personal diaries.5.md","hash":"dc5dca397f55a318b7ef8aedd3a1aeb3abd17ec7","modified":1631692598758},{"_id":"source/_posts/vue的使用.13.md","hash":"412db76aea144d62d8e441adf2207926f34cf6ab","modified":1630600114483},{"_id":"source/_posts/wincmdTips.15.md","hash":"79cbe24903bc9ab73c8a6ef8ad8e113efcc46de7","modified":1631692598772},{"_id":"source/_posts/react-native 组件间通信简述.8.md","hash":"7842646abc524a6d7ead4c1198dff0de3f5e37a8","modified":1631692613714},{"_id":"source/_posts/教务网课程评价填写脚本.4.md","hash":"0fb065c6874f7d8e79ea0dbc0178bd81e9fa9118","modified":1631692598757},{"_id":"source/_posts/WSL linux相关设置.7.md","hash":"501372cf4066aae813e62a1db8220a308c030db4","modified":1631692598761},{"_id":"source/_posts/数据结构-栈的应用：表达式求值.18.md","hash":"4f3b8959fb5db598b13f1692343e6ff8aea0d15e","modified":1631692605149},{"_id":"source/_posts/数据结构-二叉树相关代码.19.md","hash":"c7530553f50e9c055e3a07727859b687a7b4a082","modified":1631693196240},{"_id":"source/_posts/数据结构-用顺序存储方式实现循环队列的 6 种情况 (C++).1.md","hash":"959c4f11fe346f24a93ab9142800f4b6d78d4294","modified":1631692608034},{"_id":"source/_posts/视频测试URL地址.10.md","hash":"e6b8ff4ded8d42a0e0267c812176ee7355d9a380","modified":1631692598768},{"_id":"source/_posts/html 小技巧.12.md","hash":"e5cdf5042d3f28114dab4c80adcc3a69d1299a8e","modified":1631692598770},{"_id":"source/_posts/windows下nvm的安装与管理.14.md","hash":"7c1687395f04160ec8ce581dce99beda788c1fc5","modified":1631692598771},{"_id":"public/2022/03/04/教务网课程评价填写脚本.4/index.html","hash":"dc3d1846a20ebd760e55467a679956c2f3ae7fae","modified":1646360233122},{"_id":"public/2022/03/04/WSL linux相关设置.7/index.html","hash":"b28cb783f8344420b2c267864786082e0b99fc74","modified":1646360233122},{"_id":"public/2022/03/04/wincmdTips.15/index.html","hash":"277cda5779999e681fcdcdf2c53ab091fba05a04","modified":1646360233122},{"_id":"public/2022/03/04/vue的使用.13/index.html","hash":"96d4290b9dc259efd974f61f10b524d8e5a2767d","modified":1646360233122},{"_id":"public/2022/03/04/React-Native 定义事件基类  EventBus.6/index.html","hash":"e201fa5a883ec686a66a20fd275641bf5cdb56b6","modified":1646360233122},{"_id":"public/2022/03/04/Office 激活密钥.3/index.html","hash":"89f822200e89be448614764ceab64bc002eda8e5","modified":1646360233122},{"_id":"public/2022/03/04/html 小技巧.12/index.html","hash":"4f315f265e43ae5335fd7a0539de2ab382cd81df","modified":1646360233122},{"_id":"public/archives/page/2/index.html","hash":"b20be4e845e5037edf0c7cb3f05d2df428727d93","modified":1646360863097},{"_id":"public/archives/2022/page/2/index.html","hash":"62c2a92197ef09bfffc8d70c125b41e0d09fd68c","modified":1646360863097},{"_id":"public/archives/2022/03/page/2/index.html","hash":"9f30f7a7c099ac057afc0ec1e03ce5eb6d4df21e","modified":1646360863097},{"_id":"public/2022/03/04/useless personal diaries.5/index.html","hash":"c0249ba37ee7ac18bdf39bac03db9042ae30b967","modified":1646360233122},{"_id":"public/2022/03/04/SQL示例-大学柜子里的东西.2/index.html","hash":"9e426d8ccaec0e6cfb3d05147e9d011bb1938444","modified":1646360233122},{"_id":"public/2022/03/04/react-native 组件间通信简述.8/index.html","hash":"a770a7c281707e926e7b448298fae318bada09b4","modified":1646360233122},{"_id":"public/2022/03/04/数据结构-栈的应用：表达式求值.18/index.html","hash":"9c4942d5c0ecca1ef2e0a53d97f8f63806f761bd","modified":1646360233122},{"_id":"public/2022/03/04/数据结构-用顺序存储方式实现循环队列的 6 种情况 (C++).1/index.html","hash":"e1507cf32c955af96c2b0674e52e85e378b67ea2","modified":1646360233122},{"_id":"public/2022/03/04/数据结构-二叉树相关代码.19/index.html","hash":"aaeb30563a8858443f66c14a9973cc4c8ecf7c5e","modified":1646360233122},{"_id":"public/page/2/index.html","hash":"9e0f8f2c8415c5da3134eeec7b8bedfcd9f0cc28","modified":1646360863097},{"_id":"source/_posts/React-Native 定义事件基类 EventBus.md","hash":"8ab0354b754675c614d72540dfa893d9e43986e6","modified":1646360703815},{"_id":"source/_posts/HTML实现水平垂直居中.md","hash":"f6c0fc7756322fb92679e7fe2968909567f78fbd","modified":1646360609675},{"_id":"source/_posts/Office 激活密钥.md","hash":"5e8a10d43449e6822d0cdf8e2fad3ed805f5ff0a","modified":1646360673521},{"_id":"source/_posts/conda及pip配置文件 - 已整理.md","hash":"d79b18a35af6272ec95b9d7b4539c65e5ec828a2","modified":1646360566961},{"_id":"source/_posts/nodejsTips.md","hash":"315f6a9e830ffde51a416bc1cfdcc2ef577a4e94","modified":1646360655588},{"_id":"source/_posts/WSL linux相关设置.md","hash":"c2d854174a0d04eaeed5a1e6a796560e92649b76","modified":1646718696306},{"_id":"source/_posts/react-native 组件间通信简述.md","hash":"4474dfebadc23c24786cd2b36b209d21a6c0fe0d","modified":1646360721606},{"_id":"source/_posts/NodeJS 从安装到卸载再到重装.md","hash":"112a57f18d0b2cc7513821f215a90ce170c734e2","modified":1646360633458},{"_id":"source/_posts/wincmdTips.md","hash":"135156446721c1936ec935e757d4d60142193af1","modified":1646360840862},{"_id":"source/_posts/vue的使用.md","hash":"f660aefc3d609190f40bca1a7720c0188ed0bd58","modified":1646360782273},{"_id":"source/_posts/html 小技巧.md","hash":"c090a18874af6d0ffa4dd2a9bfa390b19c5c97ba","modified":1646360586311},{"_id":"source/_posts/数据结构-二叉树相关代码.md","hash":"5e86fd7177c396317eb62964ddea6d5dcb8fdb7f","modified":1646360514964},{"_id":"source/_posts/windows下nvm的安装与管理.md","hash":"9aeaf58be1e3a108f3925c6187c523658d407388","modified":1646360818269},{"_id":"source/_posts/视频测试URL地址.md","hash":"6f20b8b9b11af674be9e702bd66f59e50d26e394","modified":1646360482853},{"_id":"source/_posts/教务网课程评价填写脚本.md","hash":"ae9af7a5c4f5fa133e47e474236fd3ca5197f542","modified":1646360474094},{"_id":"source/_posts/数据结构-用顺序存储方式实现循环队列的 6 种情况 (C++).md","hash":"0db4b23674268e0a909a41ffe69a95df2baea2c8","modified":1646360527914},{"_id":"source/_posts/数据结构-栈的应用：表达式求值.md","hash":"9d814c05f20e4a8f1a61b4ba52e0922c814b539e","modified":1646360546495},{"_id":"public/2022/03/04/NodeJS 从安装到卸载再到重装/index.html","hash":"fb2574a5cd1d4611b2bf3f24729489360bd86910","modified":1646360863097},{"_id":"public/2022/03/04/React-Native 定义事件基类 EventBus/index.html","hash":"81cf56a0a61eae6b902bf702ac71ed4e04585421","modified":1646360863097},{"_id":"public/2022/03/04/Office 激活密钥/index.html","hash":"595cd3f7cbfc90145ac8161a62491e70b8e2084b","modified":1646360863097},{"_id":"public/2022/03/04/conda及pip配置文件 - 已整理/index.html","hash":"9021f3c880fe0180b6d4fe58703d7bb72e653974","modified":1646360863097},{"_id":"public/2022/03/04/WSL linux相关设置/index.html","hash":"c488e7fe6b67f2f05bbf58fa4786180723278937","modified":1646718735344},{"_id":"public/2022/03/04/html 小技巧/index.html","hash":"e0cd863acf61f763fe6eaea382629abb4ea99c42","modified":1646360863097},{"_id":"public/2022/03/04/nodejsTips/index.html","hash":"d301ed22fc0cd2e4124eea7004811e2c51c91d89","modified":1646360863097},{"_id":"public/2022/03/04/vue的使用/index.html","hash":"855097c1c1230833af59cd6b3db18bc572458e7d","modified":1646360863097},{"_id":"public/2022/03/04/windows下nvm的安装与管理/index.html","hash":"2f6e4e506972d3251fcda81860a1423b6a39f782","modified":1646360863097},{"_id":"public/2022/03/04/wincmdTips/index.html","hash":"e9850608bbe1f1f890b1c470cf0c8f4f6bda3059","modified":1646360863097},{"_id":"public/2022/03/04/教务网课程评价填写脚本/index.html","hash":"23c0c9afb075e8d297daaa61e33aa8addfdaa3f4","modified":1646360863097},{"_id":"public/2022/03/04/视频测试URL地址/index.html","hash":"ec5d36d7982c5fc49ebdc23f032253ee7d8ed3aa","modified":1646360863097},{"_id":"public/2022/03/04/HTML实现水平垂直居中/index.html","hash":"c641aafd972bbbda6ae9e100be6e16d6f6ccf284","modified":1646360863097},{"_id":"public/2022/03/04/react-native 组件间通信简述/index.html","hash":"cf9ab1cf81e67bceace7d749d29776ef54561acb","modified":1646360863097},{"_id":"public/2022/03/04/数据结构-栈的应用：表达式求值/index.html","hash":"619b56ce405d3fa26f65a564118c54ac70f9836d","modified":1646360863097},{"_id":"public/2022/03/04/数据结构-用顺序存储方式实现循环队列的 6 种情况 (C++)/index.html","hash":"0fd0ec59c92507478be56e5ffa980f8858c5dce4","modified":1646360863097},{"_id":"public/2022/03/04/数据结构-二叉树相关代码/index.html","hash":"4d80934432c258a4d05e3bb3975dcdc6f99f92bb","modified":1646360863097}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"HTML实现水平垂直居中","date":"2022-03-04T02:20:34.000Z","_content":"##CSS/CSS3 实现 居中（水平&垂直）\n\n1. 水平居中：行内元素\n    把行内元素放在一个属性块（display：block）元素中，然后设置父层元素属性居中：\n    ```css\n    .test {\n        text-align:center;\n    }\n    ```\n\n2. 水平居中：块状元素\n    设置外边距\n    ```css\n    .test {\n        margin: 100px auto;\n    }\n    ```\n3. 水平居中：多个块状元素\n    把块状元素属性（display：inline-block），然后设置父层元素属性居中：\n    ```css\n    .test {\n        text-align:center;\n    }\n    ```\n4. 水平居中：多个块状元素（flexbox布局实现）\n    把块状元素的父元素属性 display:flex和justify-content:center，如下设置：\n    ```css\n    .test {\n        text-align:center;\n    }\n5. 垂直居中：单行的行内元素\n    设置height和line-height属性\n    ```css\n    .test {\n        height: 100px;\n        line-height:100px; \n    }\n    ```\n6. 垂直居中：多行的行内元素\n    给要居中的父元素设置display:table-cell和vertical-align:middle属性\n    ```css\n    .test {\n        background: red;\n        width: 200px;\n        height: 200px;\n        /* 以下属性垂直居中 */\n        display: table-cell;\n        vertical-align:middle;\n    }\n    ```\n7. 垂直居中：已知高度的块状元素\n    给要居中的元素设置如下属性\n    ```css\n    .test {\n        top: 50%;\n        margin-top: -50px;  /* margin-top值为自身高度的一半 */\n        position: absolute;\n        padding:0;\n    }\n    ```\n8. 水平垂直居中：已知高度和宽度的元素\n    给要居中的元素设置如下属性\n    （1）\n    ```css\n    .test {\n        position: absolute;\n        margin:auto;\n        left:0;\n        top:0;\n        right:0;\n        bottom:0;\n    }\n    ```\n    （2）\n    ```css\n    .test{\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        margin-top: -75px;  /* 设置margin-left / margin-top 为自身高度的一半 */\n        margin-left: -75px;\n    }\n    ```\n9. 水平垂直居中：未知高度和宽度元素\n    给要居中的元素设置如下属性\n    ```css\n    .test {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);  /* 使用css3的transform来实现 */\n    }\n    ```\n10. 水平垂直居中：可用flex\n    设置如下属性\n    ```css\n    .test {\n        display: flex;\n        justify-content:center;\n        align-items: center;\n        /* 注意这里需要设置高度来查看垂直居中效果 */\n        background: #AAA;\n        height: 300px;\n    }\n    ```\n\n\n-----\n参考链接:\n1. https://segmentfault.com/a/1190000019666702","source":"_posts/HTML实现水平垂直居中.md","raw":"---\ntitle: HTML实现水平垂直居中\ndate: 2022-03-04 10:20:34\ntags:\n---\n##CSS/CSS3 实现 居中（水平&垂直）\n\n1. 水平居中：行内元素\n    把行内元素放在一个属性块（display：block）元素中，然后设置父层元素属性居中：\n    ```css\n    .test {\n        text-align:center;\n    }\n    ```\n\n2. 水平居中：块状元素\n    设置外边距\n    ```css\n    .test {\n        margin: 100px auto;\n    }\n    ```\n3. 水平居中：多个块状元素\n    把块状元素属性（display：inline-block），然后设置父层元素属性居中：\n    ```css\n    .test {\n        text-align:center;\n    }\n    ```\n4. 水平居中：多个块状元素（flexbox布局实现）\n    把块状元素的父元素属性 display:flex和justify-content:center，如下设置：\n    ```css\n    .test {\n        text-align:center;\n    }\n5. 垂直居中：单行的行内元素\n    设置height和line-height属性\n    ```css\n    .test {\n        height: 100px;\n        line-height:100px; \n    }\n    ```\n6. 垂直居中：多行的行内元素\n    给要居中的父元素设置display:table-cell和vertical-align:middle属性\n    ```css\n    .test {\n        background: red;\n        width: 200px;\n        height: 200px;\n        /* 以下属性垂直居中 */\n        display: table-cell;\n        vertical-align:middle;\n    }\n    ```\n7. 垂直居中：已知高度的块状元素\n    给要居中的元素设置如下属性\n    ```css\n    .test {\n        top: 50%;\n        margin-top: -50px;  /* margin-top值为自身高度的一半 */\n        position: absolute;\n        padding:0;\n    }\n    ```\n8. 水平垂直居中：已知高度和宽度的元素\n    给要居中的元素设置如下属性\n    （1）\n    ```css\n    .test {\n        position: absolute;\n        margin:auto;\n        left:0;\n        top:0;\n        right:0;\n        bottom:0;\n    }\n    ```\n    （2）\n    ```css\n    .test{\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        margin-top: -75px;  /* 设置margin-left / margin-top 为自身高度的一半 */\n        margin-left: -75px;\n    }\n    ```\n9. 水平垂直居中：未知高度和宽度元素\n    给要居中的元素设置如下属性\n    ```css\n    .test {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);  /* 使用css3的transform来实现 */\n    }\n    ```\n10. 水平垂直居中：可用flex\n    设置如下属性\n    ```css\n    .test {\n        display: flex;\n        justify-content:center;\n        align-items: center;\n        /* 注意这里需要设置高度来查看垂直居中效果 */\n        background: #AAA;\n        height: 300px;\n    }\n    ```\n\n\n-----\n参考链接:\n1. https://segmentfault.com/a/1190000019666702","slug":"HTML实现水平垂直居中","published":1,"updated":"2022-03-04T02:23:29.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0qq0000rcsf0ynf1i1y","content":"<p>##CSS/CSS3 实现 居中（水平&amp;垂直）</p>\n<ol>\n<li><p>水平居中：行内元素<br> 把行内元素放在一个属性块（display：block）元素中，然后设置父层元素属性居中：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>水平居中：块状元素<br> 设置外边距</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>水平居中：多个块状元素<br> 把块状元素属性（display：inline-block），然后设置父层元素属性居中：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>水平居中：多个块状元素（flexbox布局实现）<br> 把块状元素的父元素属性 display:flex和justify-content:center，如下设置：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"number\">5</span>. 垂直居中：单行的行内元素</span><br><span class=\"line\">    设置<span class=\"attribute\">height</span>和<span class=\"attribute\">line-height</span>属性</span><br><span class=\"line\">    ```css</span><br><span class=\"line\">    <span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">line-height</span>:<span class=\"number\">100px</span>; </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>垂直居中：多行的行内元素<br> 给要居中的父元素设置display:table-cell和vertical-align:middle属性</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 以下属性垂直居中 */</span></span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>垂直居中：已知高度的块状元素<br> 给要居中的元素设置如下属性</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;  <span class=\"comment\">/* margin-top值为自身高度的一半 */</span></span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>水平垂直居中：已知高度和宽度的元素<br> 给要居中的元素设置如下属性<br> （1）</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> （2）</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">75px</span>;  <span class=\"comment\">/* 设置margin-left / margin-top 为自身高度的一半 */</span></span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">75px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>水平垂直居中：未知高度和宽度元素<br> 给要居中的元素设置如下属性</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);  <span class=\"comment\">/* 使用css3的transform来实现 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>水平垂直居中：可用flex<br>设置如下属性</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>:center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"comment\">/* 注意这里需要设置高度来查看垂直居中效果 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#AAA</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>参考链接:</p>\n<ol>\n<li><a href=\"https://segmentfault.com/a/1190000019666702\">https://segmentfault.com/a/1190000019666702</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>##CSS/CSS3 实现 居中（水平&amp;垂直）</p>\n<ol>\n<li><p>水平居中：行内元素<br> 把行内元素放在一个属性块（display：block）元素中，然后设置父层元素属性居中：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>水平居中：块状元素<br> 设置外边距</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>水平居中：多个块状元素<br> 把块状元素属性（display：inline-block），然后设置父层元素属性居中：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>水平居中：多个块状元素（flexbox布局实现）<br> 把块状元素的父元素属性 display:flex和justify-content:center，如下设置：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"number\">5</span>. 垂直居中：单行的行内元素</span><br><span class=\"line\">    设置<span class=\"attribute\">height</span>和<span class=\"attribute\">line-height</span>属性</span><br><span class=\"line\">    ```css</span><br><span class=\"line\">    <span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">line-height</span>:<span class=\"number\">100px</span>; </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>垂直居中：多行的行内元素<br> 给要居中的父元素设置display:table-cell和vertical-align:middle属性</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 以下属性垂直居中 */</span></span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>垂直居中：已知高度的块状元素<br> 给要居中的元素设置如下属性</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;  <span class=\"comment\">/* margin-top值为自身高度的一半 */</span></span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>水平垂直居中：已知高度和宽度的元素<br> 给要居中的元素设置如下属性<br> （1）</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> （2）</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">75px</span>;  <span class=\"comment\">/* 设置margin-left / margin-top 为自身高度的一半 */</span></span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">75px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>水平垂直居中：未知高度和宽度元素<br> 给要居中的元素设置如下属性</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);  <span class=\"comment\">/* 使用css3的transform来实现 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>水平垂直居中：可用flex<br>设置如下属性</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>:center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"comment\">/* 注意这里需要设置高度来查看垂直居中效果 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#AAA</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>参考链接:</p>\n<ol>\n<li><a href=\"https://segmentfault.com/a/1190000019666702\">https://segmentfault.com/a/1190000019666702</a></li>\n</ol>\n"},{"title":"NodeJS 从安装到卸载再到重装","date":"2022-03-04T02:20:34.000Z","_content":"# NodeJS 的安装与完全卸载\n\n## 一、激动人心的卸载环节\n\n1. 从**程序和功能**按照常规套路卸载我们的`Node.js`\n2. 杀掉`NodeJS`的进程：`tasklist|findstr \"node\" && taskkill /F /IM \"node.js\" || echo Node.js已不再运行`\n3. 寻找下列文件夹并删掉它们！\n   `Program Files (x86)\\Nodejs`\n   `Program Files\\Nodejs`\n   `%appdata%\\npm`\n   `%appdata%\\npm-cache`\n4. 检查环境变量确保没有`Nodejs`或`npm`相关值存在：\n   `echo %PATH% | findstr \"node\"`\n5. （可选）命令行输入`where node`检查，凡是显示出的全都可以删掉！！\n6. 为了保险，重启！！（我没重启。。。）\n\n## 二、安装/重装\n\n1. 下载安装包（建议通过正规渠道——[nodejs官网(中文)](https://nodejs.org/zh-cn/download/)下载）并运行安装。安装时注意以下几点：\n\n   * 默认安装在`C:\\Program Files\\nodejs`路径下，可更改，记得确认好安装位置\n   * 若不在Custum Setup中选择Add to PATH，则稍后将手动设置其环境变量\n   * 其他选项默认即可\n\n2. 命令行输入`node -v`和`npm -v`检查安装，出现版本号代表安装成功\n\n3. 换源\n   使用npm的默认镜像源进行包的安装时存在不便，可能拖慢工程进度，可通过换源解决这一问题。\n   * 三种方法：\n   ```nodejs\n   //(原理)更改或追加npm配置文件：`%USERPROFILE%\\.npmrc`\n   registry = https://registry.npm.taobao.org\n   //通过config命令\n   npm config set registry https://registry.npm.taobao.org\n   //命令行指定\n   npm --registry https://registry.npm.taobao.org\n   ```\n\n   * 之后可运行命令`type %USERPROFILE%\\.npmrc`检查文件内容\n\n4. 修改全局依赖包下载路径\n   \n   全局依赖包下载路径指的是包在执行`npm i- g XXXX`全局下载时的安装路径。\n   * 可先在命令行输入`npm root -g`查看该路径\n   * 以下两种方法可对其进行更改\n     1. 运行cmd命令(原理与2相同)\n   ```\n   npm config set perfix XXX  （替换npm root -g的输出值）\n   npm config set cache XXXX   （替换执行包的全局安装时同时生成的同级缓存目录）\n   ```\n     2. 更改或追加npm配置文件：`%USERPROFILE%\\.npmrc`：\n   ```\n   prefix = XXX\n   cache = XXXX\n   ```\n   ```\n   本次：\n   XXX=D:\\ProgramData\\node_global_directory\\node_global\n   XXXX=D:\\ProgramData\\node_global_directory\\node_cache\n   ```\n   * 之后可运行命令`type %USERPROFILE%\\.npmrc`检查文件内容\n   * **修改过环境变量后，一定要重启cmd窗口以看到环境变量修改后的效果**\n\n\n------\n\n参考地址：\n\n1. 完全卸载nodejs：https://www.cnblogs.com/fighxp/p/7410235.html\n2. 菜鸟教程-安装nodejs：https://www.runoob.com/nodejs/nodejs-install-setup.html\n3. Nodejs安装及环境配置：https://www.jianshu.com/p/13f45e24b1de","source":"_posts/NodeJS 从安装到卸载再到重装.md","raw":"---\ntitle: NodeJS 从安装到卸载再到重装\ndate: 2022-03-04 10:20:34\ntags:\n---\n# NodeJS 的安装与完全卸载\n\n## 一、激动人心的卸载环节\n\n1. 从**程序和功能**按照常规套路卸载我们的`Node.js`\n2. 杀掉`NodeJS`的进程：`tasklist|findstr \"node\" && taskkill /F /IM \"node.js\" || echo Node.js已不再运行`\n3. 寻找下列文件夹并删掉它们！\n   `Program Files (x86)\\Nodejs`\n   `Program Files\\Nodejs`\n   `%appdata%\\npm`\n   `%appdata%\\npm-cache`\n4. 检查环境变量确保没有`Nodejs`或`npm`相关值存在：\n   `echo %PATH% | findstr \"node\"`\n5. （可选）命令行输入`where node`检查，凡是显示出的全都可以删掉！！\n6. 为了保险，重启！！（我没重启。。。）\n\n## 二、安装/重装\n\n1. 下载安装包（建议通过正规渠道——[nodejs官网(中文)](https://nodejs.org/zh-cn/download/)下载）并运行安装。安装时注意以下几点：\n\n   * 默认安装在`C:\\Program Files\\nodejs`路径下，可更改，记得确认好安装位置\n   * 若不在Custum Setup中选择Add to PATH，则稍后将手动设置其环境变量\n   * 其他选项默认即可\n\n2. 命令行输入`node -v`和`npm -v`检查安装，出现版本号代表安装成功\n\n3. 换源\n   使用npm的默认镜像源进行包的安装时存在不便，可能拖慢工程进度，可通过换源解决这一问题。\n   * 三种方法：\n   ```nodejs\n   //(原理)更改或追加npm配置文件：`%USERPROFILE%\\.npmrc`\n   registry = https://registry.npm.taobao.org\n   //通过config命令\n   npm config set registry https://registry.npm.taobao.org\n   //命令行指定\n   npm --registry https://registry.npm.taobao.org\n   ```\n\n   * 之后可运行命令`type %USERPROFILE%\\.npmrc`检查文件内容\n\n4. 修改全局依赖包下载路径\n   \n   全局依赖包下载路径指的是包在执行`npm i- g XXXX`全局下载时的安装路径。\n   * 可先在命令行输入`npm root -g`查看该路径\n   * 以下两种方法可对其进行更改\n     1. 运行cmd命令(原理与2相同)\n   ```\n   npm config set perfix XXX  （替换npm root -g的输出值）\n   npm config set cache XXXX   （替换执行包的全局安装时同时生成的同级缓存目录）\n   ```\n     2. 更改或追加npm配置文件：`%USERPROFILE%\\.npmrc`：\n   ```\n   prefix = XXX\n   cache = XXXX\n   ```\n   ```\n   本次：\n   XXX=D:\\ProgramData\\node_global_directory\\node_global\n   XXXX=D:\\ProgramData\\node_global_directory\\node_cache\n   ```\n   * 之后可运行命令`type %USERPROFILE%\\.npmrc`检查文件内容\n   * **修改过环境变量后，一定要重启cmd窗口以看到环境变量修改后的效果**\n\n\n------\n\n参考地址：\n\n1. 完全卸载nodejs：https://www.cnblogs.com/fighxp/p/7410235.html\n2. 菜鸟教程-安装nodejs：https://www.runoob.com/nodejs/nodejs-install-setup.html\n3. Nodejs安装及环境配置：https://www.jianshu.com/p/13f45e24b1de","slug":"NodeJS 从安装到卸载再到重装","published":1,"updated":"2022-03-04T02:23:53.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0qt0001rcsf6fgn95xs","content":"<h1 id=\"NodeJS-的安装与完全卸载\"><a href=\"#NodeJS-的安装与完全卸载\" class=\"headerlink\" title=\"NodeJS 的安装与完全卸载\"></a>NodeJS 的安装与完全卸载</h1><h2 id=\"一、激动人心的卸载环节\"><a href=\"#一、激动人心的卸载环节\" class=\"headerlink\" title=\"一、激动人心的卸载环节\"></a>一、激动人心的卸载环节</h2><ol>\n<li>从<strong>程序和功能</strong>按照常规套路卸载我们的<code>Node.js</code></li>\n<li>杀掉<code>NodeJS</code>的进程：<code>tasklist|findstr &quot;node&quot; &amp;&amp; taskkill /F /IM &quot;node.js&quot; || echo Node.js已不再运行</code></li>\n<li>寻找下列文件夹并删掉它们！<br><code>Program Files (x86)\\Nodejs</code><br><code>Program Files\\Nodejs</code><br><code>%appdata%\\npm</code><br><code>%appdata%\\npm-cache</code></li>\n<li>检查环境变量确保没有<code>Nodejs</code>或<code>npm</code>相关值存在：<br><code>echo %PATH% | findstr &quot;node&quot;</code></li>\n<li>（可选）命令行输入<code>where node</code>检查，凡是显示出的全都可以删掉！！</li>\n<li>为了保险，重启！！（我没重启。。。）</li>\n</ol>\n<h2 id=\"二、安装-重装\"><a href=\"#二、安装-重装\" class=\"headerlink\" title=\"二、安装/重装\"></a>二、安装/重装</h2><ol>\n<li><p>下载安装包（建议通过正规渠道——<a href=\"https://nodejs.org/zh-cn/download/\">nodejs官网(中文)</a>下载）并运行安装。安装时注意以下几点：</p>\n<ul>\n<li>默认安装在<code>C:\\Program Files\\nodejs</code>路径下，可更改，记得确认好安装位置</li>\n<li>若不在Custum Setup中选择Add to PATH，则稍后将手动设置其环境变量</li>\n<li>其他选项默认即可</li>\n</ul>\n</li>\n<li><p>命令行输入<code>node -v</code>和<code>npm -v</code>检查安装，出现版本号代表安装成功</p>\n</li>\n<li><p>换源<br>使用npm的默认镜像源进行包的安装时存在不便，可能拖慢工程进度，可通过换源解决这一问题。</p>\n<ul>\n<li><p>三种方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//(原理)更改或追加npm配置文件：`%USERPROFILE%\\.npmrc`</span><br><span class=\"line\">registry = https://registry.npm.taobao.org</span><br><span class=\"line\">//通过config命令</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\">//命令行指定</span><br><span class=\"line\">npm --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>\n<li><p>之后可运行命令<code>type %USERPROFILE%\\.npmrc</code>检查文件内容</p>\n</li>\n</ul>\n</li>\n<li><p>修改全局依赖包下载路径</p>\n<p>全局依赖包下载路径指的是包在执行<code>npm i- g XXXX</code>全局下载时的安装路径。</p>\n<ul>\n<li>可先在命令行输入<code>npm root -g</code>查看该路径</li>\n<li>以下两种方法可对其进行更改<ol>\n<li>运行cmd命令(原理与2相同)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set perfix XXX  （替换npm root -g的输出值）</span><br><span class=\"line\">npm config set cache XXXX   （替换执行包的全局安装时同时生成的同级缓存目录）</span><br></pre></td></tr></table></figure></li>\n<li>更改或追加npm配置文件：<code>%USERPROFILE%\\.npmrc</code>：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prefix = XXX</span><br><span class=\"line\">cache = XXXX</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本次：</span><br><span class=\"line\">XXX=D:\\ProgramData\\node_global_directory\\node_global</span><br><span class=\"line\">XXXX=D:\\ProgramData\\node_global_directory\\node_cache</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>之后可运行命令<code>type %USERPROFILE%\\.npmrc</code>检查文件内容</li>\n<li><strong>修改过环境变量后，一定要重启cmd窗口以看到环境变量修改后的效果</strong></li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>参考地址：</p>\n<ol>\n<li>完全卸载nodejs：<a href=\"https://www.cnblogs.com/fighxp/p/7410235.html\">https://www.cnblogs.com/fighxp/p/7410235.html</a></li>\n<li>菜鸟教程-安装nodejs：<a href=\"https://www.runoob.com/nodejs/nodejs-install-setup.html\">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></li>\n<li>Nodejs安装及环境配置：<a href=\"https://www.jianshu.com/p/13f45e24b1de\">https://www.jianshu.com/p/13f45e24b1de</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"NodeJS-的安装与完全卸载\"><a href=\"#NodeJS-的安装与完全卸载\" class=\"headerlink\" title=\"NodeJS 的安装与完全卸载\"></a>NodeJS 的安装与完全卸载</h1><h2 id=\"一、激动人心的卸载环节\"><a href=\"#一、激动人心的卸载环节\" class=\"headerlink\" title=\"一、激动人心的卸载环节\"></a>一、激动人心的卸载环节</h2><ol>\n<li>从<strong>程序和功能</strong>按照常规套路卸载我们的<code>Node.js</code></li>\n<li>杀掉<code>NodeJS</code>的进程：<code>tasklist|findstr &quot;node&quot; &amp;&amp; taskkill /F /IM &quot;node.js&quot; || echo Node.js已不再运行</code></li>\n<li>寻找下列文件夹并删掉它们！<br><code>Program Files (x86)\\Nodejs</code><br><code>Program Files\\Nodejs</code><br><code>%appdata%\\npm</code><br><code>%appdata%\\npm-cache</code></li>\n<li>检查环境变量确保没有<code>Nodejs</code>或<code>npm</code>相关值存在：<br><code>echo %PATH% | findstr &quot;node&quot;</code></li>\n<li>（可选）命令行输入<code>where node</code>检查，凡是显示出的全都可以删掉！！</li>\n<li>为了保险，重启！！（我没重启。。。）</li>\n</ol>\n<h2 id=\"二、安装-重装\"><a href=\"#二、安装-重装\" class=\"headerlink\" title=\"二、安装/重装\"></a>二、安装/重装</h2><ol>\n<li><p>下载安装包（建议通过正规渠道——<a href=\"https://nodejs.org/zh-cn/download/\">nodejs官网(中文)</a>下载）并运行安装。安装时注意以下几点：</p>\n<ul>\n<li>默认安装在<code>C:\\Program Files\\nodejs</code>路径下，可更改，记得确认好安装位置</li>\n<li>若不在Custum Setup中选择Add to PATH，则稍后将手动设置其环境变量</li>\n<li>其他选项默认即可</li>\n</ul>\n</li>\n<li><p>命令行输入<code>node -v</code>和<code>npm -v</code>检查安装，出现版本号代表安装成功</p>\n</li>\n<li><p>换源<br>使用npm的默认镜像源进行包的安装时存在不便，可能拖慢工程进度，可通过换源解决这一问题。</p>\n<ul>\n<li><p>三种方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//(原理)更改或追加npm配置文件：`%USERPROFILE%\\.npmrc`</span><br><span class=\"line\">registry = https://registry.npm.taobao.org</span><br><span class=\"line\">//通过config命令</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\">//命令行指定</span><br><span class=\"line\">npm --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>\n<li><p>之后可运行命令<code>type %USERPROFILE%\\.npmrc</code>检查文件内容</p>\n</li>\n</ul>\n</li>\n<li><p>修改全局依赖包下载路径</p>\n<p>全局依赖包下载路径指的是包在执行<code>npm i- g XXXX</code>全局下载时的安装路径。</p>\n<ul>\n<li>可先在命令行输入<code>npm root -g</code>查看该路径</li>\n<li>以下两种方法可对其进行更改<ol>\n<li>运行cmd命令(原理与2相同)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set perfix XXX  （替换npm root -g的输出值）</span><br><span class=\"line\">npm config set cache XXXX   （替换执行包的全局安装时同时生成的同级缓存目录）</span><br></pre></td></tr></table></figure></li>\n<li>更改或追加npm配置文件：<code>%USERPROFILE%\\.npmrc</code>：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prefix = XXX</span><br><span class=\"line\">cache = XXXX</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本次：</span><br><span class=\"line\">XXX=D:\\ProgramData\\node_global_directory\\node_global</span><br><span class=\"line\">XXXX=D:\\ProgramData\\node_global_directory\\node_cache</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>之后可运行命令<code>type %USERPROFILE%\\.npmrc</code>检查文件内容</li>\n<li><strong>修改过环境变量后，一定要重启cmd窗口以看到环境变量修改后的效果</strong></li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>参考地址：</p>\n<ol>\n<li>完全卸载nodejs：<a href=\"https://www.cnblogs.com/fighxp/p/7410235.html\">https://www.cnblogs.com/fighxp/p/7410235.html</a></li>\n<li>菜鸟教程-安装nodejs：<a href=\"https://www.runoob.com/nodejs/nodejs-install-setup.html\">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></li>\n<li>Nodejs安装及环境配置：<a href=\"https://www.jianshu.com/p/13f45e24b1de\">https://www.jianshu.com/p/13f45e24b1de</a></li>\n</ol>\n"},{"title":"React-Native 定义事件基类 EventBus","date":"2022-03-04T02:20:34.000Z","_content":"# 定义事件基类\n\n# EventBus\n\n1. 定义事件基类\n\n   ```java\n   public class BaseEvent {\n   }\n   ```\n\n   \n\n2. 定义具体事件类\n\n   ```java\n   public class FavorEvent extends BaseEvent {\n       \n       private int did;\n   \n       public FavorEvent() {}\n       \n       public FavorEvent(int did) { this.did = did; }\n       \n       public int getDid() { return did; }\n       \n       public void setDid(int did) { this.did = did; }\n   }\n   ```\n\n3. 在需要监听此事件的地方向 EventBus 注册事件监听器\n\n   ```java\n   EventBus.getDefault().register(this);\n   ```\n\n4. 当需要取消注册事件监听器时\n\n   ```java\n   EventBus.getDefault().unregister(this);\n   ```\n\n   ","source":"_posts/React-Native 定义事件基类 EventBus.md","raw":"---\ntitle: React-Native 定义事件基类 EventBus\ndate: 2022-03-04 10:20:34\ntags:\n---\n# 定义事件基类\n\n# EventBus\n\n1. 定义事件基类\n\n   ```java\n   public class BaseEvent {\n   }\n   ```\n\n   \n\n2. 定义具体事件类\n\n   ```java\n   public class FavorEvent extends BaseEvent {\n       \n       private int did;\n   \n       public FavorEvent() {}\n       \n       public FavorEvent(int did) { this.did = did; }\n       \n       public int getDid() { return did; }\n       \n       public void setDid(int did) { this.did = did; }\n   }\n   ```\n\n3. 在需要监听此事件的地方向 EventBus 注册事件监听器\n\n   ```java\n   EventBus.getDefault().register(this);\n   ```\n\n4. 当需要取消注册事件监听器时\n\n   ```java\n   EventBus.getDefault().unregister(this);\n   ```\n\n   ","slug":"React-Native 定义事件基类 EventBus","published":1,"updated":"2022-03-04T02:25:03.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0qv0002rcsf3t9t0d8q","content":"<h1 id=\"定义事件基类\"><a href=\"#定义事件基类\" class=\"headerlink\" title=\"定义事件基类\"></a>定义事件基类</h1><h1 id=\"EventBus\"><a href=\"#EventBus\" class=\"headerlink\" title=\"EventBus\"></a>EventBus</h1><ol>\n<li><p>定义事件基类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseEvent</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>定义具体事件类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FavorEvent</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseEvent</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> did;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FavorEvent</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FavorEvent</span><span class=\"params\">(<span class=\"type\">int</span> did)</span> &#123; <span class=\"built_in\">this</span>.did = did; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getDid</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> did; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDid</span><span class=\"params\">(<span class=\"type\">int</span> did)</span> &#123; <span class=\"built_in\">this</span>.did = did; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在需要监听此事件的地方向 EventBus 注册事件监听器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventBus.getDefault().register(<span class=\"built_in\">this</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>当需要取消注册事件监听器时</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventBus.getDefault().unregister(<span class=\"built_in\">this</span>);</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"定义事件基类\"><a href=\"#定义事件基类\" class=\"headerlink\" title=\"定义事件基类\"></a>定义事件基类</h1><h1 id=\"EventBus\"><a href=\"#EventBus\" class=\"headerlink\" title=\"EventBus\"></a>EventBus</h1><ol>\n<li><p>定义事件基类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseEvent</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>定义具体事件类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FavorEvent</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseEvent</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> did;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FavorEvent</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FavorEvent</span><span class=\"params\">(<span class=\"type\">int</span> did)</span> &#123; <span class=\"built_in\">this</span>.did = did; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getDid</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> did; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDid</span><span class=\"params\">(<span class=\"type\">int</span> did)</span> &#123; <span class=\"built_in\">this</span>.did = did; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在需要监听此事件的地方向 EventBus 注册事件监听器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventBus.getDefault().register(<span class=\"built_in\">this</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>当需要取消注册事件监听器时</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventBus.getDefault().unregister(<span class=\"built_in\">this</span>);</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Office 激活密钥","date":"2022-03-04T02:20:34.000Z","_content":"资源来自网络\n二、Microsoft Office 2019 Vol版Gvlk密钥(KMS激活专用)\nOffice Professional Plus 2019：NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP\nOffice Standard 2019：6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK\nProject Professional 2019：B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B\nProject Standard 2019：C4F7P-NCP8C-6CQPT-MQHV9-JXD2M\nVisio Professional 2019：9BGNQ-K37YR-RQHF2-38RQ3-7VCBB\nVisio Standard 2019：7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2\nAccess 2019：9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT\nExcel 2019：TMJWT-YYNMB-3BKTF-644 FC-RVXBD\nOutlook 2019：7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK\nPowerPoint 2019：RRNCX-C64HY-W2MM7-MCH9G-TJHMQ\nPublisher 2019：G2KWX-3NW6P-PY93R-JXK2T-C9Y9V\nSkype for Business 2019：NCJ33-JHBBY-HTK98-MYCV8-HMKHJ\nWord 2019：PBX3G-NWMT6-Q7XBW-PYJGG-WXD33","source":"_posts/Office 激活密钥.md","raw":"---\ntitle: Office 激活密钥\ndate: 2022-03-04 10:20:34\ntags:\n---\n资源来自网络\n二、Microsoft Office 2019 Vol版Gvlk密钥(KMS激活专用)\nOffice Professional Plus 2019：NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP\nOffice Standard 2019：6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK\nProject Professional 2019：B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B\nProject Standard 2019：C4F7P-NCP8C-6CQPT-MQHV9-JXD2M\nVisio Professional 2019：9BGNQ-K37YR-RQHF2-38RQ3-7VCBB\nVisio Standard 2019：7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2\nAccess 2019：9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT\nExcel 2019：TMJWT-YYNMB-3BKTF-644 FC-RVXBD\nOutlook 2019：7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK\nPowerPoint 2019：RRNCX-C64HY-W2MM7-MCH9G-TJHMQ\nPublisher 2019：G2KWX-3NW6P-PY93R-JXK2T-C9Y9V\nSkype for Business 2019：NCJ33-JHBBY-HTK98-MYCV8-HMKHJ\nWord 2019：PBX3G-NWMT6-Q7XBW-PYJGG-WXD33","slug":"Office 激活密钥","published":1,"updated":"2022-03-04T02:24:33.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0qw0003rcsf2jpk0m8w","content":"<p>资源来自网络<br>二、Microsoft Office 2019 Vol版Gvlk密钥(KMS激活专用)<br>Office Professional Plus 2019：NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP<br>Office Standard 2019：6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK<br>Project Professional 2019：B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B<br>Project Standard 2019：C4F7P-NCP8C-6CQPT-MQHV9-JXD2M<br>Visio Professional 2019：9BGNQ-K37YR-RQHF2-38RQ3-7VCBB<br>Visio Standard 2019：7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2<br>Access 2019：9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT<br>Excel 2019：TMJWT-YYNMB-3BKTF-644 FC-RVXBD<br>Outlook 2019：7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK<br>PowerPoint 2019：RRNCX-C64HY-W2MM7-MCH9G-TJHMQ<br>Publisher 2019：G2KWX-3NW6P-PY93R-JXK2T-C9Y9V<br>Skype for Business 2019：NCJ33-JHBBY-HTK98-MYCV8-HMKHJ<br>Word 2019：PBX3G-NWMT6-Q7XBW-PYJGG-WXD33</p>\n","site":{"data":{}},"excerpt":"","more":"<p>资源来自网络<br>二、Microsoft Office 2019 Vol版Gvlk密钥(KMS激活专用)<br>Office Professional Plus 2019：NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP<br>Office Standard 2019：6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK<br>Project Professional 2019：B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B<br>Project Standard 2019：C4F7P-NCP8C-6CQPT-MQHV9-JXD2M<br>Visio Professional 2019：9BGNQ-K37YR-RQHF2-38RQ3-7VCBB<br>Visio Standard 2019：7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2<br>Access 2019：9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT<br>Excel 2019：TMJWT-YYNMB-3BKTF-644 FC-RVXBD<br>Outlook 2019：7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK<br>PowerPoint 2019：RRNCX-C64HY-W2MM7-MCH9G-TJHMQ<br>Publisher 2019：G2KWX-3NW6P-PY93R-JXK2T-C9Y9V<br>Skype for Business 2019：NCJ33-JHBBY-HTK98-MYCV8-HMKHJ<br>Word 2019：PBX3G-NWMT6-Q7XBW-PYJGG-WXD33</p>\n"},{"title":"conda及pip配置文件 - 已整理","date":"2022-03-04T02:20:34.000Z","_content":"## conda 清华源\n\n路径：\n-（Windows）`%USERPROFILE%/.condarc`\n-（Linux）`~/.condarc`\n\n检查命令：`conda config --show-sources`（事实上，`show--sources`只需输入到`show-`即可达到效果）\n\n```\nchannels:\n  - defaults\nshow_channel_urls: true\ndefault_channels:\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/simpleitk/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\ncustom_channels:\n  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\nssl_verify: true\n```\n\n## conda 北外镜像\n\n```\nchannels:\n  - defaults\nshow_channel_urls: true\ndefault_channels:\n  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/free/\n  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main/\n#Conda Forge\n  - https://mirrors.bfsu.edu.cn/anaconda/cloud/conda-forge/\n#msys2（可略）\n  - https://mirrors.bfsu.edu.cn/anaconda/cloud/msys2/\n#bioconda（可略）\n  - https://mirrors.bfsu.edu.cn/anaconda/cloud/bioconda/\n#menpo（可略）\n  - https://mirrors.bfsu.edu.cn/anaconda/cloud/menpo/\n#pytorch\n  - https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/\n# for legacy win-64（可略）\n  - https://mirrors.bfsu.edu.cn/anaconda/cloud/peterjc123/\nssl_verify: true\n```\n\n## pip 阿里源\n\n路径：\n-（Windows）`%USERPROFILE%/pip/pip.ini`\n-（Linux）`~/.pip/pip.conf`\n\n检查命令：`pip config list`\n\n```\n[global]\ntimeout = 6000\nindex-url = http://mirrors.aliyun.com/pypi/simple/\ntrusted-host = mirrors.aliyun.com\n```\n\n------------------------\n参考地址","source":"_posts/conda及pip配置文件 - 已整理.md","raw":"---\ntitle: conda及pip配置文件 - 已整理\ndate: 2022-03-04 10:20:34\ntags:\n---\n## conda 清华源\n\n路径：\n-（Windows）`%USERPROFILE%/.condarc`\n-（Linux）`~/.condarc`\n\n检查命令：`conda config --show-sources`（事实上，`show--sources`只需输入到`show-`即可达到效果）\n\n```\nchannels:\n  - defaults\nshow_channel_urls: true\ndefault_channels:\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/simpleitk/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\ncustom_channels:\n  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\nssl_verify: true\n```\n\n## conda 北外镜像\n\n```\nchannels:\n  - defaults\nshow_channel_urls: true\ndefault_channels:\n  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/free/\n  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main/\n#Conda Forge\n  - https://mirrors.bfsu.edu.cn/anaconda/cloud/conda-forge/\n#msys2（可略）\n  - https://mirrors.bfsu.edu.cn/anaconda/cloud/msys2/\n#bioconda（可略）\n  - https://mirrors.bfsu.edu.cn/anaconda/cloud/bioconda/\n#menpo（可略）\n  - https://mirrors.bfsu.edu.cn/anaconda/cloud/menpo/\n#pytorch\n  - https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/\n# for legacy win-64（可略）\n  - https://mirrors.bfsu.edu.cn/anaconda/cloud/peterjc123/\nssl_verify: true\n```\n\n## pip 阿里源\n\n路径：\n-（Windows）`%USERPROFILE%/pip/pip.ini`\n-（Linux）`~/.pip/pip.conf`\n\n检查命令：`pip config list`\n\n```\n[global]\ntimeout = 6000\nindex-url = http://mirrors.aliyun.com/pypi/simple/\ntrusted-host = mirrors.aliyun.com\n```\n\n------------------------\n参考地址","slug":"conda及pip配置文件 - 已整理","published":1,"updated":"2022-03-04T02:22:46.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0qw0004rcsf2841ffux","content":"<h2 id=\"conda-清华源\"><a href=\"#conda-清华源\" class=\"headerlink\" title=\"conda 清华源\"></a>conda 清华源</h2><p>路径：<br>-（Windows）<code>%USERPROFILE%/.condarc</code><br>-（Linux）<code>~/.condarc</code></p>\n<p>检查命令：<code>conda config --show-sources</code>（事实上，<code>show--sources</code>只需输入到<code>show-</code>即可达到效果）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels:</span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls: true</span><br><span class=\"line\">default_channels:</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/simpleitk/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class=\"line\">custom_channels:</span><br><span class=\"line\">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">ssl_verify: true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"conda-北外镜像\"><a href=\"#conda-北外镜像\" class=\"headerlink\" title=\"conda 北外镜像\"></a>conda 北外镜像</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels:</span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls: true</span><br><span class=\"line\">default_channels:</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main/</span><br><span class=\"line\">#Conda Forge</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/cloud/conda-forge/</span><br><span class=\"line\">#msys2（可略）</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/cloud/msys2/</span><br><span class=\"line\">#bioconda（可略）</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/cloud/bioconda/</span><br><span class=\"line\">#menpo（可略）</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/cloud/menpo/</span><br><span class=\"line\">#pytorch</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/</span><br><span class=\"line\"># for legacy win-64（可略）</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/cloud/peterjc123/</span><br><span class=\"line\">ssl_verify: true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pip-阿里源\"><a href=\"#pip-阿里源\" class=\"headerlink\" title=\"pip 阿里源\"></a>pip 阿里源</h2><p>路径：<br>-（Windows）<code>%USERPROFILE%/pip/pip.ini</code><br>-（Linux）<code>~/.pip/pip.conf</code></p>\n<p>检查命令：<code>pip config list</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">timeout = 6000</span><br><span class=\"line\">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>参考地址</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"conda-清华源\"><a href=\"#conda-清华源\" class=\"headerlink\" title=\"conda 清华源\"></a>conda 清华源</h2><p>路径：<br>-（Windows）<code>%USERPROFILE%/.condarc</code><br>-（Linux）<code>~/.condarc</code></p>\n<p>检查命令：<code>conda config --show-sources</code>（事实上，<code>show--sources</code>只需输入到<code>show-</code>即可达到效果）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels:</span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls: true</span><br><span class=\"line\">default_channels:</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/simpleitk/</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class=\"line\">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class=\"line\">custom_channels:</span><br><span class=\"line\">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class=\"line\">ssl_verify: true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"conda-北外镜像\"><a href=\"#conda-北外镜像\" class=\"headerlink\" title=\"conda 北外镜像\"></a>conda 北外镜像</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels:</span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls: true</span><br><span class=\"line\">default_channels:</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main/</span><br><span class=\"line\">#Conda Forge</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/cloud/conda-forge/</span><br><span class=\"line\">#msys2（可略）</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/cloud/msys2/</span><br><span class=\"line\">#bioconda（可略）</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/cloud/bioconda/</span><br><span class=\"line\">#menpo（可略）</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/cloud/menpo/</span><br><span class=\"line\">#pytorch</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/</span><br><span class=\"line\"># for legacy win-64（可略）</span><br><span class=\"line\">  - https://mirrors.bfsu.edu.cn/anaconda/cloud/peterjc123/</span><br><span class=\"line\">ssl_verify: true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pip-阿里源\"><a href=\"#pip-阿里源\" class=\"headerlink\" title=\"pip 阿里源\"></a>pip 阿里源</h2><p>路径：<br>-（Windows）<code>%USERPROFILE%/pip/pip.ini</code><br>-（Linux）<code>~/.pip/pip.conf</code></p>\n<p>检查命令：<code>pip config list</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">timeout = 6000</span><br><span class=\"line\">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>参考地址</p>\n"},{"title":"WSL linux相关设置","date":"2022-03-04T02:20:34.000Z","_content":"```\nsudo dpkg-reconfigure locales\n\nsudo vim /etc/apt/sources.list\n\n# 对应 20-04 LTS 发行版\n=======================================\n\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse\n\n# 预发布软件源，不建议启用\n# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse\n\n=======================================\n\nsudo apt-get update\n\nsudo apt-get upgrade\n\n=======================================\nsudo apt-get install xrdp\n\n///\nsudo apt-get install xfce4\n\nsudo apt-get install gnome\n\nexport DISPLAY=localhost:0\nxfce4-session\n///\nsudo apt-get install xrdp\nsudo sed -i 's/port=3389/port=3390/g' /etc/xrdp/xrdp.ini\nsudo echo xfce4-session >~/.xsession\nsudo service xrdp restart\n\n\n\nchown -R bob:bob /home/bob\n\n=======================================\nsudo apt-get install ubuntu-desktop unity compizconfig-settings-manager\n\nsudo apt-get install ubuntu-desktop unity compizconfig-settings-manager\n\ncompiz出现错误：\n=======================================\ncd ~    \n\n切换到自己的home目录之后，\n\nrm -rf .cache/compiz\nrm -rf .cache/compiz-1\nrm -rf .cache/compizconfig-1\nrm -rf .config/compiz\nrm -rf .config/compiz-1\nrm -rf .config/compizconfig-1\nrm -rf .gconf/apps/compiz\nrm -rf .gconf/apps/compiz-1\nrm -rf .gconf/apps/compizconfig-1\n\n好像删完这个.config/compiz-1 好像就自动恢复了。\n=======================================\nexport DISPLAY=localhost:0\nccsm\ncompiz\n=======================================\n安装了mysql 后，启动时，程序提示 “No directory, logging in with HOME=/”\nsudo service mysql stop\n\nsudo usermod -d /var/lib/mysql/ mysql      //使用usermod命令来重新定位mysql所在的目录\n\nsudo service mysql start\n=======================================\n```\n","source":"_posts/WSL linux相关设置.md","raw":"---\ntitle: WSL linux相关设置\ndate: 2022-03-04 10:20:34\ntags:\n---\n```\nsudo dpkg-reconfigure locales\n\nsudo vim /etc/apt/sources.list\n\n# 对应 20-04 LTS 发行版\n=======================================\n\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse\n\n# 预发布软件源，不建议启用\n# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse\n\n=======================================\n\nsudo apt-get update\n\nsudo apt-get upgrade\n\n=======================================\nsudo apt-get install xrdp\n\n///\nsudo apt-get install xfce4\n\nsudo apt-get install gnome\n\nexport DISPLAY=localhost:0\nxfce4-session\n///\nsudo apt-get install xrdp\nsudo sed -i 's/port=3389/port=3390/g' /etc/xrdp/xrdp.ini\nsudo echo xfce4-session >~/.xsession\nsudo service xrdp restart\n\n\n\nchown -R bob:bob /home/bob\n\n=======================================\nsudo apt-get install ubuntu-desktop unity compizconfig-settings-manager\n\nsudo apt-get install ubuntu-desktop unity compizconfig-settings-manager\n\ncompiz出现错误：\n=======================================\ncd ~    \n\n切换到自己的home目录之后，\n\nrm -rf .cache/compiz\nrm -rf .cache/compiz-1\nrm -rf .cache/compizconfig-1\nrm -rf .config/compiz\nrm -rf .config/compiz-1\nrm -rf .config/compizconfig-1\nrm -rf .gconf/apps/compiz\nrm -rf .gconf/apps/compiz-1\nrm -rf .gconf/apps/compizconfig-1\n\n好像删完这个.config/compiz-1 好像就自动恢复了。\n=======================================\nexport DISPLAY=localhost:0\nccsm\ncompiz\n=======================================\n安装了mysql 后，启动时，程序提示 “No directory, logging in with HOME=/”\nsudo service mysql stop\n\nsudo usermod -d /var/lib/mysql/ mysql      //使用usermod命令来重新定位mysql所在的目录\n\nsudo service mysql start\n=======================================\n```\n","slug":"WSL linux相关设置","published":1,"updated":"2022-03-08T05:51:36.306Z","_id":"cl0bsr0r00005rcsf68o103v3","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg-reconfigure locales</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vim /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\"># 对应 20-04 LTS 发行版</span><br><span class=\"line\">=======================================</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\"># 预发布软件源，不建议启用</span><br><span class=\"line\"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">=======================================</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get upgrade</span><br><span class=\"line\"></span><br><span class=\"line\">=======================================</span><br><span class=\"line\">sudo apt-get install xrdp</span><br><span class=\"line\"></span><br><span class=\"line\">///</span><br><span class=\"line\">sudo apt-get install xfce4</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install gnome</span><br><span class=\"line\"></span><br><span class=\"line\">export DISPLAY=localhost:0</span><br><span class=\"line\">xfce4-session</span><br><span class=\"line\">///</span><br><span class=\"line\">sudo apt-get install xrdp</span><br><span class=\"line\">sudo sed -i &#x27;s/port=3389/port=3390/g&#x27; /etc/xrdp/xrdp.ini</span><br><span class=\"line\">sudo echo xfce4-session &gt;~/.xsession</span><br><span class=\"line\">sudo service xrdp restart</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">chown -R bob:bob /home/bob</span><br><span class=\"line\"></span><br><span class=\"line\">=======================================</span><br><span class=\"line\">sudo apt-get install ubuntu-desktop unity compizconfig-settings-manager</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install ubuntu-desktop unity compizconfig-settings-manager</span><br><span class=\"line\"></span><br><span class=\"line\">compiz出现错误：</span><br><span class=\"line\">=======================================</span><br><span class=\"line\">cd ~    </span><br><span class=\"line\"></span><br><span class=\"line\">切换到自己的home目录之后，</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf .cache/compiz</span><br><span class=\"line\">rm -rf .cache/compiz-1</span><br><span class=\"line\">rm -rf .cache/compizconfig-1</span><br><span class=\"line\">rm -rf .config/compiz</span><br><span class=\"line\">rm -rf .config/compiz-1</span><br><span class=\"line\">rm -rf .config/compizconfig-1</span><br><span class=\"line\">rm -rf .gconf/apps/compiz</span><br><span class=\"line\">rm -rf .gconf/apps/compiz-1</span><br><span class=\"line\">rm -rf .gconf/apps/compizconfig-1</span><br><span class=\"line\"></span><br><span class=\"line\">好像删完这个.config/compiz-1 好像就自动恢复了。</span><br><span class=\"line\">=======================================</span><br><span class=\"line\">export DISPLAY=localhost:0</span><br><span class=\"line\">ccsm</span><br><span class=\"line\">compiz</span><br><span class=\"line\">=======================================</span><br><span class=\"line\">安装了mysql 后，启动时，程序提示 “No directory, logging in with HOME=/”</span><br><span class=\"line\">sudo service mysql stop</span><br><span class=\"line\"></span><br><span class=\"line\">sudo usermod -d /var/lib/mysql/ mysql      //使用usermod命令来重新定位mysql所在的目录</span><br><span class=\"line\"></span><br><span class=\"line\">sudo service mysql start</span><br><span class=\"line\">=======================================</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg-reconfigure locales</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vim /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\"># 对应 20-04 LTS 发行版</span><br><span class=\"line\">=======================================</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\"># 预发布软件源，不建议启用</span><br><span class=\"line\"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">=======================================</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get upgrade</span><br><span class=\"line\"></span><br><span class=\"line\">=======================================</span><br><span class=\"line\">sudo apt-get install xrdp</span><br><span class=\"line\"></span><br><span class=\"line\">///</span><br><span class=\"line\">sudo apt-get install xfce4</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install gnome</span><br><span class=\"line\"></span><br><span class=\"line\">export DISPLAY=localhost:0</span><br><span class=\"line\">xfce4-session</span><br><span class=\"line\">///</span><br><span class=\"line\">sudo apt-get install xrdp</span><br><span class=\"line\">sudo sed -i &#x27;s/port=3389/port=3390/g&#x27; /etc/xrdp/xrdp.ini</span><br><span class=\"line\">sudo echo xfce4-session &gt;~/.xsession</span><br><span class=\"line\">sudo service xrdp restart</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">chown -R bob:bob /home/bob</span><br><span class=\"line\"></span><br><span class=\"line\">=======================================</span><br><span class=\"line\">sudo apt-get install ubuntu-desktop unity compizconfig-settings-manager</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install ubuntu-desktop unity compizconfig-settings-manager</span><br><span class=\"line\"></span><br><span class=\"line\">compiz出现错误：</span><br><span class=\"line\">=======================================</span><br><span class=\"line\">cd ~    </span><br><span class=\"line\"></span><br><span class=\"line\">切换到自己的home目录之后，</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf .cache/compiz</span><br><span class=\"line\">rm -rf .cache/compiz-1</span><br><span class=\"line\">rm -rf .cache/compizconfig-1</span><br><span class=\"line\">rm -rf .config/compiz</span><br><span class=\"line\">rm -rf .config/compiz-1</span><br><span class=\"line\">rm -rf .config/compizconfig-1</span><br><span class=\"line\">rm -rf .gconf/apps/compiz</span><br><span class=\"line\">rm -rf .gconf/apps/compiz-1</span><br><span class=\"line\">rm -rf .gconf/apps/compizconfig-1</span><br><span class=\"line\"></span><br><span class=\"line\">好像删完这个.config/compiz-1 好像就自动恢复了。</span><br><span class=\"line\">=======================================</span><br><span class=\"line\">export DISPLAY=localhost:0</span><br><span class=\"line\">ccsm</span><br><span class=\"line\">compiz</span><br><span class=\"line\">=======================================</span><br><span class=\"line\">安装了mysql 后，启动时，程序提示 “No directory, logging in with HOME=/”</span><br><span class=\"line\">sudo service mysql stop</span><br><span class=\"line\"></span><br><span class=\"line\">sudo usermod -d /var/lib/mysql/ mysql      //使用usermod命令来重新定位mysql所在的目录</span><br><span class=\"line\"></span><br><span class=\"line\">sudo service mysql start</span><br><span class=\"line\">=======================================</span><br></pre></td></tr></table></figure>\n"},{"title":"html 小技巧","date":"2022-03-04T02:20:34.000Z","_content":"# HTML\n## 页脚在最底部\n1. 采用 flexbox 布局模型\n    * 将 body 的 display 属性设置为 flex，然后将方向属性设置为列（纵向布局）；\n    * 同时将 html 和 body 元素的高度设置为 100% 以使之充满整个屏幕\n    ```html\n    <!-- html代码 -->\n    <div id=\"container\">\n        <header>HEADER</header>\n        <section class=\"main\">MAIN</section>\n        <footer>FOOTER</footer>\n    </div>\n    ```\n    ```css\n    //css 代码\n    * { margin: 0; padding: 0 }\n    html, body { height: 100% }\n    #container {\n        display: flex;\n        flex-direction: column;\n        height: 100%\n    }\n    header { background: #999; flex: 0 0 auto }\n    .main { background: orange; flex: 1 0 auto; }\n    footer { background: #333; flex: 0 0 auto }\n    ```","source":"_posts/html 小技巧.md","raw":"---\ntitle: html 小技巧\ndate: 2022-03-04 10:20:34\ntags:\n---\n# HTML\n## 页脚在最底部\n1. 采用 flexbox 布局模型\n    * 将 body 的 display 属性设置为 flex，然后将方向属性设置为列（纵向布局）；\n    * 同时将 html 和 body 元素的高度设置为 100% 以使之充满整个屏幕\n    ```html\n    <!-- html代码 -->\n    <div id=\"container\">\n        <header>HEADER</header>\n        <section class=\"main\">MAIN</section>\n        <footer>FOOTER</footer>\n    </div>\n    ```\n    ```css\n    //css 代码\n    * { margin: 0; padding: 0 }\n    html, body { height: 100% }\n    #container {\n        display: flex;\n        flex-direction: column;\n        height: 100%\n    }\n    header { background: #999; flex: 0 0 auto }\n    .main { background: orange; flex: 1 0 auto; }\n    footer { background: #333; flex: 0 0 auto }\n    ```","slug":"html 小技巧","published":1,"updated":"2022-03-04T02:23:06.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0r10006rcsfa3nm7h07","content":"<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h2 id=\"页脚在最底部\"><a href=\"#页脚在最底部\" class=\"headerlink\" title=\"页脚在最底部\"></a>页脚在最底部</h2><ol>\n<li>采用 flexbox 布局模型<ul>\n<li>将 body 的 display 属性设置为 flex，然后将方向属性设置为列（纵向布局）；</li>\n<li>同时将 html 和 body 元素的高度设置为 100% 以使之充满整个屏幕<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>HEADER<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span>MAIN<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>FOOTER<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//css 代码</span><br><span class=\"line\">* &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">height</span>: <span class=\"number\">100%</span> &#125;</span><br><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span> &#123; <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>; <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> auto &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123; <span class=\"attribute\">background</span>: orange; <span class=\"attribute\">flex</span>: <span class=\"number\">1</span> <span class=\"number\">0</span> auto; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> &#123; <span class=\"attribute\">background</span>: <span class=\"number\">#333</span>; <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> auto &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h2 id=\"页脚在最底部\"><a href=\"#页脚在最底部\" class=\"headerlink\" title=\"页脚在最底部\"></a>页脚在最底部</h2><ol>\n<li>采用 flexbox 布局模型<ul>\n<li>将 body 的 display 属性设置为 flex，然后将方向属性设置为列（纵向布局）；</li>\n<li>同时将 html 和 body 元素的高度设置为 100% 以使之充满整个屏幕<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>HEADER<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span>MAIN<span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>FOOTER<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//css 代码</span><br><span class=\"line\">* &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">height</span>: <span class=\"number\">100%</span> &#125;</span><br><span class=\"line\"><span class=\"selector-id\">#container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span> &#123; <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>; <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> auto &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123; <span class=\"attribute\">background</span>: orange; <span class=\"attribute\">flex</span>: <span class=\"number\">1</span> <span class=\"number\">0</span> auto; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">footer</span> &#123; <span class=\"attribute\">background</span>: <span class=\"number\">#333</span>; <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> auto &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n"},{"title":"NodeJS 的一些小贴士","date":"2022-03-04T02:20:34.000Z","_content":"# 以下是一些小贴士\n## 1. npm 换源：\n\n    淘宝源就是阿里源，阿里源就是淘宝源\n## 2. npm中，包的管理\n\n    查看所有全局安装的包：`npm list -g --depth 0`\n\n    查看全局是否安装过某个包：`npm ls 包/插件名称 -g`\n    查看当前文件下是否安装某个包：`npm ls 包/插件名称`\n    \n    查看一个包的版本信息（以`jQuery`包为例）：\n    npm服务器上所有的jquery版本信息：`npm view jquery versions`\n    只查看jquery的最新的版本：`npm view jquery version`\n    更全的信息：`npm info jquery`\n\n\n-----\n参考链接：\n1. [npm查看全局安装过哪些包，是否安装过某个包](https://blog.csdn.net/taylorzun/article/details/105238710)\n2. [npm 如何查看一个包的版本信息？](https://blog.csdn.net/cvper/article/details/79543262?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=09497030-1718-400c-b6e6-a7f7d2d85fc9&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control)","source":"_posts/nodejsTips.md","raw":"---\ntitle: NodeJS 的一些小贴士\ndate: 2022-03-04 10:20:34\ntags:\n---\n# 以下是一些小贴士\n## 1. npm 换源：\n\n    淘宝源就是阿里源，阿里源就是淘宝源\n## 2. npm中，包的管理\n\n    查看所有全局安装的包：`npm list -g --depth 0`\n\n    查看全局是否安装过某个包：`npm ls 包/插件名称 -g`\n    查看当前文件下是否安装某个包：`npm ls 包/插件名称`\n    \n    查看一个包的版本信息（以`jQuery`包为例）：\n    npm服务器上所有的jquery版本信息：`npm view jquery versions`\n    只查看jquery的最新的版本：`npm view jquery version`\n    更全的信息：`npm info jquery`\n\n\n-----\n参考链接：\n1. [npm查看全局安装过哪些包，是否安装过某个包](https://blog.csdn.net/taylorzun/article/details/105238710)\n2. [npm 如何查看一个包的版本信息？](https://blog.csdn.net/cvper/article/details/79543262?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=09497030-1718-400c-b6e6-a7f7d2d85fc9&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control)","slug":"nodejsTips","published":1,"updated":"2022-03-04T02:24:15.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0r20007rcsf9hhu1ng6","content":"<h1 id=\"以下是一些小贴士\"><a href=\"#以下是一些小贴士\" class=\"headerlink\" title=\"以下是一些小贴士\"></a>以下是一些小贴士</h1><h2 id=\"1-npm-换源：\"><a href=\"#1-npm-换源：\" class=\"headerlink\" title=\"1. npm 换源：\"></a>1. npm 换源：</h2><pre><code>淘宝源就是阿里源，阿里源就是淘宝源\n</code></pre>\n<h2 id=\"2-npm中，包的管理\"><a href=\"#2-npm中，包的管理\" class=\"headerlink\" title=\"2. npm中，包的管理\"></a>2. npm中，包的管理</h2><pre><code>查看所有全局安装的包：`npm list -g --depth 0`\n\n查看全局是否安装过某个包：`npm ls 包/插件名称 -g`\n查看当前文件下是否安装某个包：`npm ls 包/插件名称`\n\n查看一个包的版本信息（以`jQuery`包为例）：\nnpm服务器上所有的jquery版本信息：`npm view jquery versions`\n只查看jquery的最新的版本：`npm view jquery version`\n更全的信息：`npm info jquery`\n</code></pre>\n<hr>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/taylorzun/article/details/105238710\">npm查看全局安装过哪些包，是否安装过某个包</a></li>\n<li><a href=\"https://blog.csdn.net/cvper/article/details/79543262?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=09497030-1718-400c-b6e6-a7f7d2d85fc9&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control\">npm 如何查看一个包的版本信息？</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"以下是一些小贴士\"><a href=\"#以下是一些小贴士\" class=\"headerlink\" title=\"以下是一些小贴士\"></a>以下是一些小贴士</h1><h2 id=\"1-npm-换源：\"><a href=\"#1-npm-换源：\" class=\"headerlink\" title=\"1. npm 换源：\"></a>1. npm 换源：</h2><pre><code>淘宝源就是阿里源，阿里源就是淘宝源\n</code></pre>\n<h2 id=\"2-npm中，包的管理\"><a href=\"#2-npm中，包的管理\" class=\"headerlink\" title=\"2. npm中，包的管理\"></a>2. npm中，包的管理</h2><pre><code>查看所有全局安装的包：`npm list -g --depth 0`\n\n查看全局是否安装过某个包：`npm ls 包/插件名称 -g`\n查看当前文件下是否安装某个包：`npm ls 包/插件名称`\n\n查看一个包的版本信息（以`jQuery`包为例）：\nnpm服务器上所有的jquery版本信息：`npm view jquery versions`\n只查看jquery的最新的版本：`npm view jquery version`\n更全的信息：`npm info jquery`\n</code></pre>\n<hr>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/taylorzun/article/details/105238710\">npm查看全局安装过哪些包，是否安装过某个包</a></li>\n<li><a href=\"https://blog.csdn.net/cvper/article/details/79543262?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=09497030-1718-400c-b6e6-a7f7d2d85fc9&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control\">npm 如何查看一个包的版本信息？</a></li>\n</ol>\n"},{"title":"vue 的使用","date":"2022-03-04T02:20:34.000Z","_content":"# vue 的使用\n**`Vue.js`** 渐进式 `JavaScript` 框架。","source":"_posts/vue的使用.md","raw":"---\ntitle: vue 的使用\ndate: 2022-03-04 10:20:34\ntags:\n---\n# vue 的使用\n**`Vue.js`** 渐进式 `JavaScript` 框架。","slug":"vue的使用","published":1,"updated":"2022-03-04T02:26:22.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0r30008rcsf6kxx3271","content":"<h1 id=\"vue-的使用\"><a href=\"#vue-的使用\" class=\"headerlink\" title=\"vue 的使用\"></a>vue 的使用</h1><p><strong><code>Vue.js</code></strong> 渐进式 <code>JavaScript</code> 框架。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue-的使用\"><a href=\"#vue-的使用\" class=\"headerlink\" title=\"vue 的使用\"></a>vue 的使用</h1><p><strong><code>Vue.js</code></strong> 渐进式 <code>JavaScript</code> 框架。</p>\n"},{"title":"react-native 组件间通信简述","date":"2022-03-04T02:20:34.000Z","_content":"## 父组件向子组件通讯\n通讯是单向的，数据必须是由一方传到另一方。在 React 中，父组件可以向子组件通过传 props 的方式，向子组件进行通讯。\n```\nimport React,{Component,PureComponent} from 'react'\nimport {Text,View} from 'react-native'\nclass Parent extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      msg:'I am your father!'\n    }\n  }\n  render() {\n    return <Son_1 msg={this.state.msg} />;\n  }\n}\nclass Son_1 extends PureComponent {\n  render() {\n    return (\n        <View>\n          <Text>{this.props.msg}</Text>\n      </View>\n    )\n  }\n}\n```\n如果父组件与子组件之间不止一个层级，如 Parent 与 Child_1_1 这样的关系，可通过 ... 运算符（Object 剩余和展开属性），将父组件的信息，以更简洁的方式传递给更深层级的子组件。通过这种方式，不用考虑性能的问题，通过 babel 转义后的 ... 运算符 性能和原生的一致，且上级组件 props 与 state 的改变，会导致组件本身及其子组件的生命周期改变。\n```\nclass Son_1 extends PureComponent {\n  render() {\n    return (\n        <View>\n          <Text>{this.props.msg}</Text>\n        <Son_1_1 {...this.props}/>\n      </View>\n    )\n  }\n}\nclass Son_1_1 extends PureComponent{\n  render() {\n    return (\n        <Text>{this.props.msg}</Text>\n    )\n  }\n}\n```\n## 子组件向父组件通讯\n在上一个例子中，父组件可以通过传递 props 的方式，自顶而下向子组件进行通讯。而子组件向父组件通讯，同样也需要父组件向子组件传递 props 进行通讯，只是父组件传递的，是作用域为父组件自身的函数，子组件调用该函数，将子组件想要传递的信息，作为参数，传递到父组件的作用域中。\n```\nimport React,{Component,PureComponent} from 'react'\nimport {Text,TouchableOpacity} from 'react-native'\nclass Parent extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n  // 父组件定义的方法\n  onClickSon = (msgFromSon) => {\n    console.log(msgFromSon)\n  }\n  render() {\n    return (\n        <Son onClickSon={this.onClickSon}/>\n    )\n  }\n}\nclass Son_1 extends PureComponent {\n  render() {\n    return (\n      <TouchableOpacity onPress={()=> this.props.onClickSon('I am your son')}>\n        <Text>爸爸去哪</Text>  \n      </TouchableOpacity>\n    )\n  }\n}\n```\n## 观察者模式 - DeviceEventEmitter\n解决了兄弟组件通信的问题\n\n在传统的前端解耦方面，观察者模式作为比较常见一种设计模式，大量使用在各种框架类库的设计当中。即使我们在写 React，在写 JSX，我们核心的部分还是 JavaScript。\n\n观察者模式也叫 发布者-订阅者模式，发布者发布事件，订阅者监听事件并做出反应，对于兄弟组件的通信，我们一般使用 DeviceEventEmitter 解决。\n```\nimport React,{Component,PureComponent} from 'react'\nimport {View,DeviceEventEmitter} from 'react-native'\nclass Parent extends Component{\n  render() {\n    return (\n      <View>\n        <Son_1/>\n        <Son_2/>\n      </View>\n    );\n  }\n}\nclass Son_1 extends PureComponent{\n  componentDidMount() {\n    setTimeout(() => {\n      // 发布 msg 事件\n      DeviceEventEmitter.emit('sendMsg', {text:'Hello Brother'});\n    }, 1000);\n  }\n}\nclass Son_2 extends PureComponent{\n  componentDidMount() {\n    this.listener =DeviceEventEmitter.addListener('sendMsg',function(param){\n     //  use param do something\n    });\n  }\n  //最后别忘了移除通知\n  componentWillUnmount(){\n    this.listener.remove();\n  }\n}\n```\n参考地址：https://www.javascriptcn.com/read-36620.html","source":"_posts/react-native 组件间通信简述.md","raw":"---\ntitle: react-native 组件间通信简述\ndate: 2022-03-04 10:20:34\ntags:\n---\n## 父组件向子组件通讯\n通讯是单向的，数据必须是由一方传到另一方。在 React 中，父组件可以向子组件通过传 props 的方式，向子组件进行通讯。\n```\nimport React,{Component,PureComponent} from 'react'\nimport {Text,View} from 'react-native'\nclass Parent extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      msg:'I am your father!'\n    }\n  }\n  render() {\n    return <Son_1 msg={this.state.msg} />;\n  }\n}\nclass Son_1 extends PureComponent {\n  render() {\n    return (\n        <View>\n          <Text>{this.props.msg}</Text>\n      </View>\n    )\n  }\n}\n```\n如果父组件与子组件之间不止一个层级，如 Parent 与 Child_1_1 这样的关系，可通过 ... 运算符（Object 剩余和展开属性），将父组件的信息，以更简洁的方式传递给更深层级的子组件。通过这种方式，不用考虑性能的问题，通过 babel 转义后的 ... 运算符 性能和原生的一致，且上级组件 props 与 state 的改变，会导致组件本身及其子组件的生命周期改变。\n```\nclass Son_1 extends PureComponent {\n  render() {\n    return (\n        <View>\n          <Text>{this.props.msg}</Text>\n        <Son_1_1 {...this.props}/>\n      </View>\n    )\n  }\n}\nclass Son_1_1 extends PureComponent{\n  render() {\n    return (\n        <Text>{this.props.msg}</Text>\n    )\n  }\n}\n```\n## 子组件向父组件通讯\n在上一个例子中，父组件可以通过传递 props 的方式，自顶而下向子组件进行通讯。而子组件向父组件通讯，同样也需要父组件向子组件传递 props 进行通讯，只是父组件传递的，是作用域为父组件自身的函数，子组件调用该函数，将子组件想要传递的信息，作为参数，传递到父组件的作用域中。\n```\nimport React,{Component,PureComponent} from 'react'\nimport {Text,TouchableOpacity} from 'react-native'\nclass Parent extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n  // 父组件定义的方法\n  onClickSon = (msgFromSon) => {\n    console.log(msgFromSon)\n  }\n  render() {\n    return (\n        <Son onClickSon={this.onClickSon}/>\n    )\n  }\n}\nclass Son_1 extends PureComponent {\n  render() {\n    return (\n      <TouchableOpacity onPress={()=> this.props.onClickSon('I am your son')}>\n        <Text>爸爸去哪</Text>  \n      </TouchableOpacity>\n    )\n  }\n}\n```\n## 观察者模式 - DeviceEventEmitter\n解决了兄弟组件通信的问题\n\n在传统的前端解耦方面，观察者模式作为比较常见一种设计模式，大量使用在各种框架类库的设计当中。即使我们在写 React，在写 JSX，我们核心的部分还是 JavaScript。\n\n观察者模式也叫 发布者-订阅者模式，发布者发布事件，订阅者监听事件并做出反应，对于兄弟组件的通信，我们一般使用 DeviceEventEmitter 解决。\n```\nimport React,{Component,PureComponent} from 'react'\nimport {View,DeviceEventEmitter} from 'react-native'\nclass Parent extends Component{\n  render() {\n    return (\n      <View>\n        <Son_1/>\n        <Son_2/>\n      </View>\n    );\n  }\n}\nclass Son_1 extends PureComponent{\n  componentDidMount() {\n    setTimeout(() => {\n      // 发布 msg 事件\n      DeviceEventEmitter.emit('sendMsg', {text:'Hello Brother'});\n    }, 1000);\n  }\n}\nclass Son_2 extends PureComponent{\n  componentDidMount() {\n    this.listener =DeviceEventEmitter.addListener('sendMsg',function(param){\n     //  use param do something\n    });\n  }\n  //最后别忘了移除通知\n  componentWillUnmount(){\n    this.listener.remove();\n  }\n}\n```\n参考地址：https://www.javascriptcn.com/read-36620.html","slug":"react-native 组件间通信简述","published":1,"updated":"2022-03-04T02:25:21.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0r40009rcsffbkxctq2","content":"<h2 id=\"父组件向子组件通讯\"><a href=\"#父组件向子组件通讯\" class=\"headerlink\" title=\"父组件向子组件通讯\"></a>父组件向子组件通讯</h2><p>通讯是单向的，数据必须是由一方传到另一方。在 React 中，父组件可以向子组件通过传 props 的方式，向子组件进行通讯。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React,&#123;Component,PureComponent&#125; from &#x27;react&#x27;</span><br><span class=\"line\">import &#123;Text,View&#125; from &#x27;react-native&#x27;</span><br><span class=\"line\">class Parent extends Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props)</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      msg:&#x27;I am your father!&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;Son_1 msg=&#123;this.state.msg&#125; /&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son_1 extends PureComponent &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;View&gt;</span><br><span class=\"line\">          &lt;Text&gt;&#123;this.props.msg&#125;&lt;/Text&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果父组件与子组件之间不止一个层级，如 Parent 与 Child_1_1 这样的关系，可通过 … 运算符（Object 剩余和展开属性），将父组件的信息，以更简洁的方式传递给更深层级的子组件。通过这种方式，不用考虑性能的问题，通过 babel 转义后的 … 运算符 性能和原生的一致，且上级组件 props 与 state 的改变，会导致组件本身及其子组件的生命周期改变。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Son_1 extends PureComponent &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;View&gt;</span><br><span class=\"line\">          &lt;Text&gt;&#123;this.props.msg&#125;&lt;/Text&gt;</span><br><span class=\"line\">        &lt;Son_1_1 &#123;...this.props&#125;/&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son_1_1 extends PureComponent&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;Text&gt;&#123;this.props.msg&#125;&lt;/Text&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"子组件向父组件通讯\"><a href=\"#子组件向父组件通讯\" class=\"headerlink\" title=\"子组件向父组件通讯\"></a>子组件向父组件通讯</h2><p>在上一个例子中，父组件可以通过传递 props 的方式，自顶而下向子组件进行通讯。而子组件向父组件通讯，同样也需要父组件向子组件传递 props 进行通讯，只是父组件传递的，是作用域为父组件自身的函数，子组件调用该函数，将子组件想要传递的信息，作为参数，传递到父组件的作用域中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React,&#123;Component,PureComponent&#125; from &#x27;react&#x27;</span><br><span class=\"line\">import &#123;Text,TouchableOpacity&#125; from &#x27;react-native&#x27;</span><br><span class=\"line\">class Parent extends Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props)</span><br><span class=\"line\">    this.state = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 父组件定义的方法</span><br><span class=\"line\">  onClickSon = (msgFromSon) =&gt; &#123;</span><br><span class=\"line\">    console.log(msgFromSon)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;Son onClickSon=&#123;this.onClickSon&#125;/&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son_1 extends PureComponent &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;TouchableOpacity onPress=&#123;()=&gt; this.props.onClickSon(&#x27;I am your son&#x27;)&#125;&gt;</span><br><span class=\"line\">        &lt;Text&gt;爸爸去哪&lt;/Text&gt;  </span><br><span class=\"line\">      &lt;/TouchableOpacity&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"观察者模式-DeviceEventEmitter\"><a href=\"#观察者模式-DeviceEventEmitter\" class=\"headerlink\" title=\"观察者模式 - DeviceEventEmitter\"></a>观察者模式 - DeviceEventEmitter</h2><p>解决了兄弟组件通信的问题</p>\n<p>在传统的前端解耦方面，观察者模式作为比较常见一种设计模式，大量使用在各种框架类库的设计当中。即使我们在写 React，在写 JSX，我们核心的部分还是 JavaScript。</p>\n<p>观察者模式也叫 发布者-订阅者模式，发布者发布事件，订阅者监听事件并做出反应，对于兄弟组件的通信，我们一般使用 DeviceEventEmitter 解决。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React,&#123;Component,PureComponent&#125; from &#x27;react&#x27;</span><br><span class=\"line\">import &#123;View,DeviceEventEmitter&#125; from &#x27;react-native&#x27;</span><br><span class=\"line\">class Parent extends Component&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;View&gt;</span><br><span class=\"line\">        &lt;Son_1/&gt;</span><br><span class=\"line\">        &lt;Son_2/&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son_1 extends PureComponent&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      // 发布 msg 事件</span><br><span class=\"line\">      DeviceEventEmitter.emit(&#x27;sendMsg&#x27;, &#123;text:&#x27;Hello Brother&#x27;&#125;);</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son_2 extends PureComponent&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    this.listener =DeviceEventEmitter.addListener(&#x27;sendMsg&#x27;,function(param)&#123;</span><br><span class=\"line\">     //  use param do something</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //最后别忘了移除通知</span><br><span class=\"line\">  componentWillUnmount()&#123;</span><br><span class=\"line\">    this.listener.remove();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考地址：<a href=\"https://www.javascriptcn.com/read-36620.html\">https://www.javascriptcn.com/read-36620.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"父组件向子组件通讯\"><a href=\"#父组件向子组件通讯\" class=\"headerlink\" title=\"父组件向子组件通讯\"></a>父组件向子组件通讯</h2><p>通讯是单向的，数据必须是由一方传到另一方。在 React 中，父组件可以向子组件通过传 props 的方式，向子组件进行通讯。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React,&#123;Component,PureComponent&#125; from &#x27;react&#x27;</span><br><span class=\"line\">import &#123;Text,View&#125; from &#x27;react-native&#x27;</span><br><span class=\"line\">class Parent extends Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props)</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      msg:&#x27;I am your father!&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;Son_1 msg=&#123;this.state.msg&#125; /&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son_1 extends PureComponent &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;View&gt;</span><br><span class=\"line\">          &lt;Text&gt;&#123;this.props.msg&#125;&lt;/Text&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果父组件与子组件之间不止一个层级，如 Parent 与 Child_1_1 这样的关系，可通过 … 运算符（Object 剩余和展开属性），将父组件的信息，以更简洁的方式传递给更深层级的子组件。通过这种方式，不用考虑性能的问题，通过 babel 转义后的 … 运算符 性能和原生的一致，且上级组件 props 与 state 的改变，会导致组件本身及其子组件的生命周期改变。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Son_1 extends PureComponent &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;View&gt;</span><br><span class=\"line\">          &lt;Text&gt;&#123;this.props.msg&#125;&lt;/Text&gt;</span><br><span class=\"line\">        &lt;Son_1_1 &#123;...this.props&#125;/&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son_1_1 extends PureComponent&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;Text&gt;&#123;this.props.msg&#125;&lt;/Text&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"子组件向父组件通讯\"><a href=\"#子组件向父组件通讯\" class=\"headerlink\" title=\"子组件向父组件通讯\"></a>子组件向父组件通讯</h2><p>在上一个例子中，父组件可以通过传递 props 的方式，自顶而下向子组件进行通讯。而子组件向父组件通讯，同样也需要父组件向子组件传递 props 进行通讯，只是父组件传递的，是作用域为父组件自身的函数，子组件调用该函数，将子组件想要传递的信息，作为参数，传递到父组件的作用域中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React,&#123;Component,PureComponent&#125; from &#x27;react&#x27;</span><br><span class=\"line\">import &#123;Text,TouchableOpacity&#125; from &#x27;react-native&#x27;</span><br><span class=\"line\">class Parent extends Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props)</span><br><span class=\"line\">    this.state = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 父组件定义的方法</span><br><span class=\"line\">  onClickSon = (msgFromSon) =&gt; &#123;</span><br><span class=\"line\">    console.log(msgFromSon)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;Son onClickSon=&#123;this.onClickSon&#125;/&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son_1 extends PureComponent &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;TouchableOpacity onPress=&#123;()=&gt; this.props.onClickSon(&#x27;I am your son&#x27;)&#125;&gt;</span><br><span class=\"line\">        &lt;Text&gt;爸爸去哪&lt;/Text&gt;  </span><br><span class=\"line\">      &lt;/TouchableOpacity&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"观察者模式-DeviceEventEmitter\"><a href=\"#观察者模式-DeviceEventEmitter\" class=\"headerlink\" title=\"观察者模式 - DeviceEventEmitter\"></a>观察者模式 - DeviceEventEmitter</h2><p>解决了兄弟组件通信的问题</p>\n<p>在传统的前端解耦方面，观察者模式作为比较常见一种设计模式，大量使用在各种框架类库的设计当中。即使我们在写 React，在写 JSX，我们核心的部分还是 JavaScript。</p>\n<p>观察者模式也叫 发布者-订阅者模式，发布者发布事件，订阅者监听事件并做出反应，对于兄弟组件的通信，我们一般使用 DeviceEventEmitter 解决。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React,&#123;Component,PureComponent&#125; from &#x27;react&#x27;</span><br><span class=\"line\">import &#123;View,DeviceEventEmitter&#125; from &#x27;react-native&#x27;</span><br><span class=\"line\">class Parent extends Component&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;View&gt;</span><br><span class=\"line\">        &lt;Son_1/&gt;</span><br><span class=\"line\">        &lt;Son_2/&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son_1 extends PureComponent&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      // 发布 msg 事件</span><br><span class=\"line\">      DeviceEventEmitter.emit(&#x27;sendMsg&#x27;, &#123;text:&#x27;Hello Brother&#x27;&#125;);</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son_2 extends PureComponent&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    this.listener =DeviceEventEmitter.addListener(&#x27;sendMsg&#x27;,function(param)&#123;</span><br><span class=\"line\">     //  use param do something</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //最后别忘了移除通知</span><br><span class=\"line\">  componentWillUnmount()&#123;</span><br><span class=\"line\">    this.listener.remove();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考地址：<a href=\"https://www.javascriptcn.com/read-36620.html\">https://www.javascriptcn.com/read-36620.html</a></p>\n"},{"title":"windows 下 nvm 的安装与管理","date":"2022-03-04T02:20:34.000Z","_content":"# windows 下 nvm 的安装与管理\n\n## 安装\n\nnvm 用于管理不同版本的 node 与 npm\n安装前，请先[卸载计算机上已有的node.js](https://www.cnblogs.com/fluttery/p/nodejs.html#_caption_0)，否则会发生冲突。步骤如下：\n1. 官方渠道下载安装包或压缩文件：[https://github.com/coreybutler/nvm-windows](https://github.com/coreybutler/nvm-windows)（本次用安装包），直接运行exe文件安装即可）\n2. 检查安装情况：命令行输入`nvm v`{language: cmd}，输出版本号即代表安装成功\n3. 列出远程服务器上所有的可用版本：`nvm ls available`（非 Windows ： `nvm ls-remote`）\n\n## 换源\n   使用nvm的默认镜像源进行包的安装时存在不便，可能拖慢工程进度，可通过换源解决这一问题。\n   ```nodejs\n   //更改或追加nvm配置文件：`(-split $(nvm root))[3]\\settings.txt`\n    node_mirror: https://npm.taobao.org/mirrors/node/\n    npm_mirror: https://npm.taobao.org/mirrors/npm/\n\n\n    //命令行：\n    设置npm_mirror:\n    nvm npm_mirror https://npm.taobao.org/mirrors/npm/\n\n    设置node_mirror:\n    nvm node_mirror https://npm.taobao.org/mirrors/node/\n   ```\n### 无网络情况下文件配置：\n直接从[淘宝镜像](https://npm.taobao.org/mirrors/node)下载zip版本（如[https://npm.taobao.org/mirrors/node/v4.6.0/node-v4.6.0-win-x64.zip](https://npm.taobao.org/mirrors/node/v4.6.0/node-v4.6.0-win-x64.zip)），然后解压到nvm所在的路径`$(nvm root)`并改文件夹名为v4.6.0，删除zip文件，使用`nvm use 4.6.0`，再查看。\n* 注意：C:\\Program Files\\nodejs 这里保存的只是一个快捷方式而已。\n* 原理：每次切换只是替换快捷方式。\n* 结果：先nvm list；再nvm use xxx；再nvm list，当看到*（星号指向你要切换的本版即为切换成功）。\n* 切换完之后再用node -v 检查一下是不是真的切换到正确的Node.js版本了！\n* nvm管理的多个npm版本各需独立配置淘宝镜像！\n\n## 版本管理\n### 安装管理多版本 node/npm\n1. 特定版本（4.2.2）：命令行输入`nvm install 4.2.2`\n2. 某系列的最新版本（[语义化版本](https://semver.bootcss.com/)命名规则）（如4.2的最新版本）：命令行输入`nvm install 4.2`\n3. 不同版本间切换：`nvm use 4.2.2`，规则同上\n4. 别名：\n    给不同的版本号设置别名：`nvm alias awesome-version 4.2.2`\n    取消别名：`nvm unalias awesome-version`\n    另外，还可以设置 default 这个特殊别名：`nvm alias default node`\n### 其他命令\n0. 快捷命令\n    `nvm install node` 安装最新版 Node\n    `nvm install iojs` 安装最新版 iojs\n    `nvm install unstable` 安装最新不稳定版本的 Node\n1. 直接运行特定版本的 Node\n    `nvm run 4.2.2 --version`\n2. 在当前终端的子进程中运行特定版本的 Node\n    `nvm exec 4.2.2 node --version`\n3. 确认某个版本Node的路径\n    `nvm which 4.2.2`\n4. 安装 Node 的其他实现，例如 iojs（一个基于 ES6 的 Node 实现，现在已经和 Node 合并）\n    `nvm install iojs-v3.2.0`\n\n\n## 其他要点\n1. **当命令行运行命令时提示“`could not be found or does not exist.`”时，将`settings.txt`文件改为utf-8编码保存即可。**\n-----\n参考网址：\n1. 使用 nvm 管理不同版本的 node 与 npm：https://www.runoob.com/w3cnote/nvm-manager-node-versions.html\n2. 其他要点1：https://github.com/coreybutler/nvm-windows/issues/145","source":"_posts/windows下nvm的安装与管理.md","raw":"---\ntitle: windows 下 nvm 的安装与管理\ndate: 2022-03-04 10:20:34\ntags:\n---\n# windows 下 nvm 的安装与管理\n\n## 安装\n\nnvm 用于管理不同版本的 node 与 npm\n安装前，请先[卸载计算机上已有的node.js](https://www.cnblogs.com/fluttery/p/nodejs.html#_caption_0)，否则会发生冲突。步骤如下：\n1. 官方渠道下载安装包或压缩文件：[https://github.com/coreybutler/nvm-windows](https://github.com/coreybutler/nvm-windows)（本次用安装包），直接运行exe文件安装即可）\n2. 检查安装情况：命令行输入`nvm v`{language: cmd}，输出版本号即代表安装成功\n3. 列出远程服务器上所有的可用版本：`nvm ls available`（非 Windows ： `nvm ls-remote`）\n\n## 换源\n   使用nvm的默认镜像源进行包的安装时存在不便，可能拖慢工程进度，可通过换源解决这一问题。\n   ```nodejs\n   //更改或追加nvm配置文件：`(-split $(nvm root))[3]\\settings.txt`\n    node_mirror: https://npm.taobao.org/mirrors/node/\n    npm_mirror: https://npm.taobao.org/mirrors/npm/\n\n\n    //命令行：\n    设置npm_mirror:\n    nvm npm_mirror https://npm.taobao.org/mirrors/npm/\n\n    设置node_mirror:\n    nvm node_mirror https://npm.taobao.org/mirrors/node/\n   ```\n### 无网络情况下文件配置：\n直接从[淘宝镜像](https://npm.taobao.org/mirrors/node)下载zip版本（如[https://npm.taobao.org/mirrors/node/v4.6.0/node-v4.6.0-win-x64.zip](https://npm.taobao.org/mirrors/node/v4.6.0/node-v4.6.0-win-x64.zip)），然后解压到nvm所在的路径`$(nvm root)`并改文件夹名为v4.6.0，删除zip文件，使用`nvm use 4.6.0`，再查看。\n* 注意：C:\\Program Files\\nodejs 这里保存的只是一个快捷方式而已。\n* 原理：每次切换只是替换快捷方式。\n* 结果：先nvm list；再nvm use xxx；再nvm list，当看到*（星号指向你要切换的本版即为切换成功）。\n* 切换完之后再用node -v 检查一下是不是真的切换到正确的Node.js版本了！\n* nvm管理的多个npm版本各需独立配置淘宝镜像！\n\n## 版本管理\n### 安装管理多版本 node/npm\n1. 特定版本（4.2.2）：命令行输入`nvm install 4.2.2`\n2. 某系列的最新版本（[语义化版本](https://semver.bootcss.com/)命名规则）（如4.2的最新版本）：命令行输入`nvm install 4.2`\n3. 不同版本间切换：`nvm use 4.2.2`，规则同上\n4. 别名：\n    给不同的版本号设置别名：`nvm alias awesome-version 4.2.2`\n    取消别名：`nvm unalias awesome-version`\n    另外，还可以设置 default 这个特殊别名：`nvm alias default node`\n### 其他命令\n0. 快捷命令\n    `nvm install node` 安装最新版 Node\n    `nvm install iojs` 安装最新版 iojs\n    `nvm install unstable` 安装最新不稳定版本的 Node\n1. 直接运行特定版本的 Node\n    `nvm run 4.2.2 --version`\n2. 在当前终端的子进程中运行特定版本的 Node\n    `nvm exec 4.2.2 node --version`\n3. 确认某个版本Node的路径\n    `nvm which 4.2.2`\n4. 安装 Node 的其他实现，例如 iojs（一个基于 ES6 的 Node 实现，现在已经和 Node 合并）\n    `nvm install iojs-v3.2.0`\n\n\n## 其他要点\n1. **当命令行运行命令时提示“`could not be found or does not exist.`”时，将`settings.txt`文件改为utf-8编码保存即可。**\n-----\n参考网址：\n1. 使用 nvm 管理不同版本的 node 与 npm：https://www.runoob.com/w3cnote/nvm-manager-node-versions.html\n2. 其他要点1：https://github.com/coreybutler/nvm-windows/issues/145","slug":"windows下nvm的安装与管理","published":1,"updated":"2022-03-04T02:26:58.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0r4000arcsf9vrh0qsw","content":"<h1 id=\"windows-下-nvm-的安装与管理\"><a href=\"#windows-下-nvm-的安装与管理\" class=\"headerlink\" title=\"windows 下 nvm 的安装与管理\"></a>windows 下 nvm 的安装与管理</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>nvm 用于管理不同版本的 node 与 npm<br>安装前，请先<a href=\"https://www.cnblogs.com/fluttery/p/nodejs.html#_caption_0\">卸载计算机上已有的node.js</a>，否则会发生冲突。步骤如下：</p>\n<ol>\n<li>官方渠道下载安装包或压缩文件：<a href=\"https://github.com/coreybutler/nvm-windows\">https://github.com/coreybutler/nvm-windows</a>（本次用安装包），直接运行exe文件安装即可）</li>\n<li>检查安装情况：命令行输入<code>nvm v</code>{language: cmd}，输出版本号即代表安装成功</li>\n<li>列出远程服务器上所有的可用版本：<code>nvm ls available</code>（非 Windows ： <code>nvm ls-remote</code>）</li>\n</ol>\n<h2 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h2><p>   使用nvm的默认镜像源进行包的安装时存在不便，可能拖慢工程进度，可通过换源解决这一问题。<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//更改或追加nvm配置文件：`(-split $(nvm root))[3]\\settings.txt`</span><br><span class=\"line\"> node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class=\"line\"> npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> //命令行：</span><br><span class=\"line\"> 设置npm_mirror:</span><br><span class=\"line\"> nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br><span class=\"line\"></span><br><span class=\"line\"> 设置node_mirror:</span><br><span class=\"line\"> nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"无网络情况下文件配置：\"><a href=\"#无网络情况下文件配置：\" class=\"headerlink\" title=\"无网络情况下文件配置：\"></a>无网络情况下文件配置：</h3><p>直接从<a href=\"https://npm.taobao.org/mirrors/node\">淘宝镜像</a>下载zip版本（如<a href=\"https://npm.taobao.org/mirrors/node/v4.6.0/node-v4.6.0-win-x64.zip\">https://npm.taobao.org/mirrors/node/v4.6.0/node-v4.6.0-win-x64.zip</a>），然后解压到nvm所在的路径<code>$(nvm root)</code>并改文件夹名为v4.6.0，删除zip文件，使用<code>nvm use 4.6.0</code>，再查看。</p>\n<ul>\n<li>注意：C:\\Program Files\\nodejs 这里保存的只是一个快捷方式而已。</li>\n<li>原理：每次切换只是替换快捷方式。</li>\n<li>结果：先nvm list；再nvm use xxx；再nvm list，当看到*（星号指向你要切换的本版即为切换成功）。</li>\n<li>切换完之后再用node -v 检查一下是不是真的切换到正确的Node.js版本了！</li>\n<li>nvm管理的多个npm版本各需独立配置淘宝镜像！</li>\n</ul>\n<h2 id=\"版本管理\"><a href=\"#版本管理\" class=\"headerlink\" title=\"版本管理\"></a>版本管理</h2><h3 id=\"安装管理多版本-node-npm\"><a href=\"#安装管理多版本-node-npm\" class=\"headerlink\" title=\"安装管理多版本 node/npm\"></a>安装管理多版本 node/npm</h3><ol>\n<li>特定版本（4.2.2）：命令行输入<code>nvm install 4.2.2</code></li>\n<li>某系列的最新版本（<a href=\"https://semver.bootcss.com/\">语义化版本</a>命名规则）（如4.2的最新版本）：命令行输入<code>nvm install 4.2</code></li>\n<li>不同版本间切换：<code>nvm use 4.2.2</code>，规则同上</li>\n<li>别名：<br> 给不同的版本号设置别名：<code>nvm alias awesome-version 4.2.2</code><br> 取消别名：<code>nvm unalias awesome-version</code><br> 另外，还可以设置 default 这个特殊别名：<code>nvm alias default node</code><h3 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h3></li>\n<li>快捷命令<br> <code>nvm install node</code> 安装最新版 Node<br> <code>nvm install iojs</code> 安装最新版 iojs<br> <code>nvm install unstable</code> 安装最新不稳定版本的 Node</li>\n<li>直接运行特定版本的 Node<br> <code>nvm run 4.2.2 --version</code></li>\n<li>在当前终端的子进程中运行特定版本的 Node<br> <code>nvm exec 4.2.2 node --version</code></li>\n<li>确认某个版本Node的路径<br> <code>nvm which 4.2.2</code></li>\n<li>安装 Node 的其他实现，例如 iojs（一个基于 ES6 的 Node 实现，现在已经和 Node 合并）<br> <code>nvm install iojs-v3.2.0</code></li>\n</ol>\n<h2 id=\"其他要点\"><a href=\"#其他要点\" class=\"headerlink\" title=\"其他要点\"></a>其他要点</h2><ol>\n<li><strong>当命令行运行命令时提示“<code>could not be found or does not exist.</code>”时，将<code>settings.txt</code>文件改为utf-8编码保存即可。</strong></li>\n</ol>\n<hr>\n<p>参考网址：</p>\n<ol>\n<li>使用 nvm 管理不同版本的 node 与 npm：<a href=\"https://www.runoob.com/w3cnote/nvm-manager-node-versions.html\">https://www.runoob.com/w3cnote/nvm-manager-node-versions.html</a></li>\n<li>其他要点1：<a href=\"https://github.com/coreybutler/nvm-windows/issues/145\">https://github.com/coreybutler/nvm-windows/issues/145</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"windows-下-nvm-的安装与管理\"><a href=\"#windows-下-nvm-的安装与管理\" class=\"headerlink\" title=\"windows 下 nvm 的安装与管理\"></a>windows 下 nvm 的安装与管理</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>nvm 用于管理不同版本的 node 与 npm<br>安装前，请先<a href=\"https://www.cnblogs.com/fluttery/p/nodejs.html#_caption_0\">卸载计算机上已有的node.js</a>，否则会发生冲突。步骤如下：</p>\n<ol>\n<li>官方渠道下载安装包或压缩文件：<a href=\"https://github.com/coreybutler/nvm-windows\">https://github.com/coreybutler/nvm-windows</a>（本次用安装包），直接运行exe文件安装即可）</li>\n<li>检查安装情况：命令行输入<code>nvm v</code>{language: cmd}，输出版本号即代表安装成功</li>\n<li>列出远程服务器上所有的可用版本：<code>nvm ls available</code>（非 Windows ： <code>nvm ls-remote</code>）</li>\n</ol>\n<h2 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h2><p>   使用nvm的默认镜像源进行包的安装时存在不便，可能拖慢工程进度，可通过换源解决这一问题。<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//更改或追加nvm配置文件：`(-split $(nvm root))[3]\\settings.txt`</span><br><span class=\"line\"> node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class=\"line\"> npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> //命令行：</span><br><span class=\"line\"> 设置npm_mirror:</span><br><span class=\"line\"> nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br><span class=\"line\"></span><br><span class=\"line\"> 设置node_mirror:</span><br><span class=\"line\"> nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"无网络情况下文件配置：\"><a href=\"#无网络情况下文件配置：\" class=\"headerlink\" title=\"无网络情况下文件配置：\"></a>无网络情况下文件配置：</h3><p>直接从<a href=\"https://npm.taobao.org/mirrors/node\">淘宝镜像</a>下载zip版本（如<a href=\"https://npm.taobao.org/mirrors/node/v4.6.0/node-v4.6.0-win-x64.zip\">https://npm.taobao.org/mirrors/node/v4.6.0/node-v4.6.0-win-x64.zip</a>），然后解压到nvm所在的路径<code>$(nvm root)</code>并改文件夹名为v4.6.0，删除zip文件，使用<code>nvm use 4.6.0</code>，再查看。</p>\n<ul>\n<li>注意：C:\\Program Files\\nodejs 这里保存的只是一个快捷方式而已。</li>\n<li>原理：每次切换只是替换快捷方式。</li>\n<li>结果：先nvm list；再nvm use xxx；再nvm list，当看到*（星号指向你要切换的本版即为切换成功）。</li>\n<li>切换完之后再用node -v 检查一下是不是真的切换到正确的Node.js版本了！</li>\n<li>nvm管理的多个npm版本各需独立配置淘宝镜像！</li>\n</ul>\n<h2 id=\"版本管理\"><a href=\"#版本管理\" class=\"headerlink\" title=\"版本管理\"></a>版本管理</h2><h3 id=\"安装管理多版本-node-npm\"><a href=\"#安装管理多版本-node-npm\" class=\"headerlink\" title=\"安装管理多版本 node/npm\"></a>安装管理多版本 node/npm</h3><ol>\n<li>特定版本（4.2.2）：命令行输入<code>nvm install 4.2.2</code></li>\n<li>某系列的最新版本（<a href=\"https://semver.bootcss.com/\">语义化版本</a>命名规则）（如4.2的最新版本）：命令行输入<code>nvm install 4.2</code></li>\n<li>不同版本间切换：<code>nvm use 4.2.2</code>，规则同上</li>\n<li>别名：<br> 给不同的版本号设置别名：<code>nvm alias awesome-version 4.2.2</code><br> 取消别名：<code>nvm unalias awesome-version</code><br> 另外，还可以设置 default 这个特殊别名：<code>nvm alias default node</code><h3 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h3></li>\n<li>快捷命令<br> <code>nvm install node</code> 安装最新版 Node<br> <code>nvm install iojs</code> 安装最新版 iojs<br> <code>nvm install unstable</code> 安装最新不稳定版本的 Node</li>\n<li>直接运行特定版本的 Node<br> <code>nvm run 4.2.2 --version</code></li>\n<li>在当前终端的子进程中运行特定版本的 Node<br> <code>nvm exec 4.2.2 node --version</code></li>\n<li>确认某个版本Node的路径<br> <code>nvm which 4.2.2</code></li>\n<li>安装 Node 的其他实现，例如 iojs（一个基于 ES6 的 Node 实现，现在已经和 Node 合并）<br> <code>nvm install iojs-v3.2.0</code></li>\n</ol>\n<h2 id=\"其他要点\"><a href=\"#其他要点\" class=\"headerlink\" title=\"其他要点\"></a>其他要点</h2><ol>\n<li><strong>当命令行运行命令时提示“<code>could not be found or does not exist.</code>”时，将<code>settings.txt</code>文件改为utf-8编码保存即可。</strong></li>\n</ol>\n<hr>\n<p>参考网址：</p>\n<ol>\n<li>使用 nvm 管理不同版本的 node 与 npm：<a href=\"https://www.runoob.com/w3cnote/nvm-manager-node-versions.html\">https://www.runoob.com/w3cnote/nvm-manager-node-versions.html</a></li>\n<li>其他要点1：<a href=\"https://github.com/coreybutler/nvm-windows/issues/145\">https://github.com/coreybutler/nvm-windows/issues/145</a></li>\n</ol>\n"},{"title":"Windows 命令行相关小贴士","date":"2022-03-04T02:20:34.000Z","_content":"# Windows 命令行相关小贴士\n## 控制台字符的**打印输出**\n`echo str`\n## powershell处理字符串\n1. 分割字符串：`$(nvm root).split(\"\")[3]`\n2. 连接字符串：`$s1+$s2`或`-Join($s1, $s2)`或`$s1*3`\n## **环境变量**\n1. 表示：\n    在 cmd 中：`%path%`；在 powershell 中：`$env:path`\n2. 输出：\n    在 cmd 中：`echo %path%`；\n    在 powershell 中：直接输入`$env:path`或`echo $env:path`","source":"_posts/wincmdTips.md","raw":"---\ntitle: Windows 命令行相关小贴士\ndate: 2022-03-04 10:20:34\ntags:\n---\n# Windows 命令行相关小贴士\n## 控制台字符的**打印输出**\n`echo str`\n## powershell处理字符串\n1. 分割字符串：`$(nvm root).split(\"\")[3]`\n2. 连接字符串：`$s1+$s2`或`-Join($s1, $s2)`或`$s1*3`\n## **环境变量**\n1. 表示：\n    在 cmd 中：`%path%`；在 powershell 中：`$env:path`\n2. 输出：\n    在 cmd 中：`echo %path%`；\n    在 powershell 中：直接输入`$env:path`或`echo $env:path`","slug":"wincmdTips","published":1,"updated":"2022-03-04T02:27:20.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0r5000brcsffg155dia","content":"<h1 id=\"Windows-命令行相关小贴士\"><a href=\"#Windows-命令行相关小贴士\" class=\"headerlink\" title=\"Windows 命令行相关小贴士\"></a>Windows 命令行相关小贴士</h1><h2 id=\"控制台字符的打印输出\"><a href=\"#控制台字符的打印输出\" class=\"headerlink\" title=\"控制台字符的打印输出\"></a>控制台字符的<strong>打印输出</strong></h2><p><code>echo str</code></p>\n<h2 id=\"powershell处理字符串\"><a href=\"#powershell处理字符串\" class=\"headerlink\" title=\"powershell处理字符串\"></a>powershell处理字符串</h2><ol>\n<li>分割字符串：<code>$(nvm root).split(&quot;&quot;)[3]</code></li>\n<li>连接字符串：<code>$s1+$s2</code>或<code>-Join($s1, $s2)</code>或<code>$s1*3</code><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a><strong>环境变量</strong></h2></li>\n<li>表示：<br> 在 cmd 中：<code>%path%</code>；在 powershell 中：<code>$env:path</code></li>\n<li>输出：<br> 在 cmd 中：<code>echo %path%</code>；<br> 在 powershell 中：直接输入<code>$env:path</code>或<code>echo $env:path</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Windows-命令行相关小贴士\"><a href=\"#Windows-命令行相关小贴士\" class=\"headerlink\" title=\"Windows 命令行相关小贴士\"></a>Windows 命令行相关小贴士</h1><h2 id=\"控制台字符的打印输出\"><a href=\"#控制台字符的打印输出\" class=\"headerlink\" title=\"控制台字符的打印输出\"></a>控制台字符的<strong>打印输出</strong></h2><p><code>echo str</code></p>\n<h2 id=\"powershell处理字符串\"><a href=\"#powershell处理字符串\" class=\"headerlink\" title=\"powershell处理字符串\"></a>powershell处理字符串</h2><ol>\n<li>分割字符串：<code>$(nvm root).split(&quot;&quot;)[3]</code></li>\n<li>连接字符串：<code>$s1+$s2</code>或<code>-Join($s1, $s2)</code>或<code>$s1*3</code><h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a><strong>环境变量</strong></h2></li>\n<li>表示：<br> 在 cmd 中：<code>%path%</code>；在 powershell 中：<code>$env:path</code></li>\n<li>输出：<br> 在 cmd 中：<code>echo %path%</code>；<br> 在 powershell 中：直接输入<code>$env:path</code>或<code>echo $env:path</code></li>\n</ol>\n"},{"title":"教务网课程评价填写脚本","date":"2022-03-04T02:20:34.000Z","_content":"源码来自互联网，但略作修改。仅作学习和技术交流用，侵删\n\n```javascript\nvar Evaluater = class {\n    constructor(params) {\n        this.mainWindow = document.querySelector('#WindowMain3');\n        this.WindowFrame = this.mainWindow.querySelector('#WindowFrame3').contentDocument.childNodes[1];\n        this.ansDiv = this.WindowFrame.querySelectorAll('.answerDiv');\n        this.submitBtn = this.WindowFrame.querySelector('#r_content>.b_content>.tb_cont>.frame-table>tbody>tr:nth-child(2) input:nth-child(1)');\n        this.select();\n        this.stuff();\n        this.submit();\n    }\n\n    select() {\n        for (let i = 0; i < this.ansDiv.length - 2; i++) {\n            this.ansDiv[i].childNodes[1].childNodes[3].click();\n        }\n    }\n\n    stuff() {\n        this.text1 = this.WindowFrame.querySelector('#answerDiv16 textarea');\n        this.text2 = this.WindowFrame.querySelector('#answerDiv17 textarea');\n        this.text1.innerText = '都很满意';\n        this.text2.innerText = '暂时没有';\n        this.text1.value = this.text1.innerText;\n        this.text2.value = this.text2.innerText;\n    }\n\n    submit() {\n        let tick = 6;\n        console.log(`由于必须填写一分钟以上，${tick} 秒后将自动提交，请耐心等待~`);\n        this.infoInterval = setInterval(() => {\n            tick--;\n            console.log(`由于必须填写一分钟以上，${tick} 秒后将自动提交，请耐心等待~`);\n        }, 1000);\n        setTimeout(() => {\n            clearInterval(this.infoInterval);\n            this.submitBtn.click();\n        }, tick*1000);\n    }\n}\n\nvar myEvaluater = new Evaluater();\n```\n","source":"_posts/教务网课程评价填写脚本.md","raw":"---\ntitle: 教务网课程评价填写脚本\ndate: 2022-03-04 10:20:34\ntags:\n---\n源码来自互联网，但略作修改。仅作学习和技术交流用，侵删\n\n```javascript\nvar Evaluater = class {\n    constructor(params) {\n        this.mainWindow = document.querySelector('#WindowMain3');\n        this.WindowFrame = this.mainWindow.querySelector('#WindowFrame3').contentDocument.childNodes[1];\n        this.ansDiv = this.WindowFrame.querySelectorAll('.answerDiv');\n        this.submitBtn = this.WindowFrame.querySelector('#r_content>.b_content>.tb_cont>.frame-table>tbody>tr:nth-child(2) input:nth-child(1)');\n        this.select();\n        this.stuff();\n        this.submit();\n    }\n\n    select() {\n        for (let i = 0; i < this.ansDiv.length - 2; i++) {\n            this.ansDiv[i].childNodes[1].childNodes[3].click();\n        }\n    }\n\n    stuff() {\n        this.text1 = this.WindowFrame.querySelector('#answerDiv16 textarea');\n        this.text2 = this.WindowFrame.querySelector('#answerDiv17 textarea');\n        this.text1.innerText = '都很满意';\n        this.text2.innerText = '暂时没有';\n        this.text1.value = this.text1.innerText;\n        this.text2.value = this.text2.innerText;\n    }\n\n    submit() {\n        let tick = 6;\n        console.log(`由于必须填写一分钟以上，${tick} 秒后将自动提交，请耐心等待~`);\n        this.infoInterval = setInterval(() => {\n            tick--;\n            console.log(`由于必须填写一分钟以上，${tick} 秒后将自动提交，请耐心等待~`);\n        }, 1000);\n        setTimeout(() => {\n            clearInterval(this.infoInterval);\n            this.submitBtn.click();\n        }, tick*1000);\n    }\n}\n\nvar myEvaluater = new Evaluater();\n```\n","slug":"教务网课程评价填写脚本","published":1,"updated":"2022-03-04T02:21:14.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0r6000crcsf2pug82f2","content":"<p>源码来自互联网，但略作修改。仅作学习和技术交流用，侵删</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Evaluater</span> = <span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">mainWindow</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#WindowMain3&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">WindowFrame</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">mainWindow</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#WindowFrame3&#x27;</span>).<span class=\"property\">contentDocument</span>.<span class=\"property\">childNodes</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">ansDiv</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">WindowFrame</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.answerDiv&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">submitBtn</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">WindowFrame</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#r_content&gt;.b_content&gt;.tb_cont&gt;.frame-table&gt;tbody&gt;tr:nth-child(2) input:nth-child(1)&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">select</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">stuff</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">submit</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">select</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">ansDiv</span>.<span class=\"property\">length</span> - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">ansDiv</span>[i].<span class=\"property\">childNodes</span>[<span class=\"number\">1</span>].<span class=\"property\">childNodes</span>[<span class=\"number\">3</span>].<span class=\"title function_\">click</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">stuff</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">text1</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">WindowFrame</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#answerDiv16 textarea&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">text2</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">WindowFrame</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#answerDiv17 textarea&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">text1</span>.<span class=\"property\">innerText</span> = <span class=\"string\">&#x27;都很满意&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">text2</span>.<span class=\"property\">innerText</span> = <span class=\"string\">&#x27;暂时没有&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">text1</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">text1</span>.<span class=\"property\">innerText</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">text2</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">text2</span>.<span class=\"property\">innerText</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">submit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tick = <span class=\"number\">6</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`由于必须填写一分钟以上，<span class=\"subst\">$&#123;tick&#125;</span> 秒后将自动提交，请耐心等待~`</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">infoInterval</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            tick--;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`由于必须填写一分钟以上，<span class=\"subst\">$&#123;tick&#125;</span> 秒后将自动提交，请耐心等待~`</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">infoInterval</span>);</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">submitBtn</span>.<span class=\"title function_\">click</span>();</span><br><span class=\"line\">        &#125;, tick*<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myEvaluater = <span class=\"keyword\">new</span> <span class=\"title class_\">Evaluater</span>();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>源码来自互联网，但略作修改。仅作学习和技术交流用，侵删</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Evaluater</span> = <span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">mainWindow</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#WindowMain3&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">WindowFrame</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">mainWindow</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#WindowFrame3&#x27;</span>).<span class=\"property\">contentDocument</span>.<span class=\"property\">childNodes</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">ansDiv</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">WindowFrame</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.answerDiv&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">submitBtn</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">WindowFrame</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#r_content&gt;.b_content&gt;.tb_cont&gt;.frame-table&gt;tbody&gt;tr:nth-child(2) input:nth-child(1)&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">select</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">stuff</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">submit</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">select</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">ansDiv</span>.<span class=\"property\">length</span> - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">ansDiv</span>[i].<span class=\"property\">childNodes</span>[<span class=\"number\">1</span>].<span class=\"property\">childNodes</span>[<span class=\"number\">3</span>].<span class=\"title function_\">click</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">stuff</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">text1</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">WindowFrame</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#answerDiv16 textarea&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">text2</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">WindowFrame</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#answerDiv17 textarea&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">text1</span>.<span class=\"property\">innerText</span> = <span class=\"string\">&#x27;都很满意&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">text2</span>.<span class=\"property\">innerText</span> = <span class=\"string\">&#x27;暂时没有&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">text1</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">text1</span>.<span class=\"property\">innerText</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">text2</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">text2</span>.<span class=\"property\">innerText</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">submit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tick = <span class=\"number\">6</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`由于必须填写一分钟以上，<span class=\"subst\">$&#123;tick&#125;</span> 秒后将自动提交，请耐心等待~`</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">infoInterval</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            tick--;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`由于必须填写一分钟以上，<span class=\"subst\">$&#123;tick&#125;</span> 秒后将自动提交，请耐心等待~`</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">infoInterval</span>);</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">submitBtn</span>.<span class=\"title function_\">click</span>();</span><br><span class=\"line\">        &#125;, tick*<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myEvaluater = <span class=\"keyword\">new</span> <span class=\"title class_\">Evaluater</span>();</span><br></pre></td></tr></table></figure>\n"},{"title":"数据结构-栈的应用：表达式求值","date":"2022-03-04T02:20:34.000Z","_content":"## 数据结构-栈的应用：表达式求值\n\n暂时只支持小于10的数之间的四则运算。\n\n```c++\n#include <iostream>\n#include <string.h>\n#include <math.h>\nusing namespace std;\ntypedef double ElemTypeA;\ntypedef char ElemTypeB;\n\ntypedef struct NodeA { ElemTypeA data; NodeA *next;} *StackA;\ntypedef struct NodeB { ElemTypeB data; NodeB *next;} *StackB;\n\nbool InitStack(StackA &A) { A = new NodeA; if (!A) { printf(\"InitStack执行失败 \"); return false; } A->next = NULL; return true; }\nbool InitStack(StackB &B) { B = new NodeB; if (!B) { printf(\"InitStack执行失败 \"); return false; } B->next = NULL; return true; }\nbool Push(StackA &A, ElemTypeA x) { if (!A) { printf(\"Push执行失败 \"); return false; } NodeA *s = new NodeA; s->data = x; s->next = A->next; A->next = s; return true; }\nbool Push(StackB &B, ElemTypeB x) { if (!B) { printf(\"Push执行失败 \"); return false; } NodeB *s = new NodeB; s->data = x; s->next = B->next; B->next = s; return true; }\nbool Pop(StackA &A, ElemTypeA &x) { if (!A) { printf(\"Pop执行失败 \"); return false; } if (!A->next) { printf(\"Pop执行失败 \"); return false; } NodeA *p = A->next; x = p->data; A->next = p->next; delete p; return true; }\nbool Pop(StackB &B, ElemTypeB &x) { if (!B) { printf(\"Pop执行失败 \"); return false; } if (!B->next) { printf(\"Pop执行失败 \"); return false; } NodeB *p = B->next; x = p->data; B->next = p->next; delete p; return true; }\nElemTypeA GetTop(StackA A) { if (!A) return -1; if (!A->next) return -1; return A->next->data; }\nElemTypeB GetTop(StackB B) { if (!B) return '\\0'; if (!B->next) return '\\0'; return B->next->data; }\nbool Reverse(StackA &A) { if (!A) return false; NodeA *p = A->next, *q; if (!p) return false; while(p->next) { q = p->next; p->next = q->next; q->next = A->next; A->next = q; } return true;}\nbool Reverse(StackB &B) { if (!B) return false; NodeB *p = B->next, *q; if (!p) return false; while(p->next) { q = p->next; p->next = q->next; q->next = B->next; B->next = q; } return true;}\nvoid PrintStack(StackA A) { if (!A) return; A = A->next; printf(\"(栈顶) \"); while(A) { printf(\"%.f \", A->data); A = A->next; } printf(\"\\n\"); }\nvoid PrintStack(StackB B) { if (!B) return; B = B->next; printf(\"(栈顶) \"); while(B) { printf(\"%c \", B->data); B = B->next; } printf(\"\\n\"); }\n\nvoid Do(bool func, const ElemTypeB* msg) { if (!func) printf(\"Pop执行失败[%s] \", msg); }\n\nbool isDigit(ElemTypeB x) { return x >= '0' && x <= '9'; }\n\ndouble calc(const ElemTypeB* expr) {\n    // A 操作数栈；B 操作符栈\n    if (expr == \"\") return 0;\n    double res = 0; ElemTypeB tmp = '\\0';\n    StackB ope, target; InitStack(ope); InitStack(target);\n\n    // 形成后缀表达式 target\n    for (int i = 0; i < strlen(expr); i++) {\n        // 左括号  入符号栈 ope\n        if (expr[i] == '(') Push(ope, expr[i]);\n        // 数字    入操作数栈 target\n        else if (isDigit(expr[i])) {\n            if (i == 0) Push(target, expr[i]);\n            else {\n                int j = 1; double num = expr[i] - 48;\n                while (j <= i)\n                    if (isDigit(expr[i - j])) {\n                        num += pow(10, j) * (expr[i - j++] - 48);\n                        // printf(\"(%d) \", (int)num);\n                    }\n                    else break;\n                Push(target, (int)num + 48);\n            }\n        }\n        // 四则运算\n        else if (expr[i] == '+' || expr[i] == '-') {\n            if (GetTop(ope) == '+' || GetTop(ope) == '-' || GetTop(ope) == '*' || GetTop(ope) == '/') {\n                Pop(ope, tmp); Push(target, tmp);\n                if (GetTop(ope) == '+' || GetTop(ope) == '-') { Pop(ope, tmp); Push(target, tmp); }\n            }\n            Push(ope, expr[i]);\n        }\n        else if (expr[i] == '*' || expr[i] == '/') {\n            if (GetTop(ope) == '*' || GetTop(ope) == '/') {\n                Pop(ope, tmp); Push(target, tmp);\n            }\n            Push(ope, expr[i]);\n        }\n        else if (expr[i] == ')') {\n            if (GetTop(ope) == '+' || GetTop(ope) == '-') { Pop(ope, tmp); Push(target, tmp); }\n            else if (GetTop(ope) == '*' || GetTop(ope) == '/') {\n                Pop(ope, tmp); Push(target, tmp);\n                if (GetTop(ope) == '+' || GetTop(ope) == '-') { Pop(ope, tmp); Push(target, tmp); }\n            }\n            if (GetTop(ope) == '(') Pop(ope, tmp); else { printf(\"表达式出错请检查。\"); return -1; }\n        }\n    }\n    while (ope->next) { if (ope->next->data == '(') { printf(\"表达式出错请检查。\"); return -1; } Pop(ope, tmp); Push(target, tmp); }\n\n    Reverse(target);\n\n    PrintStack(ope);\n    PrintStack(target);\n    double a1 = 0, a2 = 0; char tmp2; StackA resStack; InitStack(resStack);\n    while(GetTop(target) != '\\0') {\n        Pop(target, tmp2);\n        if (tmp2 == '+') { Pop(resStack, a2); Pop(resStack, a1); Push(resStack, a1 + a2); }\n        else if (tmp2 == '-') {Pop(resStack, a2); Pop(resStack, a1); Push(resStack, a1 - a2); }\n        else if (tmp2 == '*') {Pop(resStack, a2); Pop(resStack, a1); Push(resStack, a1 * a2); }\n        else if (tmp2 == '/') {Pop(resStack, a2); Pop(resStack, a1); Push(resStack, a1 / a2); }\n        else Push(resStack, tmp2 - 48);\n    }\n\n    return GetTop(resStack);\n}\n\nint main(int argc, char const *argv[])\n{\n    const char* expr = \"4-5/5+5*5/5\";\n    printf(\"%s = %.f\", expr, calc(expr));\n\n    return 0;\n}\n\n\n```","source":"_posts/数据结构-栈的应用：表达式求值.md","raw":"---\ntitle: 数据结构-栈的应用：表达式求值\ndate: 2022-03-04 10:20:34\ntags:\n---\n## 数据结构-栈的应用：表达式求值\n\n暂时只支持小于10的数之间的四则运算。\n\n```c++\n#include <iostream>\n#include <string.h>\n#include <math.h>\nusing namespace std;\ntypedef double ElemTypeA;\ntypedef char ElemTypeB;\n\ntypedef struct NodeA { ElemTypeA data; NodeA *next;} *StackA;\ntypedef struct NodeB { ElemTypeB data; NodeB *next;} *StackB;\n\nbool InitStack(StackA &A) { A = new NodeA; if (!A) { printf(\"InitStack执行失败 \"); return false; } A->next = NULL; return true; }\nbool InitStack(StackB &B) { B = new NodeB; if (!B) { printf(\"InitStack执行失败 \"); return false; } B->next = NULL; return true; }\nbool Push(StackA &A, ElemTypeA x) { if (!A) { printf(\"Push执行失败 \"); return false; } NodeA *s = new NodeA; s->data = x; s->next = A->next; A->next = s; return true; }\nbool Push(StackB &B, ElemTypeB x) { if (!B) { printf(\"Push执行失败 \"); return false; } NodeB *s = new NodeB; s->data = x; s->next = B->next; B->next = s; return true; }\nbool Pop(StackA &A, ElemTypeA &x) { if (!A) { printf(\"Pop执行失败 \"); return false; } if (!A->next) { printf(\"Pop执行失败 \"); return false; } NodeA *p = A->next; x = p->data; A->next = p->next; delete p; return true; }\nbool Pop(StackB &B, ElemTypeB &x) { if (!B) { printf(\"Pop执行失败 \"); return false; } if (!B->next) { printf(\"Pop执行失败 \"); return false; } NodeB *p = B->next; x = p->data; B->next = p->next; delete p; return true; }\nElemTypeA GetTop(StackA A) { if (!A) return -1; if (!A->next) return -1; return A->next->data; }\nElemTypeB GetTop(StackB B) { if (!B) return '\\0'; if (!B->next) return '\\0'; return B->next->data; }\nbool Reverse(StackA &A) { if (!A) return false; NodeA *p = A->next, *q; if (!p) return false; while(p->next) { q = p->next; p->next = q->next; q->next = A->next; A->next = q; } return true;}\nbool Reverse(StackB &B) { if (!B) return false; NodeB *p = B->next, *q; if (!p) return false; while(p->next) { q = p->next; p->next = q->next; q->next = B->next; B->next = q; } return true;}\nvoid PrintStack(StackA A) { if (!A) return; A = A->next; printf(\"(栈顶) \"); while(A) { printf(\"%.f \", A->data); A = A->next; } printf(\"\\n\"); }\nvoid PrintStack(StackB B) { if (!B) return; B = B->next; printf(\"(栈顶) \"); while(B) { printf(\"%c \", B->data); B = B->next; } printf(\"\\n\"); }\n\nvoid Do(bool func, const ElemTypeB* msg) { if (!func) printf(\"Pop执行失败[%s] \", msg); }\n\nbool isDigit(ElemTypeB x) { return x >= '0' && x <= '9'; }\n\ndouble calc(const ElemTypeB* expr) {\n    // A 操作数栈；B 操作符栈\n    if (expr == \"\") return 0;\n    double res = 0; ElemTypeB tmp = '\\0';\n    StackB ope, target; InitStack(ope); InitStack(target);\n\n    // 形成后缀表达式 target\n    for (int i = 0; i < strlen(expr); i++) {\n        // 左括号  入符号栈 ope\n        if (expr[i] == '(') Push(ope, expr[i]);\n        // 数字    入操作数栈 target\n        else if (isDigit(expr[i])) {\n            if (i == 0) Push(target, expr[i]);\n            else {\n                int j = 1; double num = expr[i] - 48;\n                while (j <= i)\n                    if (isDigit(expr[i - j])) {\n                        num += pow(10, j) * (expr[i - j++] - 48);\n                        // printf(\"(%d) \", (int)num);\n                    }\n                    else break;\n                Push(target, (int)num + 48);\n            }\n        }\n        // 四则运算\n        else if (expr[i] == '+' || expr[i] == '-') {\n            if (GetTop(ope) == '+' || GetTop(ope) == '-' || GetTop(ope) == '*' || GetTop(ope) == '/') {\n                Pop(ope, tmp); Push(target, tmp);\n                if (GetTop(ope) == '+' || GetTop(ope) == '-') { Pop(ope, tmp); Push(target, tmp); }\n            }\n            Push(ope, expr[i]);\n        }\n        else if (expr[i] == '*' || expr[i] == '/') {\n            if (GetTop(ope) == '*' || GetTop(ope) == '/') {\n                Pop(ope, tmp); Push(target, tmp);\n            }\n            Push(ope, expr[i]);\n        }\n        else if (expr[i] == ')') {\n            if (GetTop(ope) == '+' || GetTop(ope) == '-') { Pop(ope, tmp); Push(target, tmp); }\n            else if (GetTop(ope) == '*' || GetTop(ope) == '/') {\n                Pop(ope, tmp); Push(target, tmp);\n                if (GetTop(ope) == '+' || GetTop(ope) == '-') { Pop(ope, tmp); Push(target, tmp); }\n            }\n            if (GetTop(ope) == '(') Pop(ope, tmp); else { printf(\"表达式出错请检查。\"); return -1; }\n        }\n    }\n    while (ope->next) { if (ope->next->data == '(') { printf(\"表达式出错请检查。\"); return -1; } Pop(ope, tmp); Push(target, tmp); }\n\n    Reverse(target);\n\n    PrintStack(ope);\n    PrintStack(target);\n    double a1 = 0, a2 = 0; char tmp2; StackA resStack; InitStack(resStack);\n    while(GetTop(target) != '\\0') {\n        Pop(target, tmp2);\n        if (tmp2 == '+') { Pop(resStack, a2); Pop(resStack, a1); Push(resStack, a1 + a2); }\n        else if (tmp2 == '-') {Pop(resStack, a2); Pop(resStack, a1); Push(resStack, a1 - a2); }\n        else if (tmp2 == '*') {Pop(resStack, a2); Pop(resStack, a1); Push(resStack, a1 * a2); }\n        else if (tmp2 == '/') {Pop(resStack, a2); Pop(resStack, a1); Push(resStack, a1 / a2); }\n        else Push(resStack, tmp2 - 48);\n    }\n\n    return GetTop(resStack);\n}\n\nint main(int argc, char const *argv[])\n{\n    const char* expr = \"4-5/5+5*5/5\";\n    printf(\"%s = %.f\", expr, calc(expr));\n\n    return 0;\n}\n\n\n```","slug":"数据结构-栈的应用：表达式求值","published":1,"updated":"2022-03-04T02:22:26.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0r6000drcsfcouc6hoe","content":"<h2 id=\"数据结构-栈的应用：表达式求值\"><a href=\"#数据结构-栈的应用：表达式求值\" class=\"headerlink\" title=\"数据结构-栈的应用：表达式求值\"></a>数据结构-栈的应用：表达式求值</h2><p>暂时只支持小于10的数之间的四则运算。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">double</span> ElemTypeA;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">char</span> ElemTypeB;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">NodeA</span> &#123; ElemTypeA data; NodeA *next;&#125; *StackA;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">NodeB</span> &#123; ElemTypeB data; NodeB *next;&#125; *StackB;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">InitStack</span><span class=\"params\">(StackA &amp;A)</span> </span>&#123; A = <span class=\"keyword\">new</span> NodeA; <span class=\"keyword\">if</span> (!A) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;InitStack执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; A-&gt;next = <span class=\"literal\">NULL</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">InitStack</span><span class=\"params\">(StackB &amp;B)</span> </span>&#123; B = <span class=\"keyword\">new</span> NodeB; <span class=\"keyword\">if</span> (!B) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;InitStack执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; B-&gt;next = <span class=\"literal\">NULL</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Push</span><span class=\"params\">(StackA &amp;A, ElemTypeA x)</span> </span>&#123; <span class=\"keyword\">if</span> (!A) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Push执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; NodeA *s = <span class=\"keyword\">new</span> NodeA; s-&gt;data = x; s-&gt;next = A-&gt;next; A-&gt;next = s; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Push</span><span class=\"params\">(StackB &amp;B, ElemTypeB x)</span> </span>&#123; <span class=\"keyword\">if</span> (!B) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Push执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; NodeB *s = <span class=\"keyword\">new</span> NodeB; s-&gt;data = x; s-&gt;next = B-&gt;next; B-&gt;next = s; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Pop</span><span class=\"params\">(StackA &amp;A, ElemTypeA &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> (!A) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Pop执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; <span class=\"keyword\">if</span> (!A-&gt;next) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Pop执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; NodeA *p = A-&gt;next; x = p-&gt;data; A-&gt;next = p-&gt;next; <span class=\"keyword\">delete</span> p; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Pop</span><span class=\"params\">(StackB &amp;B, ElemTypeB &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> (!B) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Pop执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; <span class=\"keyword\">if</span> (!B-&gt;next) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Pop执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; NodeB *p = B-&gt;next; x = p-&gt;data; B-&gt;next = p-&gt;next; <span class=\"keyword\">delete</span> p; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\">ElemTypeA <span class=\"title\">GetTop</span><span class=\"params\">(StackA A)</span> </span>&#123; <span class=\"keyword\">if</span> (!A) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"keyword\">if</span> (!A-&gt;next) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"keyword\">return</span> A-&gt;next-&gt;data; &#125;</span><br><span class=\"line\"><span class=\"function\">ElemTypeB <span class=\"title\">GetTop</span><span class=\"params\">(StackB B)</span> </span>&#123; <span class=\"keyword\">if</span> (!B) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;\\0&#x27;</span>; <span class=\"keyword\">if</span> (!B-&gt;next) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;\\0&#x27;</span>; <span class=\"keyword\">return</span> B-&gt;next-&gt;data; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Reverse</span><span class=\"params\">(StackA &amp;A)</span> </span>&#123; <span class=\"keyword\">if</span> (!A) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; NodeA *p = A-&gt;next, *q; <span class=\"keyword\">if</span> (!p) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"keyword\">while</span>(p-&gt;next) &#123; q = p-&gt;next; p-&gt;next = q-&gt;next; q-&gt;next = A-&gt;next; A-&gt;next = q; &#125; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Reverse</span><span class=\"params\">(StackB &amp;B)</span> </span>&#123; <span class=\"keyword\">if</span> (!B) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; NodeB *p = B-&gt;next, *q; <span class=\"keyword\">if</span> (!p) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"keyword\">while</span>(p-&gt;next) &#123; q = p-&gt;next; p-&gt;next = q-&gt;next; q-&gt;next = B-&gt;next; B-&gt;next = q; &#125; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintStack</span><span class=\"params\">(StackA A)</span> </span>&#123; <span class=\"keyword\">if</span> (!A) <span class=\"keyword\">return</span>; A = A-&gt;next; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;(栈顶) &quot;</span>); <span class=\"keyword\">while</span>(A) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.f &quot;</span>, A-&gt;data); A = A-&gt;next; &#125; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintStack</span><span class=\"params\">(StackB B)</span> </span>&#123; <span class=\"keyword\">if</span> (!B) <span class=\"keyword\">return</span>; B = B-&gt;next; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;(栈顶) &quot;</span>); <span class=\"keyword\">while</span>(B) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, B-&gt;data); B = B-&gt;next; &#125; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Do</span><span class=\"params\">(<span class=\"type\">bool</span> func, <span class=\"type\">const</span> ElemTypeB* msg)</span> </span>&#123; <span class=\"keyword\">if</span> (!func) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Pop执行失败[%s] &quot;</span>, msg); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isDigit</span><span class=\"params\">(ElemTypeB x)</span> </span>&#123; <span class=\"keyword\">return</span> x &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; x &lt;= <span class=\"string\">&#x27;9&#x27;</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"type\">const</span> ElemTypeB* expr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// A 操作数栈；B 操作符栈</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expr == <span class=\"string\">&quot;&quot;</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> res = <span class=\"number\">0</span>; ElemTypeB tmp = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    StackB ope, target; <span class=\"built_in\">InitStack</span>(ope); <span class=\"built_in\">InitStack</span>(target);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 形成后缀表达式 target</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">strlen</span>(expr); i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 左括号  入符号栈 ope</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (expr[i] == <span class=\"string\">&#x27;(&#x27;</span>) <span class=\"built_in\">Push</span>(ope, expr[i]);</span><br><span class=\"line\">        <span class=\"comment\">// 数字    入操作数栈 target</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">isDigit</span>(expr[i])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) <span class=\"built_in\">Push</span>(target, expr[i]);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> j = <span class=\"number\">1</span>; <span class=\"type\">double</span> num = expr[i] - <span class=\"number\">48</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (j &lt;= i)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"built_in\">isDigit</span>(expr[i - j])) &#123;</span><br><span class=\"line\">                        num += <span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, j) * (expr[i - j++] - <span class=\"number\">48</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// printf(&quot;(%d) &quot;, (int)num);</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"built_in\">Push</span>(target, (<span class=\"type\">int</span>)num + <span class=\"number\">48</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 四则运算</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expr[i] == <span class=\"string\">&#x27;+&#x27;</span> || expr[i] == <span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;+&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;-&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;*&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;+&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;-&#x27;</span>) &#123; <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp); &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">Push</span>(ope, expr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expr[i] == <span class=\"string\">&#x27;*&#x27;</span> || expr[i] == <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;*&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">Push</span>(ope, expr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expr[i] == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;+&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;-&#x27;</span>) &#123; <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp); &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;*&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;+&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;-&#x27;</span>) &#123; <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp); &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;(&#x27;</span>) <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"keyword\">else</span> &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;表达式出错请检查。&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ope-&gt;next) &#123; <span class=\"keyword\">if</span> (ope-&gt;next-&gt;data == <span class=\"string\">&#x27;(&#x27;</span>) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;表达式出错请检查。&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125; <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Reverse</span>(target);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">PrintStack</span>(ope);</span><br><span class=\"line\">    <span class=\"built_in\">PrintStack</span>(target);</span><br><span class=\"line\">    <span class=\"type\">double</span> a1 = <span class=\"number\">0</span>, a2 = <span class=\"number\">0</span>; <span class=\"type\">char</span> tmp2; StackA resStack; <span class=\"built_in\">InitStack</span>(resStack);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">GetTop</span>(target) != <span class=\"string\">&#x27;\\0&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Pop</span>(target, tmp2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp2 == <span class=\"string\">&#x27;+&#x27;</span>) &#123; <span class=\"built_in\">Pop</span>(resStack, a2); <span class=\"built_in\">Pop</span>(resStack, a1); <span class=\"built_in\">Push</span>(resStack, a1 + a2); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmp2 == <span class=\"string\">&#x27;-&#x27;</span>) &#123;<span class=\"built_in\">Pop</span>(resStack, a2); <span class=\"built_in\">Pop</span>(resStack, a1); <span class=\"built_in\">Push</span>(resStack, a1 - a2); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmp2 == <span class=\"string\">&#x27;*&#x27;</span>) &#123;<span class=\"built_in\">Pop</span>(resStack, a2); <span class=\"built_in\">Pop</span>(resStack, a1); <span class=\"built_in\">Push</span>(resStack, a1 * a2); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmp2 == <span class=\"string\">&#x27;/&#x27;</span>) &#123;<span class=\"built_in\">Pop</span>(resStack, a2); <span class=\"built_in\">Pop</span>(resStack, a1); <span class=\"built_in\">Push</span>(resStack, a1 / a2); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">Push</span>(resStack, tmp2 - <span class=\"number\">48</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GetTop</span>(resStack);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* expr = <span class=\"string\">&quot;4-5/5+5*5/5&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s = %.f&quot;</span>, expr, <span class=\"built_in\">calc</span>(expr));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据结构-栈的应用：表达式求值\"><a href=\"#数据结构-栈的应用：表达式求值\" class=\"headerlink\" title=\"数据结构-栈的应用：表达式求值\"></a>数据结构-栈的应用：表达式求值</h2><p>暂时只支持小于10的数之间的四则运算。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">double</span> ElemTypeA;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">char</span> ElemTypeB;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">NodeA</span> &#123; ElemTypeA data; NodeA *next;&#125; *StackA;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">NodeB</span> &#123; ElemTypeB data; NodeB *next;&#125; *StackB;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">InitStack</span><span class=\"params\">(StackA &amp;A)</span> </span>&#123; A = <span class=\"keyword\">new</span> NodeA; <span class=\"keyword\">if</span> (!A) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;InitStack执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; A-&gt;next = <span class=\"literal\">NULL</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">InitStack</span><span class=\"params\">(StackB &amp;B)</span> </span>&#123; B = <span class=\"keyword\">new</span> NodeB; <span class=\"keyword\">if</span> (!B) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;InitStack执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; B-&gt;next = <span class=\"literal\">NULL</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Push</span><span class=\"params\">(StackA &amp;A, ElemTypeA x)</span> </span>&#123; <span class=\"keyword\">if</span> (!A) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Push执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; NodeA *s = <span class=\"keyword\">new</span> NodeA; s-&gt;data = x; s-&gt;next = A-&gt;next; A-&gt;next = s; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Push</span><span class=\"params\">(StackB &amp;B, ElemTypeB x)</span> </span>&#123; <span class=\"keyword\">if</span> (!B) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Push执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; NodeB *s = <span class=\"keyword\">new</span> NodeB; s-&gt;data = x; s-&gt;next = B-&gt;next; B-&gt;next = s; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Pop</span><span class=\"params\">(StackA &amp;A, ElemTypeA &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> (!A) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Pop执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; <span class=\"keyword\">if</span> (!A-&gt;next) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Pop执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; NodeA *p = A-&gt;next; x = p-&gt;data; A-&gt;next = p-&gt;next; <span class=\"keyword\">delete</span> p; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Pop</span><span class=\"params\">(StackB &amp;B, ElemTypeB &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> (!B) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Pop执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; <span class=\"keyword\">if</span> (!B-&gt;next) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Pop执行失败 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125; NodeB *p = B-&gt;next; x = p-&gt;data; B-&gt;next = p-&gt;next; <span class=\"keyword\">delete</span> p; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\">ElemTypeA <span class=\"title\">GetTop</span><span class=\"params\">(StackA A)</span> </span>&#123; <span class=\"keyword\">if</span> (!A) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"keyword\">if</span> (!A-&gt;next) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"keyword\">return</span> A-&gt;next-&gt;data; &#125;</span><br><span class=\"line\"><span class=\"function\">ElemTypeB <span class=\"title\">GetTop</span><span class=\"params\">(StackB B)</span> </span>&#123; <span class=\"keyword\">if</span> (!B) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;\\0&#x27;</span>; <span class=\"keyword\">if</span> (!B-&gt;next) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;\\0&#x27;</span>; <span class=\"keyword\">return</span> B-&gt;next-&gt;data; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Reverse</span><span class=\"params\">(StackA &amp;A)</span> </span>&#123; <span class=\"keyword\">if</span> (!A) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; NodeA *p = A-&gt;next, *q; <span class=\"keyword\">if</span> (!p) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"keyword\">while</span>(p-&gt;next) &#123; q = p-&gt;next; p-&gt;next = q-&gt;next; q-&gt;next = A-&gt;next; A-&gt;next = q; &#125; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Reverse</span><span class=\"params\">(StackB &amp;B)</span> </span>&#123; <span class=\"keyword\">if</span> (!B) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; NodeB *p = B-&gt;next, *q; <span class=\"keyword\">if</span> (!p) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"keyword\">while</span>(p-&gt;next) &#123; q = p-&gt;next; p-&gt;next = q-&gt;next; q-&gt;next = B-&gt;next; B-&gt;next = q; &#125; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintStack</span><span class=\"params\">(StackA A)</span> </span>&#123; <span class=\"keyword\">if</span> (!A) <span class=\"keyword\">return</span>; A = A-&gt;next; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;(栈顶) &quot;</span>); <span class=\"keyword\">while</span>(A) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.f &quot;</span>, A-&gt;data); A = A-&gt;next; &#125; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintStack</span><span class=\"params\">(StackB B)</span> </span>&#123; <span class=\"keyword\">if</span> (!B) <span class=\"keyword\">return</span>; B = B-&gt;next; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;(栈顶) &quot;</span>); <span class=\"keyword\">while</span>(B) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, B-&gt;data); B = B-&gt;next; &#125; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Do</span><span class=\"params\">(<span class=\"type\">bool</span> func, <span class=\"type\">const</span> ElemTypeB* msg)</span> </span>&#123; <span class=\"keyword\">if</span> (!func) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Pop执行失败[%s] &quot;</span>, msg); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isDigit</span><span class=\"params\">(ElemTypeB x)</span> </span>&#123; <span class=\"keyword\">return</span> x &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; x &lt;= <span class=\"string\">&#x27;9&#x27;</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"type\">const</span> ElemTypeB* expr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// A 操作数栈；B 操作符栈</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expr == <span class=\"string\">&quot;&quot;</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> res = <span class=\"number\">0</span>; ElemTypeB tmp = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    StackB ope, target; <span class=\"built_in\">InitStack</span>(ope); <span class=\"built_in\">InitStack</span>(target);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 形成后缀表达式 target</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">strlen</span>(expr); i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 左括号  入符号栈 ope</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (expr[i] == <span class=\"string\">&#x27;(&#x27;</span>) <span class=\"built_in\">Push</span>(ope, expr[i]);</span><br><span class=\"line\">        <span class=\"comment\">// 数字    入操作数栈 target</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">isDigit</span>(expr[i])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) <span class=\"built_in\">Push</span>(target, expr[i]);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> j = <span class=\"number\">1</span>; <span class=\"type\">double</span> num = expr[i] - <span class=\"number\">48</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (j &lt;= i)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"built_in\">isDigit</span>(expr[i - j])) &#123;</span><br><span class=\"line\">                        num += <span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, j) * (expr[i - j++] - <span class=\"number\">48</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// printf(&quot;(%d) &quot;, (int)num);</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"built_in\">Push</span>(target, (<span class=\"type\">int</span>)num + <span class=\"number\">48</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 四则运算</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expr[i] == <span class=\"string\">&#x27;+&#x27;</span> || expr[i] == <span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;+&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;-&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;*&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;+&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;-&#x27;</span>) &#123; <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp); &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">Push</span>(ope, expr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expr[i] == <span class=\"string\">&#x27;*&#x27;</span> || expr[i] == <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;*&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">Push</span>(ope, expr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expr[i] == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;+&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;-&#x27;</span>) &#123; <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp); &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;*&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;+&#x27;</span> || <span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;-&#x27;</span>) &#123; <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp); &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">GetTop</span>(ope) == <span class=\"string\">&#x27;(&#x27;</span>) <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"keyword\">else</span> &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;表达式出错请检查。&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ope-&gt;next) &#123; <span class=\"keyword\">if</span> (ope-&gt;next-&gt;data == <span class=\"string\">&#x27;(&#x27;</span>) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;表达式出错请检查。&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125; <span class=\"built_in\">Pop</span>(ope, tmp); <span class=\"built_in\">Push</span>(target, tmp); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Reverse</span>(target);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">PrintStack</span>(ope);</span><br><span class=\"line\">    <span class=\"built_in\">PrintStack</span>(target);</span><br><span class=\"line\">    <span class=\"type\">double</span> a1 = <span class=\"number\">0</span>, a2 = <span class=\"number\">0</span>; <span class=\"type\">char</span> tmp2; StackA resStack; <span class=\"built_in\">InitStack</span>(resStack);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">GetTop</span>(target) != <span class=\"string\">&#x27;\\0&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Pop</span>(target, tmp2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp2 == <span class=\"string\">&#x27;+&#x27;</span>) &#123; <span class=\"built_in\">Pop</span>(resStack, a2); <span class=\"built_in\">Pop</span>(resStack, a1); <span class=\"built_in\">Push</span>(resStack, a1 + a2); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmp2 == <span class=\"string\">&#x27;-&#x27;</span>) &#123;<span class=\"built_in\">Pop</span>(resStack, a2); <span class=\"built_in\">Pop</span>(resStack, a1); <span class=\"built_in\">Push</span>(resStack, a1 - a2); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmp2 == <span class=\"string\">&#x27;*&#x27;</span>) &#123;<span class=\"built_in\">Pop</span>(resStack, a2); <span class=\"built_in\">Pop</span>(resStack, a1); <span class=\"built_in\">Push</span>(resStack, a1 * a2); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmp2 == <span class=\"string\">&#x27;/&#x27;</span>) &#123;<span class=\"built_in\">Pop</span>(resStack, a2); <span class=\"built_in\">Pop</span>(resStack, a1); <span class=\"built_in\">Push</span>(resStack, a1 / a2); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">Push</span>(resStack, tmp2 - <span class=\"number\">48</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GetTop</span>(resStack);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* expr = <span class=\"string\">&quot;4-5/5+5*5/5&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s = %.f&quot;</span>, expr, <span class=\"built_in\">calc</span>(expr));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"视频测试URL地址","date":"2022-03-04T02:20:34.000Z","_content":"# 视频测试URL地址\n**URL: 资源定位符（Uniform Resource Locators）**\n****\n## 网址合集\nhttps://www.sample-videos.com/index.php#sample-mp4-video\n## mp4 文件\n1. http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\n2. http://vjs.zencdn.net/v/oceans.mp4\n3. https://media.w3.org/2010/05/sintel/trailer.mp4\n4. http://mirror.aarnet.edu.au/pub/TED-talks/911Mothers_2010W-480p.mp4\n## HLS直播源地址：\nCCTV-1高清 http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8\nCCTV-3高清 http://ivi.bupt.edu.cn/hls/cctv3hd.m3u8\nCCTV-5高清 http://ivi.bupt.edu.cn/hls/cctv5hd.m3u8\nCCTV-5+高清 http://ivi.bupt.edu.cn/hls/cctv5phd.m3u8\nCCTV-6高清 http://ivi.bupt.edu.cn/hls/cctv6hd.m3u8\nCCTV-8高清 http://ivi.bupt.edu.cn/hls/cctv8hd.m3u8\nCHC高清电影 http://ivi.bupt.edu.cn/hls/chchd.m3u8\n北京卫视高清 http://ivi.bupt.edu.cn/hls/btv1hd.m3u8\n北京文艺高清 http://ivi.bupt.edu.cn/hls/btv2hd.m3u8\n北京体育高清 http://ivi.bupt.edu.cn/hls/btv6hd.m3u8\n北京纪实高清 http://ivi.bupt.edu.cn/hls/btv11hd.m3u8\n湖南卫视高清 http://ivi.bupt.edu.cn/hls/hunanhd.m3u8\n浙江卫视高清 http://ivi.bupt.edu.cn/hls/zjhd.m3u8\n江苏卫视高清 http://ivi.bupt.edu.cn/hls/jshd.m3u8\n东方卫视高清 http://ivi.bupt.edu.cn/hls/dfhd.m3u8\n安徽卫视高清 http://ivi.bupt.edu.cn/hls/ahhd.m3u8\n黑龙江卫视高清 http://ivi.bupt.edu.cn/hls/hljhd.m3u8\n辽宁卫视高清 http://ivi.bupt.edu.cn/hls/lnhd.m3u8\n深圳卫视高清 http://ivi.bupt.edu.cn/hls/szhd.m3u8\n广东卫视高清 http://ivi.bupt.edu.cn/hls/gdhd.m3u8\n天津卫视高清 http://ivi.bupt.edu.cn/hls/tjhd.m3u8\n湖北卫视高清 http://ivi.bupt.edu.cn/hls/hbhd.m3u8\n山东卫视高清 http://ivi.bupt.edu.cn/hls/sdhd.m3u8\n## RTMP直播源地址：\n香港卫视：rtmp://live.hkstv.hk.lxdns.com/live/hks1\nrtmp://live.hkstv.hk.lxdns.com/live/hks2\n湖南卫视：rtmp://58.200.131.2:1935/livetv/hunantv\n美国1：rtmp://ns8.indexforce.com/home/mystream\n美国中文电视：rtmp://media3.sinovision.net:1935/live/livestream\n香港财经：rtmp://202.69.69.180:443/webcast/bshdlive-pc\n韩国GoodTV：rtmp://mobliestream.c3tv.com:554/live/goodtv.sdp\n\n-----\n参考链接：\n1. https://blog.csdn.net/weixin_41010198/article/details/88055078\n2. https://blog.csdn.net/weixin_43990252/article/details/103493443","source":"_posts/视频测试URL地址.md","raw":"---\ntitle: 视频测试URL地址\ndate: 2022-03-04 10:20:34\ntags:\n---\n# 视频测试URL地址\n**URL: 资源定位符（Uniform Resource Locators）**\n****\n## 网址合集\nhttps://www.sample-videos.com/index.php#sample-mp4-video\n## mp4 文件\n1. http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\n2. http://vjs.zencdn.net/v/oceans.mp4\n3. https://media.w3.org/2010/05/sintel/trailer.mp4\n4. http://mirror.aarnet.edu.au/pub/TED-talks/911Mothers_2010W-480p.mp4\n## HLS直播源地址：\nCCTV-1高清 http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8\nCCTV-3高清 http://ivi.bupt.edu.cn/hls/cctv3hd.m3u8\nCCTV-5高清 http://ivi.bupt.edu.cn/hls/cctv5hd.m3u8\nCCTV-5+高清 http://ivi.bupt.edu.cn/hls/cctv5phd.m3u8\nCCTV-6高清 http://ivi.bupt.edu.cn/hls/cctv6hd.m3u8\nCCTV-8高清 http://ivi.bupt.edu.cn/hls/cctv8hd.m3u8\nCHC高清电影 http://ivi.bupt.edu.cn/hls/chchd.m3u8\n北京卫视高清 http://ivi.bupt.edu.cn/hls/btv1hd.m3u8\n北京文艺高清 http://ivi.bupt.edu.cn/hls/btv2hd.m3u8\n北京体育高清 http://ivi.bupt.edu.cn/hls/btv6hd.m3u8\n北京纪实高清 http://ivi.bupt.edu.cn/hls/btv11hd.m3u8\n湖南卫视高清 http://ivi.bupt.edu.cn/hls/hunanhd.m3u8\n浙江卫视高清 http://ivi.bupt.edu.cn/hls/zjhd.m3u8\n江苏卫视高清 http://ivi.bupt.edu.cn/hls/jshd.m3u8\n东方卫视高清 http://ivi.bupt.edu.cn/hls/dfhd.m3u8\n安徽卫视高清 http://ivi.bupt.edu.cn/hls/ahhd.m3u8\n黑龙江卫视高清 http://ivi.bupt.edu.cn/hls/hljhd.m3u8\n辽宁卫视高清 http://ivi.bupt.edu.cn/hls/lnhd.m3u8\n深圳卫视高清 http://ivi.bupt.edu.cn/hls/szhd.m3u8\n广东卫视高清 http://ivi.bupt.edu.cn/hls/gdhd.m3u8\n天津卫视高清 http://ivi.bupt.edu.cn/hls/tjhd.m3u8\n湖北卫视高清 http://ivi.bupt.edu.cn/hls/hbhd.m3u8\n山东卫视高清 http://ivi.bupt.edu.cn/hls/sdhd.m3u8\n## RTMP直播源地址：\n香港卫视：rtmp://live.hkstv.hk.lxdns.com/live/hks1\nrtmp://live.hkstv.hk.lxdns.com/live/hks2\n湖南卫视：rtmp://58.200.131.2:1935/livetv/hunantv\n美国1：rtmp://ns8.indexforce.com/home/mystream\n美国中文电视：rtmp://media3.sinovision.net:1935/live/livestream\n香港财经：rtmp://202.69.69.180:443/webcast/bshdlive-pc\n韩国GoodTV：rtmp://mobliestream.c3tv.com:554/live/goodtv.sdp\n\n-----\n参考链接：\n1. https://blog.csdn.net/weixin_41010198/article/details/88055078\n2. https://blog.csdn.net/weixin_43990252/article/details/103493443","slug":"视频测试URL地址","published":1,"updated":"2022-03-04T02:21:22.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0r7000ercsf74hc6936","content":"<h1 id=\"视频测试URL地址\"><a href=\"#视频测试URL地址\" class=\"headerlink\" title=\"视频测试URL地址\"></a>视频测试URL地址</h1><p><strong>URL: 资源定位符（Uniform Resource Locators）</strong></p>\n<hr>\n<h2 id=\"网址合集\"><a href=\"#网址合集\" class=\"headerlink\" title=\"网址合集\"></a>网址合集</h2><p><a href=\"https://www.sample-videos.com/index.php#sample-mp4-video\">https://www.sample-videos.com/index.php#sample-mp4-video</a></p>\n<h2 id=\"mp4-文件\"><a href=\"#mp4-文件\" class=\"headerlink\" title=\"mp4 文件\"></a>mp4 文件</h2><ol>\n<li><a href=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\">http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4</a></li>\n<li><a href=\"http://vjs.zencdn.net/v/oceans.mp4\">http://vjs.zencdn.net/v/oceans.mp4</a></li>\n<li><a href=\"https://media.w3.org/2010/05/sintel/trailer.mp4\">https://media.w3.org/2010/05/sintel/trailer.mp4</a></li>\n<li><a href=\"http://mirror.aarnet.edu.au/pub/TED-talks/911Mothers_2010W-480p.mp4\">http://mirror.aarnet.edu.au/pub/TED-talks/911Mothers_2010W-480p.mp4</a><h2 id=\"HLS直播源地址：\"><a href=\"#HLS直播源地址：\" class=\"headerlink\" title=\"HLS直播源地址：\"></a>HLS直播源地址：</h2>CCTV-1高清 <a href=\"http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8</a><br>CCTV-3高清 <a href=\"http://ivi.bupt.edu.cn/hls/cctv3hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv3hd.m3u8</a><br>CCTV-5高清 <a href=\"http://ivi.bupt.edu.cn/hls/cctv5hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv5hd.m3u8</a><br>CCTV-5+高清 <a href=\"http://ivi.bupt.edu.cn/hls/cctv5phd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv5phd.m3u8</a><br>CCTV-6高清 <a href=\"http://ivi.bupt.edu.cn/hls/cctv6hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv6hd.m3u8</a><br>CCTV-8高清 <a href=\"http://ivi.bupt.edu.cn/hls/cctv8hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv8hd.m3u8</a><br>CHC高清电影 <a href=\"http://ivi.bupt.edu.cn/hls/chchd.m3u8\">http://ivi.bupt.edu.cn/hls/chchd.m3u8</a><br>北京卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/btv1hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv1hd.m3u8</a><br>北京文艺高清 <a href=\"http://ivi.bupt.edu.cn/hls/btv2hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv2hd.m3u8</a><br>北京体育高清 <a href=\"http://ivi.bupt.edu.cn/hls/btv6hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv6hd.m3u8</a><br>北京纪实高清 <a href=\"http://ivi.bupt.edu.cn/hls/btv11hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv11hd.m3u8</a><br>湖南卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/hunanhd.m3u8\">http://ivi.bupt.edu.cn/hls/hunanhd.m3u8</a><br>浙江卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/zjhd.m3u8\">http://ivi.bupt.edu.cn/hls/zjhd.m3u8</a><br>江苏卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/jshd.m3u8\">http://ivi.bupt.edu.cn/hls/jshd.m3u8</a><br>东方卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/dfhd.m3u8\">http://ivi.bupt.edu.cn/hls/dfhd.m3u8</a><br>安徽卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/ahhd.m3u8\">http://ivi.bupt.edu.cn/hls/ahhd.m3u8</a><br>黑龙江卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/hljhd.m3u8\">http://ivi.bupt.edu.cn/hls/hljhd.m3u8</a><br>辽宁卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/lnhd.m3u8\">http://ivi.bupt.edu.cn/hls/lnhd.m3u8</a><br>深圳卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/szhd.m3u8\">http://ivi.bupt.edu.cn/hls/szhd.m3u8</a><br>广东卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/gdhd.m3u8\">http://ivi.bupt.edu.cn/hls/gdhd.m3u8</a><br>天津卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/tjhd.m3u8\">http://ivi.bupt.edu.cn/hls/tjhd.m3u8</a><br>湖北卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/hbhd.m3u8\">http://ivi.bupt.edu.cn/hls/hbhd.m3u8</a><br>山东卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/sdhd.m3u8\">http://ivi.bupt.edu.cn/hls/sdhd.m3u8</a><h2 id=\"RTMP直播源地址：\"><a href=\"#RTMP直播源地址：\" class=\"headerlink\" title=\"RTMP直播源地址：\"></a>RTMP直播源地址：</h2>香港卫视：rtmp://live.hkstv.hk.lxdns.com/live/hks1<br>rtmp://live.hkstv.hk.lxdns.com/live/hks2<br>湖南卫视：rtmp://58.200.131.2:1935/livetv/hunantv<br>美国1：rtmp://ns8.indexforce.com/home/mystream<br>美国中文电视：rtmp://media3.sinovision.net:1935/live/livestream<br>香港财经：rtmp://202.69.69.180:443/webcast/bshdlive-pc<br>韩国GoodTV：rtmp://mobliestream.c3tv.com:554/live/goodtv.sdp</li>\n</ol>\n<hr>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/weixin_41010198/article/details/88055078\">https://blog.csdn.net/weixin_41010198/article/details/88055078</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_43990252/article/details/103493443\">https://blog.csdn.net/weixin_43990252/article/details/103493443</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"视频测试URL地址\"><a href=\"#视频测试URL地址\" class=\"headerlink\" title=\"视频测试URL地址\"></a>视频测试URL地址</h1><p><strong>URL: 资源定位符（Uniform Resource Locators）</strong></p>\n<hr>\n<h2 id=\"网址合集\"><a href=\"#网址合集\" class=\"headerlink\" title=\"网址合集\"></a>网址合集</h2><p><a href=\"https://www.sample-videos.com/index.php#sample-mp4-video\">https://www.sample-videos.com/index.php#sample-mp4-video</a></p>\n<h2 id=\"mp4-文件\"><a href=\"#mp4-文件\" class=\"headerlink\" title=\"mp4 文件\"></a>mp4 文件</h2><ol>\n<li><a href=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\">http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4</a></li>\n<li><a href=\"http://vjs.zencdn.net/v/oceans.mp4\">http://vjs.zencdn.net/v/oceans.mp4</a></li>\n<li><a href=\"https://media.w3.org/2010/05/sintel/trailer.mp4\">https://media.w3.org/2010/05/sintel/trailer.mp4</a></li>\n<li><a href=\"http://mirror.aarnet.edu.au/pub/TED-talks/911Mothers_2010W-480p.mp4\">http://mirror.aarnet.edu.au/pub/TED-talks/911Mothers_2010W-480p.mp4</a><h2 id=\"HLS直播源地址：\"><a href=\"#HLS直播源地址：\" class=\"headerlink\" title=\"HLS直播源地址：\"></a>HLS直播源地址：</h2>CCTV-1高清 <a href=\"http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8</a><br>CCTV-3高清 <a href=\"http://ivi.bupt.edu.cn/hls/cctv3hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv3hd.m3u8</a><br>CCTV-5高清 <a href=\"http://ivi.bupt.edu.cn/hls/cctv5hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv5hd.m3u8</a><br>CCTV-5+高清 <a href=\"http://ivi.bupt.edu.cn/hls/cctv5phd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv5phd.m3u8</a><br>CCTV-6高清 <a href=\"http://ivi.bupt.edu.cn/hls/cctv6hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv6hd.m3u8</a><br>CCTV-8高清 <a href=\"http://ivi.bupt.edu.cn/hls/cctv8hd.m3u8\">http://ivi.bupt.edu.cn/hls/cctv8hd.m3u8</a><br>CHC高清电影 <a href=\"http://ivi.bupt.edu.cn/hls/chchd.m3u8\">http://ivi.bupt.edu.cn/hls/chchd.m3u8</a><br>北京卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/btv1hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv1hd.m3u8</a><br>北京文艺高清 <a href=\"http://ivi.bupt.edu.cn/hls/btv2hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv2hd.m3u8</a><br>北京体育高清 <a href=\"http://ivi.bupt.edu.cn/hls/btv6hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv6hd.m3u8</a><br>北京纪实高清 <a href=\"http://ivi.bupt.edu.cn/hls/btv11hd.m3u8\">http://ivi.bupt.edu.cn/hls/btv11hd.m3u8</a><br>湖南卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/hunanhd.m3u8\">http://ivi.bupt.edu.cn/hls/hunanhd.m3u8</a><br>浙江卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/zjhd.m3u8\">http://ivi.bupt.edu.cn/hls/zjhd.m3u8</a><br>江苏卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/jshd.m3u8\">http://ivi.bupt.edu.cn/hls/jshd.m3u8</a><br>东方卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/dfhd.m3u8\">http://ivi.bupt.edu.cn/hls/dfhd.m3u8</a><br>安徽卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/ahhd.m3u8\">http://ivi.bupt.edu.cn/hls/ahhd.m3u8</a><br>黑龙江卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/hljhd.m3u8\">http://ivi.bupt.edu.cn/hls/hljhd.m3u8</a><br>辽宁卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/lnhd.m3u8\">http://ivi.bupt.edu.cn/hls/lnhd.m3u8</a><br>深圳卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/szhd.m3u8\">http://ivi.bupt.edu.cn/hls/szhd.m3u8</a><br>广东卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/gdhd.m3u8\">http://ivi.bupt.edu.cn/hls/gdhd.m3u8</a><br>天津卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/tjhd.m3u8\">http://ivi.bupt.edu.cn/hls/tjhd.m3u8</a><br>湖北卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/hbhd.m3u8\">http://ivi.bupt.edu.cn/hls/hbhd.m3u8</a><br>山东卫视高清 <a href=\"http://ivi.bupt.edu.cn/hls/sdhd.m3u8\">http://ivi.bupt.edu.cn/hls/sdhd.m3u8</a><h2 id=\"RTMP直播源地址：\"><a href=\"#RTMP直播源地址：\" class=\"headerlink\" title=\"RTMP直播源地址：\"></a>RTMP直播源地址：</h2>香港卫视：rtmp://live.hkstv.hk.lxdns.com/live/hks1<br>rtmp://live.hkstv.hk.lxdns.com/live/hks2<br>湖南卫视：rtmp://58.200.131.2:1935/livetv/hunantv<br>美国1：rtmp://ns8.indexforce.com/home/mystream<br>美国中文电视：rtmp://media3.sinovision.net:1935/live/livestream<br>香港财经：rtmp://202.69.69.180:443/webcast/bshdlive-pc<br>韩国GoodTV：rtmp://mobliestream.c3tv.com:554/live/goodtv.sdp</li>\n</ol>\n<hr>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/weixin_41010198/article/details/88055078\">https://blog.csdn.net/weixin_41010198/article/details/88055078</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_43990252/article/details/103493443\">https://blog.csdn.net/weixin_43990252/article/details/103493443</a></li>\n</ol>\n"},{"title":"数据结构-用顺序存储方式实现循环队列的 6 种情况 (C++)","date":"2022-03-04T02:20:34.000Z","_content":"## 用顺序存储方式实现循环队列的 6 种情况（可运行）\n\n王道书提到的 **线性队列** 实现的 6 种情况，其对应代码实现如下。\n为增加可读性使用 ANSI 代码设置输出文本颜色，Windows 系统建议使用 `powershell` 运行。\n\n```c++\n// test.cpp\n// 编译运行命令 g++ test.cpp -otest ; ./test\n#include <iostream>\nusing namespace std;\n#define MaxSize 10\n#define ElemType int\n// 队尾指针Q.rear的位置：\n//   (a)指向表尾的后一位   (b)指向表尾\n// 判断队满队空的三种方法：\n//   1. 牺牲存储单元  2.引入size变量   3.引入tag变量（true表示入队，false表示出队）\n\n// 注意：C++取模运算所得结果的符号与被除数相同。\n//a1\nstruct a1 { ElemType data[MaxSize]; int front, rear; };\nvoid InitQueue(a1 &Q) { Q.front = Q.rear = 0; }\nbool EnQueue(a1 &Q, ElemType x) { if ((Q.rear + 1) % MaxSize == Q.front) return false; Q.data[Q.rear] = x; Q.rear = (Q.rear + 1) % MaxSize; return true; }\nbool DeQueue(a1 &Q, ElemType &x) { if (Q.front == Q.rear) return false; x = Q.data[Q.front]; Q.front = (Q.front + 1) % MaxSize; return true; }\n//a2\nstruct a2 { ElemType data[MaxSize]; int front, rear, size; };\nvoid InitQueue(a2 &Q) { Q.front = Q.rear = Q.size = 0; }\nbool EnQueue(a2 &Q, ElemType x) { if (Q.size == MaxSize) return false; Q.data[Q.rear] = x; Q.rear = (Q.rear + 1) % MaxSize; Q.size++; return true; }\nbool DeQueue(a2 &Q, ElemType &x) { if (Q.size == 0) return false; x = Q.data[Q.front]; Q.front = (Q.front + 1) % MaxSize; Q.size--; return true; }\n//a3\nstruct a3 { ElemType data[MaxSize]; int front, rear; bool tag; };\nvoid InitQueue(a3 &Q) { Q.front = Q.rear = 0; Q.tag = false; }\nbool EnQueue(a3 &Q, ElemType x) { if (Q.front == Q.rear && Q.tag) return false; Q.data[Q.rear] = x; Q.rear = (Q.rear + 1) % MaxSize; Q.tag = true; return true; }\nbool DeQueue(a3 &Q, ElemType &x) { if (Q.front == Q.rear && !Q.tag) return false; x = Q.data[Q.front]; Q.front = (Q.front + 1) % MaxSize; Q.tag = false; return true; }\n//b1\nstruct b1 { ElemType data[MaxSize]; int front, rear; };\nvoid InitQueue(b1 &Q) { Q.front = 0; Q.rear = MaxSize - 1; }\nbool EnQueue(b1 &Q, ElemType x) { if ((Q.rear + 2) % MaxSize == Q.front) return false; Q.rear = (Q.rear + 1) % MaxSize; Q.data[Q.rear] = x; return true;}\nbool DeQueue(b1 &Q, ElemType &x) { if ((Q.rear + 1) % MaxSize == Q.front) return false; x = Q.data[Q.front]; Q.front = (Q.front + 1) % MaxSize; return true;}\n//b2\nstruct b2 { ElemType data[MaxSize]; int front, rear, size; };\nvoid InitQueue(b2 &Q) { Q.front = Q.size = 0; Q.rear = MaxSize - 1; }\nbool EnQueue(b2 &Q, ElemType x) { if (Q.size == MaxSize) return false; Q.rear = (Q.rear + 1) % MaxSize; Q.data[Q.rear] = x; Q.size++; return true; }\nbool DeQueue(b2 &Q, ElemType &x) { if (Q.size == 0) return false; x = Q.data[Q.front]; Q.front = (Q.front + 1) % MaxSize; Q.size--; return true; }\n//b3\nstruct b3 { ElemType data[MaxSize]; int front, rear; bool tag; };\nvoid InitQueue(b3 &Q) { Q.front = 0; Q.rear = -1; Q.tag = false; }\nbool EnQueue(b3 &Q, ElemType x) { if ((Q.rear + 1) % MaxSize == Q.front && Q.tag) return false; Q.rear = (Q.rear + 1) % MaxSize; Q.data[Q.rear] = x; Q.tag = true; return true; }\nbool DeQueue(b3 &Q, ElemType &x) { if ((Q.rear + 1) % MaxSize == Q.front && !Q.tag) return false; x = Q.data[Q.front]; Q.front = (Q.front + 1) % MaxSize; Q.tag = false; return true; }\n\nvoid PrintQueue(a1 &Q) { cout << \"- a1 \"; for (int i = 0; i < (Q.rear - Q.front + MaxSize) % MaxSize; i++) printf(\"\\e[33m%d\\e[0m|\", Q.data[(Q.front + i) % MaxSize]); cout << endl; }\nvoid PrintQueue(a2 &Q) { cout << \"- a2 \"; for (int i = 0; i < Q.size; i++) printf(\"\\e[33m%d\\e[0m|\", Q.data[(Q.front + i) % MaxSize]); cout << endl; }\nvoid PrintQueue(a3 &Q) { cout << \"- a3 \"; int size = ((Q.rear == Q.front) && Q.tag) ? MaxSize : (Q.rear - Q.front + MaxSize) % MaxSize; for (int i = 0; i < size; i++) printf(\"\\e[33m%d\\e[0m|\", Q.data[(Q.front + i) % MaxSize]); cout << endl; } \nvoid PrintQueue(b1 &Q) { cout << \"- b1 \"; for (int i = 0; i < (Q.rear - Q.front + 1 + MaxSize) % MaxSize; i++) printf(\"\\e[33m%d\\e[0m|\", Q.data[(Q.front + i) % MaxSize]); cout << endl; }\nvoid PrintQueue(b2 &Q) { cout << \"- b2 \"; for (int i = 0; i < Q.size; i++) printf(\"\\e[33m%d\\e[0m|\", Q.data[(Q.front + i) % MaxSize]); cout << endl; }\nvoid PrintQueue(b3 &Q) { cout << \"- b3 \"; int size = ((Q.rear - Q.front + 1) % MaxSize == 0 && Q.tag) ? MaxSize : (Q.rear - Q.front + 1 + MaxSize) % MaxSize; for (int i = 0; i < size; i++) printf(\"\\e[33m%d\\e[0m|\", Q.data[(Q.front + i) % MaxSize]); cout << endl; }\nvoid Do (bool fun, const char* msg) { if (!fun) printf(\"\\e[1;3;31m[%s]失败\\e[0m   \"); }\n\nvoid testQueue() {\n    printf(\"执行\\e[32m线性队列\\e[0m测试\\n\");\n    a1 a1; a2 a2; a3 a3; b1 b1; b2 b2; b3 b3;\n    InitQueue(a1); InitQueue(a2); InitQueue(a3); InitQueue(b1); InitQueue(b2); InitQueue(b3);\n    ///////////////////////\n    // 此处修改测试代码\n\n    // 把队列一次性填满\n    for (int i = 0; i < MaxSize; i++) { Do(EnQueue(a1, i + 1), \"a1入队\"); Do(EnQueue(a2, i + 1), \"a2入队\"); Do(EnQueue(a3, i + 1), \"a3入队\"); Do(EnQueue(b1, i + 1), \"b1入队\"); Do(EnQueue(b2, i + 1), \"b2入队\"); Do(EnQueue(b3, i + 1), \"b3入队\"); } cout << endl;\n    PrintQueue(a1); PrintQueue(a2); PrintQueue(a3); PrintQueue(b1); PrintQueue(b2); PrintQueue(b3);\n    printf(\"a1和b1各少了一个元素，恰好是通过\\e[33m牺牲一个元素位置\\e[0m来判断队空队满的体现。\\n\");\n\n    printf(\"\\n\\e[32m各出队 5 次\\e[0m\");\n    ElemType res = 0;\n    for (int i = 0; i < 5; i++) { Do(DeQueue(a1, res), \"a1出队\"); Do(DeQueue(a2, res), \"a2出队\"); Do(DeQueue(a3, res), \"a3出队\"); Do(DeQueue(b1, res), \"b1出队\"); Do(DeQueue(b2, res), \"b2出队\"); Do(DeQueue(b3, res), \"b3出队\"); } cout << endl;\n    PrintQueue(a1); PrintQueue(a2); PrintQueue(a3); PrintQueue(b1); PrintQueue(b2); PrintQueue(b3);\n\n    printf(\"\\n\\e[32m各入队 3 次\\e[0m\");\n    for (int i = 0; i < 3; i++) { Do(EnQueue(a1, i + 1), \"a1入队\"); Do(EnQueue(a2, i + 1), \"a2入队\"); Do(EnQueue(a3, i + 1), \"a3入队\"); Do(EnQueue(b1, i + 1), \"b1入队\"); Do(EnQueue(b2, i + 1), \"b2入队\"); Do(EnQueue(b3, i + 1), \"b3入队\"); } cout << endl;\n    PrintQueue(a1); PrintQueue(a2); PrintQueue(a3); PrintQueue(b1); PrintQueue(b2); PrintQueue(b3);\n\n    ///////////////////////\n    \n}\n\nint main(int argc, char const *argv[])\n{\n    testQueue();\n    cout << endl;\n    return 0;\n}\n\n```\n```bat\n@echo off\nchcp 65001 > nul\n@REM 文件名run.bat，运行程序的简易批处理脚本\n(g++ test.cpp -otest ) && (\n    echo 编译完成 正在执行\n    echo +++++++++++++++++++++\n    (test) && (\n        echo.\n        echo +++++++++++++++++++++\n        echo 执行完成\n    ) ||(\n        echo.\n        echo ---------------------\n        echo 程序执行出错)\n) || (echo 编译出错)\n@REM pause\n```","source":"_posts/数据结构-用顺序存储方式实现循环队列的 6 种情况 (C++).md","raw":"---\ntitle: 数据结构-用顺序存储方式实现循环队列的 6 种情况 (C++)\ndate: 2022-03-04 10:20:34\ntags:\n---\n## 用顺序存储方式实现循环队列的 6 种情况（可运行）\n\n王道书提到的 **线性队列** 实现的 6 种情况，其对应代码实现如下。\n为增加可读性使用 ANSI 代码设置输出文本颜色，Windows 系统建议使用 `powershell` 运行。\n\n```c++\n// test.cpp\n// 编译运行命令 g++ test.cpp -otest ; ./test\n#include <iostream>\nusing namespace std;\n#define MaxSize 10\n#define ElemType int\n// 队尾指针Q.rear的位置：\n//   (a)指向表尾的后一位   (b)指向表尾\n// 判断队满队空的三种方法：\n//   1. 牺牲存储单元  2.引入size变量   3.引入tag变量（true表示入队，false表示出队）\n\n// 注意：C++取模运算所得结果的符号与被除数相同。\n//a1\nstruct a1 { ElemType data[MaxSize]; int front, rear; };\nvoid InitQueue(a1 &Q) { Q.front = Q.rear = 0; }\nbool EnQueue(a1 &Q, ElemType x) { if ((Q.rear + 1) % MaxSize == Q.front) return false; Q.data[Q.rear] = x; Q.rear = (Q.rear + 1) % MaxSize; return true; }\nbool DeQueue(a1 &Q, ElemType &x) { if (Q.front == Q.rear) return false; x = Q.data[Q.front]; Q.front = (Q.front + 1) % MaxSize; return true; }\n//a2\nstruct a2 { ElemType data[MaxSize]; int front, rear, size; };\nvoid InitQueue(a2 &Q) { Q.front = Q.rear = Q.size = 0; }\nbool EnQueue(a2 &Q, ElemType x) { if (Q.size == MaxSize) return false; Q.data[Q.rear] = x; Q.rear = (Q.rear + 1) % MaxSize; Q.size++; return true; }\nbool DeQueue(a2 &Q, ElemType &x) { if (Q.size == 0) return false; x = Q.data[Q.front]; Q.front = (Q.front + 1) % MaxSize; Q.size--; return true; }\n//a3\nstruct a3 { ElemType data[MaxSize]; int front, rear; bool tag; };\nvoid InitQueue(a3 &Q) { Q.front = Q.rear = 0; Q.tag = false; }\nbool EnQueue(a3 &Q, ElemType x) { if (Q.front == Q.rear && Q.tag) return false; Q.data[Q.rear] = x; Q.rear = (Q.rear + 1) % MaxSize; Q.tag = true; return true; }\nbool DeQueue(a3 &Q, ElemType &x) { if (Q.front == Q.rear && !Q.tag) return false; x = Q.data[Q.front]; Q.front = (Q.front + 1) % MaxSize; Q.tag = false; return true; }\n//b1\nstruct b1 { ElemType data[MaxSize]; int front, rear; };\nvoid InitQueue(b1 &Q) { Q.front = 0; Q.rear = MaxSize - 1; }\nbool EnQueue(b1 &Q, ElemType x) { if ((Q.rear + 2) % MaxSize == Q.front) return false; Q.rear = (Q.rear + 1) % MaxSize; Q.data[Q.rear] = x; return true;}\nbool DeQueue(b1 &Q, ElemType &x) { if ((Q.rear + 1) % MaxSize == Q.front) return false; x = Q.data[Q.front]; Q.front = (Q.front + 1) % MaxSize; return true;}\n//b2\nstruct b2 { ElemType data[MaxSize]; int front, rear, size; };\nvoid InitQueue(b2 &Q) { Q.front = Q.size = 0; Q.rear = MaxSize - 1; }\nbool EnQueue(b2 &Q, ElemType x) { if (Q.size == MaxSize) return false; Q.rear = (Q.rear + 1) % MaxSize; Q.data[Q.rear] = x; Q.size++; return true; }\nbool DeQueue(b2 &Q, ElemType &x) { if (Q.size == 0) return false; x = Q.data[Q.front]; Q.front = (Q.front + 1) % MaxSize; Q.size--; return true; }\n//b3\nstruct b3 { ElemType data[MaxSize]; int front, rear; bool tag; };\nvoid InitQueue(b3 &Q) { Q.front = 0; Q.rear = -1; Q.tag = false; }\nbool EnQueue(b3 &Q, ElemType x) { if ((Q.rear + 1) % MaxSize == Q.front && Q.tag) return false; Q.rear = (Q.rear + 1) % MaxSize; Q.data[Q.rear] = x; Q.tag = true; return true; }\nbool DeQueue(b3 &Q, ElemType &x) { if ((Q.rear + 1) % MaxSize == Q.front && !Q.tag) return false; x = Q.data[Q.front]; Q.front = (Q.front + 1) % MaxSize; Q.tag = false; return true; }\n\nvoid PrintQueue(a1 &Q) { cout << \"- a1 \"; for (int i = 0; i < (Q.rear - Q.front + MaxSize) % MaxSize; i++) printf(\"\\e[33m%d\\e[0m|\", Q.data[(Q.front + i) % MaxSize]); cout << endl; }\nvoid PrintQueue(a2 &Q) { cout << \"- a2 \"; for (int i = 0; i < Q.size; i++) printf(\"\\e[33m%d\\e[0m|\", Q.data[(Q.front + i) % MaxSize]); cout << endl; }\nvoid PrintQueue(a3 &Q) { cout << \"- a3 \"; int size = ((Q.rear == Q.front) && Q.tag) ? MaxSize : (Q.rear - Q.front + MaxSize) % MaxSize; for (int i = 0; i < size; i++) printf(\"\\e[33m%d\\e[0m|\", Q.data[(Q.front + i) % MaxSize]); cout << endl; } \nvoid PrintQueue(b1 &Q) { cout << \"- b1 \"; for (int i = 0; i < (Q.rear - Q.front + 1 + MaxSize) % MaxSize; i++) printf(\"\\e[33m%d\\e[0m|\", Q.data[(Q.front + i) % MaxSize]); cout << endl; }\nvoid PrintQueue(b2 &Q) { cout << \"- b2 \"; for (int i = 0; i < Q.size; i++) printf(\"\\e[33m%d\\e[0m|\", Q.data[(Q.front + i) % MaxSize]); cout << endl; }\nvoid PrintQueue(b3 &Q) { cout << \"- b3 \"; int size = ((Q.rear - Q.front + 1) % MaxSize == 0 && Q.tag) ? MaxSize : (Q.rear - Q.front + 1 + MaxSize) % MaxSize; for (int i = 0; i < size; i++) printf(\"\\e[33m%d\\e[0m|\", Q.data[(Q.front + i) % MaxSize]); cout << endl; }\nvoid Do (bool fun, const char* msg) { if (!fun) printf(\"\\e[1;3;31m[%s]失败\\e[0m   \"); }\n\nvoid testQueue() {\n    printf(\"执行\\e[32m线性队列\\e[0m测试\\n\");\n    a1 a1; a2 a2; a3 a3; b1 b1; b2 b2; b3 b3;\n    InitQueue(a1); InitQueue(a2); InitQueue(a3); InitQueue(b1); InitQueue(b2); InitQueue(b3);\n    ///////////////////////\n    // 此处修改测试代码\n\n    // 把队列一次性填满\n    for (int i = 0; i < MaxSize; i++) { Do(EnQueue(a1, i + 1), \"a1入队\"); Do(EnQueue(a2, i + 1), \"a2入队\"); Do(EnQueue(a3, i + 1), \"a3入队\"); Do(EnQueue(b1, i + 1), \"b1入队\"); Do(EnQueue(b2, i + 1), \"b2入队\"); Do(EnQueue(b3, i + 1), \"b3入队\"); } cout << endl;\n    PrintQueue(a1); PrintQueue(a2); PrintQueue(a3); PrintQueue(b1); PrintQueue(b2); PrintQueue(b3);\n    printf(\"a1和b1各少了一个元素，恰好是通过\\e[33m牺牲一个元素位置\\e[0m来判断队空队满的体现。\\n\");\n\n    printf(\"\\n\\e[32m各出队 5 次\\e[0m\");\n    ElemType res = 0;\n    for (int i = 0; i < 5; i++) { Do(DeQueue(a1, res), \"a1出队\"); Do(DeQueue(a2, res), \"a2出队\"); Do(DeQueue(a3, res), \"a3出队\"); Do(DeQueue(b1, res), \"b1出队\"); Do(DeQueue(b2, res), \"b2出队\"); Do(DeQueue(b3, res), \"b3出队\"); } cout << endl;\n    PrintQueue(a1); PrintQueue(a2); PrintQueue(a3); PrintQueue(b1); PrintQueue(b2); PrintQueue(b3);\n\n    printf(\"\\n\\e[32m各入队 3 次\\e[0m\");\n    for (int i = 0; i < 3; i++) { Do(EnQueue(a1, i + 1), \"a1入队\"); Do(EnQueue(a2, i + 1), \"a2入队\"); Do(EnQueue(a3, i + 1), \"a3入队\"); Do(EnQueue(b1, i + 1), \"b1入队\"); Do(EnQueue(b2, i + 1), \"b2入队\"); Do(EnQueue(b3, i + 1), \"b3入队\"); } cout << endl;\n    PrintQueue(a1); PrintQueue(a2); PrintQueue(a3); PrintQueue(b1); PrintQueue(b2); PrintQueue(b3);\n\n    ///////////////////////\n    \n}\n\nint main(int argc, char const *argv[])\n{\n    testQueue();\n    cout << endl;\n    return 0;\n}\n\n```\n```bat\n@echo off\nchcp 65001 > nul\n@REM 文件名run.bat，运行程序的简易批处理脚本\n(g++ test.cpp -otest ) && (\n    echo 编译完成 正在执行\n    echo +++++++++++++++++++++\n    (test) && (\n        echo.\n        echo +++++++++++++++++++++\n        echo 执行完成\n    ) ||(\n        echo.\n        echo ---------------------\n        echo 程序执行出错)\n) || (echo 编译出错)\n@REM pause\n```","slug":"数据结构-用顺序存储方式实现循环队列的 6 种情况 (C++)","published":1,"updated":"2022-03-04T02:22:07.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0r9000frcsf4u6w9tq9","content":"<h2 id=\"用顺序存储方式实现循环队列的-6-种情况（可运行）\"><a href=\"#用顺序存储方式实现循环队列的-6-种情况（可运行）\" class=\"headerlink\" title=\"用顺序存储方式实现循环队列的 6 种情况（可运行）\"></a>用顺序存储方式实现循环队列的 6 种情况（可运行）</h2><p>王道书提到的 <strong>线性队列</strong> 实现的 6 种情况，其对应代码实现如下。<br>为增加可读性使用 ANSI 代码设置输出文本颜色，Windows 系统建议使用 <code>powershell</code> 运行。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.cpp</span></span><br><span class=\"line\"><span class=\"comment\">// 编译运行命令 g++ test.cpp -otest ; ./test</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ElemType int</span></span><br><span class=\"line\"><span class=\"comment\">// 队尾指针Q.rear的位置：</span></span><br><span class=\"line\"><span class=\"comment\">//   (a)指向表尾的后一位   (b)指向表尾</span></span><br><span class=\"line\"><span class=\"comment\">// 判断队满队空的三种方法：</span></span><br><span class=\"line\"><span class=\"comment\">//   1. 牺牲存储单元  2.引入size变量   3.引入tag变量（true表示入队，false表示出队）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意：C++取模运算所得结果的符号与被除数相同。</span></span><br><span class=\"line\"><span class=\"comment\">//a1</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">a1</span> &#123; ElemType data[MaxSize]; <span class=\"type\">int</span> front, rear; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(a1 &amp;Q)</span> </span>&#123; Q.front = Q.rear = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(a1 &amp;Q, ElemType x)</span> </span>&#123; <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; Q.data[Q.rear] = x; Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(a1 &amp;Q, ElemType &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.front == Q.rear) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; x = Q.data[Q.front]; Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">//a2</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">a2</span> &#123; ElemType data[MaxSize]; <span class=\"type\">int</span> front, rear, size; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(a2 &amp;Q)</span> </span>&#123; Q.front = Q.rear = Q.size = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(a2 &amp;Q, ElemType x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.size == MaxSize) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; Q.data[Q.rear] = x; Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; Q.size++; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(a2 &amp;Q, ElemType &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; x = Q.data[Q.front]; Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize; Q.size--; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">//a3</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">a3</span> &#123; ElemType data[MaxSize]; <span class=\"type\">int</span> front, rear; <span class=\"type\">bool</span> tag; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(a3 &amp;Q)</span> </span>&#123; Q.front = Q.rear = <span class=\"number\">0</span>; Q.tag = <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(a3 &amp;Q, ElemType x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.front == Q.rear &amp;&amp; Q.tag) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; Q.data[Q.rear] = x; Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; Q.tag = <span class=\"literal\">true</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(a3 &amp;Q, ElemType &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.front == Q.rear &amp;&amp; !Q.tag) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; x = Q.data[Q.front]; Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize; Q.tag = <span class=\"literal\">false</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">//b1</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">b1</span> &#123; ElemType data[MaxSize]; <span class=\"type\">int</span> front, rear; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(b1 &amp;Q)</span> </span>&#123; Q.front = <span class=\"number\">0</span>; Q.rear = MaxSize - <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(b1 &amp;Q, ElemType x)</span> </span>&#123; <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">2</span>) % MaxSize == Q.front) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; Q.data[Q.rear] = x; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(b1 &amp;Q, ElemType &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; x = Q.data[Q.front]; Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\"><span class=\"comment\">//b2</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">b2</span> &#123; ElemType data[MaxSize]; <span class=\"type\">int</span> front, rear, size; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(b2 &amp;Q)</span> </span>&#123; Q.front = Q.size = <span class=\"number\">0</span>; Q.rear = MaxSize - <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(b2 &amp;Q, ElemType x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.size == MaxSize) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; Q.data[Q.rear] = x; Q.size++; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(b2 &amp;Q, ElemType &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; x = Q.data[Q.front]; Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize; Q.size--; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">//b3</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">b3</span> &#123; ElemType data[MaxSize]; <span class=\"type\">int</span> front, rear; <span class=\"type\">bool</span> tag; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(b3 &amp;Q)</span> </span>&#123; Q.front = <span class=\"number\">0</span>; Q.rear = <span class=\"number\">-1</span>; Q.tag = <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(b3 &amp;Q, ElemType x)</span> </span>&#123; <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front &amp;&amp; Q.tag) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; Q.data[Q.rear] = x; Q.tag = <span class=\"literal\">true</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(b3 &amp;Q, ElemType &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front &amp;&amp; !Q.tag) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; x = Q.data[Q.front]; Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize; Q.tag = <span class=\"literal\">false</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintQueue</span><span class=\"params\">(a1 &amp;Q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;- a1 &quot;</span>; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (Q.rear - Q.front + MaxSize) % MaxSize; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[33m%d\\e[0m|&quot;</span>, Q.data[(Q.front + i) % MaxSize]); cout &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintQueue</span><span class=\"params\">(a2 &amp;Q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;- a2 &quot;</span>; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; Q.size; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[33m%d\\e[0m|&quot;</span>, Q.data[(Q.front + i) % MaxSize]); cout &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintQueue</span><span class=\"params\">(a3 &amp;Q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;- a3 &quot;</span>; <span class=\"type\">int</span> size = ((Q.rear == Q.front) &amp;&amp; Q.tag) ? MaxSize : (Q.rear - Q.front + MaxSize) % MaxSize; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[33m%d\\e[0m|&quot;</span>, Q.data[(Q.front + i) % MaxSize]); cout &lt;&lt; endl; &#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintQueue</span><span class=\"params\">(b1 &amp;Q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;- b1 &quot;</span>; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (Q.rear - Q.front + <span class=\"number\">1</span> + MaxSize) % MaxSize; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[33m%d\\e[0m|&quot;</span>, Q.data[(Q.front + i) % MaxSize]); cout &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintQueue</span><span class=\"params\">(b2 &amp;Q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;- b2 &quot;</span>; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; Q.size; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[33m%d\\e[0m|&quot;</span>, Q.data[(Q.front + i) % MaxSize]); cout &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintQueue</span><span class=\"params\">(b3 &amp;Q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;- b3 &quot;</span>; <span class=\"type\">int</span> size = ((Q.rear - Q.front + <span class=\"number\">1</span>) % MaxSize == <span class=\"number\">0</span> &amp;&amp; Q.tag) ? MaxSize : (Q.rear - Q.front + <span class=\"number\">1</span> + MaxSize) % MaxSize; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[33m%d\\e[0m|&quot;</span>, Q.data[(Q.front + i) % MaxSize]); cout &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Do</span> <span class=\"params\">(<span class=\"type\">bool</span> fun, <span class=\"type\">const</span> <span class=\"type\">char</span>* msg)</span> </span>&#123; <span class=\"keyword\">if</span> (!fun) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;3;31m[%s]失败\\e[0m   &quot;</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;执行\\e[32m线性队列\\e[0m测试\\n&quot;</span>);</span><br><span class=\"line\">    a1 a1; a2 a2; a3 a3; b1 b1; b2 b2; b3 b3;</span><br><span class=\"line\">    <span class=\"built_in\">InitQueue</span>(a1); <span class=\"built_in\">InitQueue</span>(a2); <span class=\"built_in\">InitQueue</span>(a3); <span class=\"built_in\">InitQueue</span>(b1); <span class=\"built_in\">InitQueue</span>(b2); <span class=\"built_in\">InitQueue</span>(b3);</span><br><span class=\"line\">    <span class=\"comment\">///////////////////////</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处修改测试代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把队列一次性填满</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; MaxSize; i++) &#123; <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(a1, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;a1入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(a2, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;a2入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(a3, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;a3入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(b1, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;b1入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(b2, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;b2入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(b3, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;b3入队&quot;</span>); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">PrintQueue</span>(a1); <span class=\"built_in\">PrintQueue</span>(a2); <span class=\"built_in\">PrintQueue</span>(a3); <span class=\"built_in\">PrintQueue</span>(b1); <span class=\"built_in\">PrintQueue</span>(b2); <span class=\"built_in\">PrintQueue</span>(b3);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a1和b1各少了一个元素，恰好是通过\\e[33m牺牲一个元素位置\\e[0m来判断队空队满的体现。\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n\\e[32m各出队 5 次\\e[0m&quot;</span>);</span><br><span class=\"line\">    ElemType res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123; <span class=\"built_in\">Do</span>(<span class=\"built_in\">DeQueue</span>(a1, res), <span class=\"string\">&quot;a1出队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">DeQueue</span>(a2, res), <span class=\"string\">&quot;a2出队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">DeQueue</span>(a3, res), <span class=\"string\">&quot;a3出队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">DeQueue</span>(b1, res), <span class=\"string\">&quot;b1出队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">DeQueue</span>(b2, res), <span class=\"string\">&quot;b2出队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">DeQueue</span>(b3, res), <span class=\"string\">&quot;b3出队&quot;</span>); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">PrintQueue</span>(a1); <span class=\"built_in\">PrintQueue</span>(a2); <span class=\"built_in\">PrintQueue</span>(a3); <span class=\"built_in\">PrintQueue</span>(b1); <span class=\"built_in\">PrintQueue</span>(b2); <span class=\"built_in\">PrintQueue</span>(b3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n\\e[32m各入队 3 次\\e[0m&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123; <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(a1, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;a1入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(a2, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;a2入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(a3, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;a3入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(b1, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;b1入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(b2, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;b2入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(b3, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;b3入队&quot;</span>); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">PrintQueue</span>(a1); <span class=\"built_in\">PrintQueue</span>(a2); <span class=\"built_in\">PrintQueue</span>(a3); <span class=\"built_in\">PrintQueue</span>(b1); <span class=\"built_in\">PrintQueue</span>(b2); <span class=\"built_in\">PrintQueue</span>(b3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///////////////////////</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">testQueue</span>();</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">chcp</span> <span class=\"number\">65001</span> &gt; <span class=\"built_in\">nul</span></span><br><span class=\"line\"><span class=\"comment\">@REM 文件名run.bat，运行程序的简易批处理脚本</span></span><br><span class=\"line\">(g++ test.cpp -otest ) &amp;&amp; (</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> 编译完成 正在执行</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> +++++++++++++++++++++</span><br><span class=\"line\">    (test) &amp;&amp; (</span><br><span class=\"line\">        <span class=\"built_in\">echo</span>.</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> +++++++++++++++++++++</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> 执行完成</span><br><span class=\"line\">    ) ||(</span><br><span class=\"line\">        <span class=\"built_in\">echo</span>.</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> ---------------------</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> 程序执行出错)</span><br><span class=\"line\">) || (<span class=\"built_in\">echo</span> 编译出错)</span><br><span class=\"line\"><span class=\"comment\">@REM pause</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"用顺序存储方式实现循环队列的-6-种情况（可运行）\"><a href=\"#用顺序存储方式实现循环队列的-6-种情况（可运行）\" class=\"headerlink\" title=\"用顺序存储方式实现循环队列的 6 种情况（可运行）\"></a>用顺序存储方式实现循环队列的 6 种情况（可运行）</h2><p>王道书提到的 <strong>线性队列</strong> 实现的 6 种情况，其对应代码实现如下。<br>为增加可读性使用 ANSI 代码设置输出文本颜色，Windows 系统建议使用 <code>powershell</code> 运行。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.cpp</span></span><br><span class=\"line\"><span class=\"comment\">// 编译运行命令 g++ test.cpp -otest ; ./test</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ElemType int</span></span><br><span class=\"line\"><span class=\"comment\">// 队尾指针Q.rear的位置：</span></span><br><span class=\"line\"><span class=\"comment\">//   (a)指向表尾的后一位   (b)指向表尾</span></span><br><span class=\"line\"><span class=\"comment\">// 判断队满队空的三种方法：</span></span><br><span class=\"line\"><span class=\"comment\">//   1. 牺牲存储单元  2.引入size变量   3.引入tag变量（true表示入队，false表示出队）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意：C++取模运算所得结果的符号与被除数相同。</span></span><br><span class=\"line\"><span class=\"comment\">//a1</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">a1</span> &#123; ElemType data[MaxSize]; <span class=\"type\">int</span> front, rear; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(a1 &amp;Q)</span> </span>&#123; Q.front = Q.rear = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(a1 &amp;Q, ElemType x)</span> </span>&#123; <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; Q.data[Q.rear] = x; Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(a1 &amp;Q, ElemType &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.front == Q.rear) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; x = Q.data[Q.front]; Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">//a2</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">a2</span> &#123; ElemType data[MaxSize]; <span class=\"type\">int</span> front, rear, size; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(a2 &amp;Q)</span> </span>&#123; Q.front = Q.rear = Q.size = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(a2 &amp;Q, ElemType x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.size == MaxSize) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; Q.data[Q.rear] = x; Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; Q.size++; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(a2 &amp;Q, ElemType &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; x = Q.data[Q.front]; Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize; Q.size--; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">//a3</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">a3</span> &#123; ElemType data[MaxSize]; <span class=\"type\">int</span> front, rear; <span class=\"type\">bool</span> tag; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(a3 &amp;Q)</span> </span>&#123; Q.front = Q.rear = <span class=\"number\">0</span>; Q.tag = <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(a3 &amp;Q, ElemType x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.front == Q.rear &amp;&amp; Q.tag) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; Q.data[Q.rear] = x; Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; Q.tag = <span class=\"literal\">true</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(a3 &amp;Q, ElemType &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.front == Q.rear &amp;&amp; !Q.tag) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; x = Q.data[Q.front]; Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize; Q.tag = <span class=\"literal\">false</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">//b1</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">b1</span> &#123; ElemType data[MaxSize]; <span class=\"type\">int</span> front, rear; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(b1 &amp;Q)</span> </span>&#123; Q.front = <span class=\"number\">0</span>; Q.rear = MaxSize - <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(b1 &amp;Q, ElemType x)</span> </span>&#123; <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">2</span>) % MaxSize == Q.front) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; Q.data[Q.rear] = x; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(b1 &amp;Q, ElemType &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; x = Q.data[Q.front]; Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\"><span class=\"comment\">//b2</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">b2</span> &#123; ElemType data[MaxSize]; <span class=\"type\">int</span> front, rear, size; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(b2 &amp;Q)</span> </span>&#123; Q.front = Q.size = <span class=\"number\">0</span>; Q.rear = MaxSize - <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(b2 &amp;Q, ElemType x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.size == MaxSize) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; Q.data[Q.rear] = x; Q.size++; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(b2 &amp;Q, ElemType &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> (Q.size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; x = Q.data[Q.front]; Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize; Q.size--; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">//b3</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">b3</span> &#123; ElemType data[MaxSize]; <span class=\"type\">int</span> front, rear; <span class=\"type\">bool</span> tag; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitQueue</span><span class=\"params\">(b3 &amp;Q)</span> </span>&#123; Q.front = <span class=\"number\">0</span>; Q.rear = <span class=\"number\">-1</span>; Q.tag = <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">EnQueue</span><span class=\"params\">(b3 &amp;Q, ElemType x)</span> </span>&#123; <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front &amp;&amp; Q.tag) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; Q.data[Q.rear] = x; Q.tag = <span class=\"literal\">true</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DeQueue</span><span class=\"params\">(b3 &amp;Q, ElemType &amp;x)</span> </span>&#123; <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front &amp;&amp; !Q.tag) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; x = Q.data[Q.front]; Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize; Q.tag = <span class=\"literal\">false</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintQueue</span><span class=\"params\">(a1 &amp;Q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;- a1 &quot;</span>; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (Q.rear - Q.front + MaxSize) % MaxSize; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[33m%d\\e[0m|&quot;</span>, Q.data[(Q.front + i) % MaxSize]); cout &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintQueue</span><span class=\"params\">(a2 &amp;Q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;- a2 &quot;</span>; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; Q.size; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[33m%d\\e[0m|&quot;</span>, Q.data[(Q.front + i) % MaxSize]); cout &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintQueue</span><span class=\"params\">(a3 &amp;Q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;- a3 &quot;</span>; <span class=\"type\">int</span> size = ((Q.rear == Q.front) &amp;&amp; Q.tag) ? MaxSize : (Q.rear - Q.front + MaxSize) % MaxSize; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[33m%d\\e[0m|&quot;</span>, Q.data[(Q.front + i) % MaxSize]); cout &lt;&lt; endl; &#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintQueue</span><span class=\"params\">(b1 &amp;Q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;- b1 &quot;</span>; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (Q.rear - Q.front + <span class=\"number\">1</span> + MaxSize) % MaxSize; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[33m%d\\e[0m|&quot;</span>, Q.data[(Q.front + i) % MaxSize]); cout &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintQueue</span><span class=\"params\">(b2 &amp;Q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;- b2 &quot;</span>; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; Q.size; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[33m%d\\e[0m|&quot;</span>, Q.data[(Q.front + i) % MaxSize]); cout &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintQueue</span><span class=\"params\">(b3 &amp;Q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;- b3 &quot;</span>; <span class=\"type\">int</span> size = ((Q.rear - Q.front + <span class=\"number\">1</span>) % MaxSize == <span class=\"number\">0</span> &amp;&amp; Q.tag) ? MaxSize : (Q.rear - Q.front + <span class=\"number\">1</span> + MaxSize) % MaxSize; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[33m%d\\e[0m|&quot;</span>, Q.data[(Q.front + i) % MaxSize]); cout &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Do</span> <span class=\"params\">(<span class=\"type\">bool</span> fun, <span class=\"type\">const</span> <span class=\"type\">char</span>* msg)</span> </span>&#123; <span class=\"keyword\">if</span> (!fun) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;3;31m[%s]失败\\e[0m   &quot;</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;执行\\e[32m线性队列\\e[0m测试\\n&quot;</span>);</span><br><span class=\"line\">    a1 a1; a2 a2; a3 a3; b1 b1; b2 b2; b3 b3;</span><br><span class=\"line\">    <span class=\"built_in\">InitQueue</span>(a1); <span class=\"built_in\">InitQueue</span>(a2); <span class=\"built_in\">InitQueue</span>(a3); <span class=\"built_in\">InitQueue</span>(b1); <span class=\"built_in\">InitQueue</span>(b2); <span class=\"built_in\">InitQueue</span>(b3);</span><br><span class=\"line\">    <span class=\"comment\">///////////////////////</span></span><br><span class=\"line\">    <span class=\"comment\">// 此处修改测试代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把队列一次性填满</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; MaxSize; i++) &#123; <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(a1, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;a1入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(a2, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;a2入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(a3, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;a3入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(b1, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;b1入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(b2, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;b2入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(b3, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;b3入队&quot;</span>); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">PrintQueue</span>(a1); <span class=\"built_in\">PrintQueue</span>(a2); <span class=\"built_in\">PrintQueue</span>(a3); <span class=\"built_in\">PrintQueue</span>(b1); <span class=\"built_in\">PrintQueue</span>(b2); <span class=\"built_in\">PrintQueue</span>(b3);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a1和b1各少了一个元素，恰好是通过\\e[33m牺牲一个元素位置\\e[0m来判断队空队满的体现。\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n\\e[32m各出队 5 次\\e[0m&quot;</span>);</span><br><span class=\"line\">    ElemType res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123; <span class=\"built_in\">Do</span>(<span class=\"built_in\">DeQueue</span>(a1, res), <span class=\"string\">&quot;a1出队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">DeQueue</span>(a2, res), <span class=\"string\">&quot;a2出队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">DeQueue</span>(a3, res), <span class=\"string\">&quot;a3出队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">DeQueue</span>(b1, res), <span class=\"string\">&quot;b1出队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">DeQueue</span>(b2, res), <span class=\"string\">&quot;b2出队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">DeQueue</span>(b3, res), <span class=\"string\">&quot;b3出队&quot;</span>); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">PrintQueue</span>(a1); <span class=\"built_in\">PrintQueue</span>(a2); <span class=\"built_in\">PrintQueue</span>(a3); <span class=\"built_in\">PrintQueue</span>(b1); <span class=\"built_in\">PrintQueue</span>(b2); <span class=\"built_in\">PrintQueue</span>(b3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n\\e[32m各入队 3 次\\e[0m&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123; <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(a1, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;a1入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(a2, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;a2入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(a3, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;a3入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(b1, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;b1入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(b2, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;b2入队&quot;</span>); <span class=\"built_in\">Do</span>(<span class=\"built_in\">EnQueue</span>(b3, i + <span class=\"number\">1</span>), <span class=\"string\">&quot;b3入队&quot;</span>); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">PrintQueue</span>(a1); <span class=\"built_in\">PrintQueue</span>(a2); <span class=\"built_in\">PrintQueue</span>(a3); <span class=\"built_in\">PrintQueue</span>(b1); <span class=\"built_in\">PrintQueue</span>(b2); <span class=\"built_in\">PrintQueue</span>(b3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///////////////////////</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">testQueue</span>();</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">chcp</span> <span class=\"number\">65001</span> &gt; <span class=\"built_in\">nul</span></span><br><span class=\"line\"><span class=\"comment\">@REM 文件名run.bat，运行程序的简易批处理脚本</span></span><br><span class=\"line\">(g++ test.cpp -otest ) &amp;&amp; (</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> 编译完成 正在执行</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> +++++++++++++++++++++</span><br><span class=\"line\">    (test) &amp;&amp; (</span><br><span class=\"line\">        <span class=\"built_in\">echo</span>.</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> +++++++++++++++++++++</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> 执行完成</span><br><span class=\"line\">    ) ||(</span><br><span class=\"line\">        <span class=\"built_in\">echo</span>.</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> ---------------------</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> 程序执行出错)</span><br><span class=\"line\">) || (<span class=\"built_in\">echo</span> 编译出错)</span><br><span class=\"line\"><span class=\"comment\">@REM pause</span></span><br></pre></td></tr></table></figure>"},{"title":"数据结构-二叉树相关代码","date":"2022-03-04T02:20:34.000Z","_content":"\n<!--\n * @Description: \n * @Version: 1.0\n * @Author: hccodec\n * @Date: 2021-09-15 15:57:08\n * @LastEditors: hccodec\n * @LastEditTime: 2021-09-15 16:05:42\n-->\n\n\n可用 `g++ test.cpp -otest; ./test` 命令运行\n\n#### 测试文件\n\n```cpp\n/*\n * @Description: test.cpp 文件\n * @Version: 1.0\n * @Author: hccodec\n * @Date: 2021-09-08 17:02:41\n * @LastEditors: hccodec\n * @LastEditTime: 2021-09-15 16:03:34\n */\n#include <iostream>\nusing namespace std;\n#include \"BiTree.cpp\"\n\nconst char *args[] = {\"先序\", \"中序\", \"后序\", \"层序\"};\n\n/** 测试输出\n * @param {BiTree} *T 递归输出所用二叉树\n * @param {ElemType} * 存放原结果及三种线索化结果的数组\n * @return {*}\n */\nvoid TestOutput(BiTree *T, ElemType **res) {\n    printf(\"\\e[0m递归    \"); for (int i = 1; i <= 3; i++) { printf(\"\\e[0m[\\e[32m%s\\e[0m] \\e[33m\", args[i - 1]); T->PrintRecursion(i); } cout << endl;\n    printf(\"\\e[0m非递归  \"); for (int i = 1; i <= 3; i++) { printf(\"\\e[0m[\\e[32m%s\\e[0m] \\e[33m\", args[i - 1]); res[i - 1] = T->GetOutput(i, true); } cout << endl;\n}\n\nvoid TestInThread(BiTree **Trees) {\n    printf(\"->线索化\\n\");\n    printf(\"\\e[0m正向输出\");\n    for (int i = 0; i < 3; i++) { printf(\"\\e[0m[\\e[32m%s\\e[0m] \\e[33m\", args[i]); Trees[i + 1]->InOrder(); } cout << endl;\n    printf(\"\\e[0m逆向输出\");\n    for (int i = 0; i < 3; i++) { printf(\"\\e[0m[\\e[32m%s\\e[0m] \\e[33m\", args[i]); Trees[i + 1]->RevInOrder(); } cout << endl;\n}\n\nvoid TestPrePost(BiTree **Trees) {\n    printf(\"->\\e[1;36m前驱\\e[1;35m后继\\n\");\n\n    for (int i = 1; i <= 3; i++)\n    {\n        BiTree *Tmp = Trees[i]; TNode *p, *q = Tmp->FirstNode();\n        printf(\"\\e[0m[\\e[32m%s\\e[0m] \", args[i - 1]);\n        for (int j = 0; j < Tmp->count; j++) {\n            p = q;\n            if (Tmp->PreNode(p)) printf(\"\\e[1;36m%2c\\e[0;33m\", Tmp->PreNode(p)->data);\n            else printf(\"\\e[0;36m .\\e[0;33m\");\n            printf(\"%2c\", p->data);\n            if (Tmp->NextNode(p)) printf(\"\\e[1;35m%2c\\e[0;33m\", Tmp->NextNode(p)->data);\n            else printf(\"\\e[0;35m .\\e[0;33m\");\n            cout << \" |\";\n            q = Tmp->NextNode(q);\n        }\n        cout << \"\\b \" << endl;\n    }\n}\n\nvoid TestSimiliar(BiTree *A, BiTree *B) {\n    printf(\"两树%s相似\\n\", A->IsSimiliar(A->T, B->T) ? \"\" : \"不\");\n}\n\nvoid test()\n{\n    ElemType *A = (char*)\"ABCDEFG\";\n    ElemType *B = (char*)\"CBDAFEG\";\n    // ElemType *A = (char*)\"ABCDEFGHI\", *B = (char*)\"BCAEDGHFI\";\n    BiTree *T, *PreBiTree, *InBiTree, *PostBiTree;\n    // Tree *Tmp = (new BiTree(T))->InThread(1);\n    T = new BiTree(A, B);\n    PreBiTree = (new BiTree(A, B))->InThread(1);\n    InBiTree = (new BiTree(A, B))->InThread(2);\n    PostBiTree = (new BiTree(A, B))->InThread(3);\n    BiTree *Trees[4] = {T, PreBiTree, InBiTree, PostBiTree};\n    ElemType *res[4]; // 存放结果序列的数组\n\n    printf(\"\\n\\e[0m[\\e[32m%s\\e[0m输出] \\e[33m\", args[3]); res[3] = T->GetOutput(4, true); cout << \"\\e[0m\" << endl; T->PrettyPrint(true);\n\n    /////////////////////////////////////////////////////////////\n\n    TestOutput(T, res);\n    TestInThread(Trees);\n    TestPrePost(Trees);\n    \n    cout << \"\\e[0m\";\n    return;\n}\n\nint main(int argc, char const *argv[])\n{\n    test();\n    cout << endl;\n    (new BiTree())->PrettyPrint(true);\n    return 0;\n}\n\n```\n\n#### 二叉树源文件\n\n```cpp\n/*\n * @Description: 二叉树类文件\n * @Version: 1.0\n * @Author: hccidec\n * @Date: 2021-09-14 20:10:46\n * @LastEditors: hccodec\n * @LastEditTime: 2021-09-15 16:01:33\n */\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <stack>\n\nusing namespace std;\n#define ElemType char\n\nclass Util {\n    public:\n    class MyException\n    {\n        public:\n        protected:\n        int code;\n    };\n\n    static ElemType *BubbleSort(ElemType const X[], int const n) {\n        return NULL;\n        ElemType tmp; ElemType *res = (char*)X;\n        printf(\"%s %d  \", res, n);\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < n - 1; j++)\n                if (res[j] > res[j + 1]) {\n                    tmp = res[j];\n                    printf(\" res[%d] {%c} = res[%d] {%c}\", j, res[j], j + 1, res[j + 1]);\n                    res[j] = res[j + 1];\n                    res[j + 1] = tmp;\n                }\n        return res;\n    }\n};\n\nstruct TNode { ElemType data; TNode *lchild, *rchild, *parent; int ltag, rtag; };\n\nbool print = true;\n\nclass BiTree\n{\npublic:\n    TNode *T = NULL;\n    int height = 0, width = 0, count = 0, size = 0; // 树的宽、高、节点数和所占位置总数\n    char *repr_string;\n    int mode = 0; // 0 表示未被线索化, 1-3 分别表示 先序线索化、中序线索化、后序线索化\n\n    BiTree() { Reset(); GetInfo(); }\n    BiTree(ElemType const *Pre, ElemType const *In, bool bias = 0) {\n        if (Util::BubbleSort(Pre, strlen(Pre)) - Util::BubbleSort(In, strlen(In)) != 0) {\n            printf(\"输入序列\\e[32m!\\e[0m> 序列 \\e[33m%s\\e[0m(先序) 与序列 \\e[33m%s\\e[0m(中序)不合法\", Pre, In);\n            Reset();\n        }\n        else {\n            if (print) printf(\"\\e[32m!\\e[0m> 由序列 \\e[33m%s\\e[0m(先序) \\e[33m%s\\e[0m(中序)\", Pre, In);\n            // printf(\"Pre = %s, In = %s, 1 = %d, nPre = %d, 1 = %d, nIn = %d\\n\", Pre, In, 1, nPre, 1, nIn);\n            try {\n                T = PreInCre(Pre, In, 0, strlen(Pre) - 1, 0, strlen(In) - 1); count++;\n                // throw 0.5;\n            }\n            catch(double) {\n                cerr << \"\\n\\e[1;31m发生异常\\e[0m\"; exit(0);\n            }\n        }\n        GetInfo();\n        if (print) printf(\" 生成%s\\e[0m二叉树\\n\", IsComplete() ? (IsFull() ? \"\\e[1;32m满\\e[0m\" : \"完全\") : \"普通\");\n    }\n    BiTree(BiTree *T) { this->T = T->T; this->mode = T->mode; GetInfo(); }\n\n    /** 获取结点\n     * @param {ElemType} e 所获结点的数据域的值\n     * @return {*}\n     */\n    TNode * GetNode(ElemType e) {\n        queue<TNode*> q; TNode *p = T; q.push(p);\n        while(!q.empty()) {\n            if (q.front()->data == e) return q.front();\n            else {\n                p = q.front();\n                if (ExistChild(p, 0)) q.push(p->lchild);\n                if (ExistChild(p, 1)) q.push(p->rchild);\n                q.pop();\n            }\n        }\n        printf(\"未找到结点 %c\\n\", e);\n        return NULL;\n    }\n\n    void GetInfo () {\n        queue<ElemType> q; queue<TNode*> _q; q.push(T->data); _q.push(T); TNode *p = FirstNode(T); int tmp = 0;\n        while(tmp < count - 1) {\n            p = _q.front();\n            if (ExistChild(p, 0)) { _q.push(p->lchild); q.push(p->lchild->data); tmp++; }\n            else { q.push('^'); _q.push(NewNode('^')); }\n            if (ExistChild(p, 1)) { _q.push(p->rchild); q.push(p->rchild->data); tmp++; }\n            else { q.push('^'); _q.push(NewNode('^')); }\n            _q.pop();\n        }\n        size = q.size();\n        height = floor(log2(size + 1)) + (log2(size + 1) - floor(log2(size + 1)) == 0 ? 0 : 1);\n        repr_string = new ElemType[size]; for (int i = 0; i < size; i++) { repr_string[i] = q.front(); q.pop(); }\n    }\n\n    /** 创建新结点\n     * @param {ElemType} e 要创建的结点的数据域的值\n     * @return {*}\n     */\n    TNode * NewNode(ElemType e) {\n        TNode *p;\n        try{\n            p = new(nothrow) TNode;\n        }catch(bad_alloc &memExp) {\n            cerr << memExp.what() << endl;\n            printf(\"出现异常\");\n        }\n        p->data = e;\n        p->lchild = p->rchild = p->parent = NULL;\n        p->ltag = p->rtag = 0;\n        return p;\n    }\n\n    /** 添加新结点\n     * @param {ElemType} target 其父结点\n     * @param {ElemType} e      要添加的内容\n     * @param {int} side        添加位置（左孩子为0，右孩子为1）\n     * @return {*}\n     */\n    BiTree * AddNode(ElemType target, ElemType e, int side) {\n        TNode *p = GetNode(target);\n        TNode *q = NewNode(e);\n        return AddNode(p, q, side);\n    }\n\n    /** 添加新结点\n     * @param {TNode} *target   其父结点\n     * @param {ElemType} e      要添加的内容\n     * @param {int} side        添加位置（左孩子为0，右孩子为1）\n     * @return {*}\n     */\n    BiTree * AddNode(TNode *target, ElemType e, int side) {\n        TNode *q = NewNode(e);\n        return AddNode(target, q, side);\n    }\n\n    /** 添加新结点\n     * @param {TNode} *target   其父结点\n     * @param {TNode} *e        要添加的内容\n     * @param {int} side        添加位置（左孩子为0，右孩子为1）\n     * @return {*}\n     */\n    BiTree * AddNode(TNode *target, TNode *e, int side) {\n        if (!target) { printf(\"\\e[1;31m要添加的位置不存在，无法添加结点‘%c’\\e[0m\\n\", e->data); return this; }\n        // if (mode != 0) { printf(\"\\e[1;31m暂时不支持向线索化的树\\e[0m\\n\"); return this; }\n        if(ExistChild(target, side)) {\n            printf(\"\\e[1;31m结点‘%c’要插入的位置'%c'已有%s结点\\e[0m\\n\", e->data, target->data, side == 0 ? \"左\" : (side == 1 ? \"右\" : \"×\")); return this;}\n        if (side != 0 && side != 1) { printf(\"\\e[1;31m添加位置不合法，添加位置（左孩子为0，右孩子为1）\\e[0m\\n\"); return this;}\n        if (side == 0) { target->lchild = e;}\n        else if (side == 1) { target->rchild = e;}\n        count++; e->parent = target;\n        return this;\n    }\n\n    /** 更改指定结点\n     * @param {ElemType} target 其父结点\n     * @param {ElemType} e      要添加的内容\n     * @param {int} side        添加位置（左孩子为0，右孩子为1）\n     * @return {*}\n     */\n    BiTree * ChangeNode(ElemType target, ElemType e) {\n        TNode *p = GetNode(target);\n        return ChangeNode(p, e);\n    }\n\n    /** 更改指定结点\n     * @param {TNode} *target   其父结点\n     * @param {ElemType} e      要添加的内容\n     * @param {int} side        添加位置（左孩子为0，右孩子为1）\n     * @return {*}\n     */\n    BiTree * ChangeNode(TNode *target, ElemType e) {\n        if (!target) { printf(\"\\e[1;31m未找到该结点，无法添加\\e[0m\\n\"); return this; }\n        target->data = e;\n        return this;\n    }\n\n    /** 判断是否存在子节点\n     * @param {TNode} *p 要判断的结点\n     * @param {int} side 0表示左，1表示右\n     * @return {*}\n     */\n    bool ExistChild(TNode *p, int side) {\n        if (!p) { printf(\"结点为空 \"); return false; }\n        switch (side) {\n            case 0: return p->lchild && p->ltag == 0;\n            case 1: return p->rchild && p->rtag == 0;\n            default: printf(\"程序有误请检查\"); return false;\n        }\n    }\n\n    void Reset()\n    {\n        T = NewNode('A'); count++; this\n        ->AddNode('A', 'B', 0)\n        ->AddNode('A', 'C', 1)\n        ->AddNode('B', 'D', 0)\n        ->AddNode('B', 'E', 1)\n        ->AddNode('C', 'F', 0)\n        ->AddNode('D', 'G', 1)\n        ->AddNode('F', 'I', 1)\n        ->AddNode('E', 'H', 0);\n    }\n\n    /** 首结点\n     * @param {TNode} *p\n     * @return {*}\n     */\n    TNode * FirstNode(TNode *p = NULL) {\n        if (!p) p = T;\n        switch (mode) {\n            case 1: return p;\n            case 2: while (p->ltag == 0) { p = p->lchild; } return p;\n            case 3: while (true) { if (p->ltag == 0) p = p->lchild; else if (p->rtag == 0) p = p->rchild; else return p; } break;\n            default: break;\n        }\n        return T;\n    }\n\n    /** 尾结点\n     * @param {TNode} *p\n     * @return {*}\n     */\n    TNode * LastNode(TNode *p = NULL) {\n        if (!p) p = T;\n        switch (mode) {\n            case 1: while (true) { if (p->rtag == 0) p = p->rchild; else if (p->ltag == 0) p = p->lchild; else return p; }\n            case 2: while (p->rtag == 0) { p = p->rchild; } return p;\n            case 3: return p;\n            default: break;\n        }\n        return NULL;\n    }\n\n    /** 前驱结点\n     * @param {TNode} *p\n     * @return {*}\n     */\n    TNode * PreNode(TNode *p) {\n        switch (mode) {\n            case 1:\n                if (!p->parent) return NULL;\n                else if (p->parent->lchild == p) return p->parent; // 如果是左节点\n                else if (p->parent->ltag == 1) return p->parent;\n                else return LastNode(p->parent->lchild); //左节点存在，返回左子树最后一个结点\n            case 2:\n                if (p->ltag == 0) return LastNode(p->lchild);\n                return p->lchild;\n            case 3:\n                if (p->ltag == 0 && p->rtag == 0) return p->rchild;\n                return p->lchild;\n            default: break;\n        }\n        return NULL;\n    }\n\n    /** 后继结点\n     * @param {TNode} *p\n     * @return {*}\n     */\n    TNode * NextNode(TNode *p) {\n        switch (mode) {\n            case 1:\n                if (p->rtag == 0 && p->ltag == 0) return p->lchild;\n                return p->rchild;\n            case 2:\n                if (p->rtag == 0) return FirstNode(p->rchild);\n                return p->rchild;\n            case 3:\n                if (!p->parent) return NULL;\n                else if (p->parent->rchild == p) return p->parent;\n                else if (p->parent->rtag == 1) return p->parent;\n                else return FirstNode(p->parent->rchild);\n            default: break;\n        }\n        return NULL;\n    }\n\n    void InOrder() {\n        for (TNode *p = FirstNode(T); p; p = NextNode(p)) printf(\"%c \", p->data);\n    }\n    void RevInOrder() {\n        for (TNode *p = LastNode(T); p; p = PreNode(p)) printf(\"%c \", p->data);\n    }\n\n    /** 递归打印\n     * @param {int} type 1-3分别表示【先序、中序、后序】\n     * @return {*}\n     */\n    void PrintRecursion(int type)\n    {\n        switch (type)\n        {\n        case 1:\n            return _Print1(T);\n        case 2:\n            return _Print2(T);\n        case 3:\n            return _Print3(T);\n        default:\n            printf(\"\\e[1;31m[PrintRecursion] 类型错误，请输入正确类型：\\e[0;33m1-3分别表示【先序、中序、后序】\\e[0m\");\n        }\n    }\n\n    /** 非递归打印\n     * @param {int} type 1-4 分别表示【先序、中序、后序、层序】\n     * @param {bool} out out = true 表示输出\n     * @return {*}\n     */\n    ElemType * GetOutput(int type, bool out = false)\n    {\n        if (mode != 0) {\n            printf(\"非递归打印不支持已被线索化的二叉树。因代码直接访问 lchild 和 rchild 指针而未对其指向左右孩子或指向线索化的前驱后继这两种情况进行判断。\\n\");\n            // printf(\"(%d) \", mode);\n            return NULL;\n        }\n        TNode *p = T, *pre = NULL; queue<ElemType> q;\n        stack<TNode *> s; // 辅助栈\n        int tag = 0; // 入栈tag=0；出栈tag=1\n        switch (type)\n        {\n        case 1:\n            while (p || !s.empty())\n                if (p) { if (out) printf(\"%c \", p->data); q.push(p->data); s.push(p); p = ExistChild(p, 0) ? p->lchild : NULL; }\n                else { p = s.top(); p = ExistChild(p, 1) ? p->rchild : NULL; s.pop(); }\n            break;\n        case 2:\n            while (p || !s.empty())\n                if (p) { s.push(p); p = ExistChild(p, 0) ? p->lchild : NULL; }\n                else\n                { p = s.top(); if (out) printf(\"%c \", p->data); q.push(p->data); s.pop(); p = ExistChild(p, 1) ? p->rchild : NULL; }\n            break;\n        case 3:\n            while (p || !s.empty())\n            { // 以下提供了未线索化和已线索化两种实现方式的代码示例\n                if (mode == 0)\n                {\n                    if (tag == 0) { // tag表示非递归遍历的当前操作是入栈（tag=0）还是出栈（tag=1）\n                        // 若为入栈操作则左子结点优先于右子结点入栈\n                        if (p->lchild) { s.push(p); pre = p; p = p->lchild; }\n                        else if (p->rchild) { s.push(p); pre = p; p = p->rchild; }\n                        // 否则为叶子结点。将其入栈并通过标记tag=1控制下一操作改为出栈\n                        else { if (out) printf(\"%c \", p->data); q.push(p->data); pre = p; p = s.top(); tag = 1; }\n                    }\n                    else { \n                        // 出栈，仅需判断当前结点（栈顶元素）是否有未被遍历的右子结点\n                        if (!p->rchild) { pre = p; if (out) printf(\"%c \", p->data); q.push(p->data); s.pop(); p = s.top(); } // 没有右子结点\n                        else {\n                            if (pre == p->rchild) { if (out) printf(\"%c \", p->data); q.push(p->data); pre = p; s.pop(); if (!s.empty()) p = s.top(); else break; }\n                            else { pre = p; p = p->rchild; tag = 0; }\n                        }\n                    }\n                }\n                else\n                {\n                    if (p) { s.push(p); p = ExistChild(p, 0) ? p->lchild : NULL; }\n                    else {\n                        p = s.top();\n                        if (ExistChild(p, 1) && p->rchild != pre) p = p->rchild;\n                        else {\n                            p = s.top();\n                            if (out) printf(\"%c \", p->data);\n                            pre = p;\n                            p = NULL;\n                            s.pop();\n                        }\n                    }\n                }\n            }\n            break;\n        case 4:\n            return _Print4(T, true);\n        default:\n            printf(\"检查type变量，type 1-4 分别表示【先序、中序、后序、层序】\");\n            break;\n        }\n        int size = q.size();\n        ElemType *res = new ElemType[size + 1];\n        for (int i = 1; i <= size; i++)\n        {\n            res[i] = q.front();\n            q.pop();\n        }\n        return res;\n    }\n\n    TNode * FindPreByPointer(ElemType e, int type) {\n        TNode *pre = NULL;\n        switch (type)\n        {\n        case 1:\n            _FindPreByPointer1(T, e, pre);\n            break;\n        case 2:\n            _FindPreByPointer2(T, e, pre);\n            break;\n        case 3:\n            _FindPreByPointer3(T, e, pre);\n            break;\n        default:\n            printf(\"\\e[1;31m类型错误，请输入正确类型：\\e[0;33m1-4分别表示【先序、中序、后序、层序】\\e[0m\");\n            break;\n        }\n        return final;\n    }\n    \n    /** 线索化\n     * @param {int} type 1-3分别表示【先序、中序、后序】\n     * @return {*}\n     */\n    BiTree * InThread(int type) {\n        TNode *pre = NULL;\n        switch (type)\n        {\n        case 1:\n            if (print) printf(\"[先序线索化]\\n\"); _InThread1(T, pre);\n            mode = 1;\n            break;\n        case 2:\n            if (print) printf(\"[中序线索化]\\n\"); _InThread2(T, pre);\n            mode = 2;\n            break;\n        case 3:\n            if (print) printf(\"[后序线索化]\\n\"); _InThread3(T, pre);\n            mode = 3;\n            break;\n        default:\n            printf(\"\\e[1;31m类型错误，请输入正确类型：\\e[0;33m1-3分别表示【先序、中序、后序】\\e[0m\\n\");\n            mode = type;\n            break;\n        }\n\n        //关于该 if 语句：分析线索化过程知，先序（根左右）和中序（左根右）的尾结点必再无右子结点\n        if (pre) if (!(pre->rchild && pre->rtag == 0)) pre->rtag = 1;\n\n        return this;\n    }\n\n    /** 去线索化\n     * @param {*}\n     * @return {*}\n     */\n    BiTree * UnThread() {\n        if (mode == 0) return this;\n        mode = 0;\n        _UnThread(T);\n        return this;\n    }\n\n    void _UnThread(TNode *T) {\n        if (!T) return;\n        if (T->ltag == 0) _UnThread(T->lchild);\n        if (T->ltag == 1) { T->lchild = NULL; T->ltag = 0; }\n        if (T->rtag == 1) { T->rchild = NULL; T->rtag = 0; }\n        if (T->rtag == 0) _UnThread(T->rchild);\n    }\n\n    /** 按格式打印当前树，支持线索化树\n     * @param {TNode} *T 根结点\n     * @return {*}\n     */\n    BiTree * PrettyPrint(bool printinfo = false, TNode *T = NULL) {\n        if (!T) T = this->T;\n        else {\n            queue<ElemType> q; queue<TNode*> _q; q.push(T->data); _q.push(T); TNode *p = FirstNode(T); int tmp = 0;\n            while(tmp < count - 1) {\n                p = _q.front();\n                if (ExistChild(p, 0)) { _q.push(p->lchild); q.push(p->lchild->data); tmp++; }\n                else { q.push('^'); _q.push(NewNode('^')); }\n                if (ExistChild(p, 1)) { _q.push(p->rchild); q.push(p->rchild->data); tmp++; }\n                else { q.push('^'); _q.push(NewNode('^')); }\n                _q.pop();\n        }\n        size = q.size();\n        height = floor(log2(size + 1)) + (log2(size + 1) - floor(log2(size + 1)) == 0 ? 0 : 1);\n        repr_string = new ElemType[size]; for (int i = 0; i < size; i++) { repr_string[i] = q.front(); q.pop(); }}\n        int i = 0, j = 0;\n        if (printinfo) printf(\"[结点数] \\e[32m%d\\e[0m，[所占位置] \\e[32m%d\\e[0m，[树高(层数)] \\e[32m%d\\e[0m [序列字符串] \\e[32m%s\\e[0m \\n\\e[33m\", count, size, height, repr_string);\n        for (int i = 0; i < 2 * pow(2, height - 1) - 1; i++) printf(\"--\"); cout << endl;\n        for (i = 1, j = 1; i <= size; i++) {\n            if (i == pow(2, j - 1)) { for (int k = 0; k < pow(2, height - j) - 1; k++) printf(\"  \"); }   // 行前空格(判据：当前是否为行首)\n            if (repr_string[i - 1] == '^') printf(\" .\"); else printf(\"%2c\", repr_string[i - 1]);\n            if (i == pow(2, j) - 1) { cout << endl; j++; }                                          // 换行(判据：当前是否为上一行行尾)\n            else{\n                for (int k = 1; k < pow(2, height - j + 1); k++) printf(\"  \");\n            }                  //行中空格\n        }\n        if (i != pow(2, j - 1)) cout << endl;\n        for (int i = 0; i < 2 * pow(2, height - 1) - 1; i++) printf(\"--\");\n        printf(\"\\e[0m\\n\");\n        return this;\n    }\n\n    int GetHeight(TNode *T = NULL, bool print = false) {\n        if (!T) { if (this->T) T = this->T; } else return 0;\n        queue<TNode*> q;\n        TNode *p = T, *last = T; int level = 0;\n        q.push(p); if (print) cout << \"\\n\";\n        while (!q.empty())\n        {\n            if (print) cout << \"[\";\n            p = q.front();\n            if (ExistChild(p, 0)) q.push(p->lchild);\n            if (ExistChild(p, 1)) q.push(p->rchild);\n            if (p == last) { if (print) printf(\"(到%c)\", last->data); level++; last = q.back();}\n            q.pop();\n            if (print) { queue <TNode*> Q = q; while(!Q.empty()) { cout<<\" \"<<Q.front()->data; Q.pop(); } }\n            if (print) cout << \"] \";\n\n        }\n        return level;\n\n    }\n\n    /** 递归方式实现根据先序和中序序列建立新二叉树\n     * @param {ElemType *} A    先序序列\n     * @param {ElemType *} B    中序序列\n     * @param {int} l1          先序 序列 首 结点下标\n     * @param {int} h1          先序 序列 尾 结点下标\n     * @param {int} l2          中序 序列 首 结点下标\n     * @param {int} h2          中序 序列 尾 结点下标\n     * @param {int} bias        数组指针偏移量，默认数组从下标 1 开始\n     * @param {bool} cover      是否覆盖原树，默认为false (不覆盖)\n     * @return {*}\n     */\n    TNode * PreInCre(ElemType const * A, ElemType const * B, int l1, int h1, int l2, int h2, int bias = 0, bool cover = false) {\n        // printf(\"{{欲添加 A[%d] = %c}} l1=%d, l2=%d, h1=%d, h2=%d\\n\", l1, A[l1], l1, l2, h1, h2);\n        TNode *p;\n        try {\n            p = NewNode(A[l1]); // 根结点\n        }\n        catch (exception&) {\n            throw(33);\n        }\n        int i; for (i = l2; B[i] != p->data; i++); // 划分中序序列\n        // printf(\"%d:%c \", i, p->data);\n        int llen = i - l2, rlen = h2 - i;\n        // printf(\"{{添加 %c}} llen=%d, rlen=%d, l1=%d, l2=%d, h1=%d, h2=%d\\n\", p->data, llen, rlen, l1, l2, h1, h2);\n        if (llen) AddNode(p, PreInCre(A, B, l1 + 1, l1 + llen, l2, l2 + llen - 1), 0);\n        else p->lchild = NULL;\n        if (rlen) AddNode(p, PreInCre(A, B, h1 - rlen + 1, h1, h2 - rlen + 1, h2), 1);\n        else p->rchild = NULL;\n        return p;\n    }\n    \n    /** 判断二叉树是否为完全二叉树\n     * @param {TNode} *T\n     * @return {*}\n     */\n    bool IsComplete (TNode *T = NULL) {\n        if (!T) T = this->T;\n        queue<TNode*> q; TNode *p = T; q.push(p);\n        while(!q.empty()) {\n            p = q.front(); q.pop();\n            if (p) {\n                if (p->ltag == 0) q.push(p->lchild);\n                if (p->rtag == 0) q.push(p->rchild);\n            }\n            else while(!q.empty()) {\n                p = q.front(); q.pop();\n                if (p) return false;\n            }\n        }\n        return true;\n    }\n\n    /** 判断二叉树是否为满二叉树\n     * @param {TNode} *T\n     * @return {*}\n     */\n    bool IsFull (TNode *T = NULL) {\n        return IsComplete() && count == size;\n    }\n\n    /** 判断两个二叉树是否相似\n     * @param {TNode} *T1\n     * @param {TNode} *T2\n     * @return {*}\n     */\n    bool IsSimiliar(TNode *T1, TNode *T2) {\n        bool left = 0, right = 0;\n        if (!T1 && !T2) return true;\n        if (!T1 || !T2) return false;\n        left = IsSimiliar(ExistChild(T1, 0) ? T1->lchild : NULL, ExistChild(T2, 0) ? T2->lchild : NULL);\n        right = IsSimiliar(ExistChild(T1, 1) ? T1->rchild : NULL, ExistChild(T2, 1) ? T2->rchild : NULL);\n        return left && right;\n    }\n\nprivate:\n    TNode *final = NULL; // 用土办法找到中序前驱的结果\n\n    // 递归打印 start //////////////////////////////\n\n    void _Print1(TNode *T)\n    {\n        if (T)\n        {\n            printf(\"%c \", T->data);\n            if (ExistChild(T, 0)) _Print1(T->lchild);\n            if (ExistChild(T, 1)) _Print1(T->rchild);\n        }\n    }\n    void _Print2(TNode *T)\n    {\n        if (T)\n        {\n            if (ExistChild(T, 0)) _Print2(T->lchild);\n            printf(\"%c \", T->data);\n            if (ExistChild(T, 1)) _Print2(T->rchild);\n        }\n    }\n    void _Print3(TNode *T)\n    {\n        if (T)\n        {\n            if (ExistChild(T, 0)) _Print3(T->lchild);\n            if (ExistChild(T, 1)) _Print3(T->rchild);\n            printf(\"%c \", T->data);\n        }\n    }\n    ElemType * _Print4(TNode *T, bool out = false)\n    {\n        queue<ElemType> q; // 存放最终结果的队列\n        queue<TNode *> _q; // 层序遍历的辅助队列\n        _q.push(T);\n        while (!_q.empty())\n        {\n            q.push(_q.front()->data);\n            if (ExistChild(_q.front(), 0)) _q.push(_q.front()->lchild);\n            if (ExistChild(_q.front(), 1)) _q.push(_q.front()->rchild);\n            _q.pop();\n        }\n        int size = q.size();\n        ElemType *res = new ElemType[size];\n        for (int i = 0; i < size; i++)\n        {\n            res[i] = q.front();\n            if (out) printf(\"%c \", q.front());\n            q.pop();\n        }\n        return res;\n    }\n\n    // 递归打印 end /////////////////////////////////\n    // 指针法找前驱 start ///////////////////////////\n\n    void _FindPreByPointer1(TNode *T, ElemType e, TNode *&pre)\n    {\n        if (mode == 0 && T)\n        {\n            if (T->data == e) final = pre; pre = T;\n            _FindPreByPointer1(T->lchild, e, pre);\n            _FindPreByPointer1(T->rchild, e, pre);\n        }\n        else if (mode != 0) { printf(\"\\e[31m此二叉树已被线索化 \"); }\n    }\n    void _FindPreByPointer2(TNode *T, ElemType e, TNode *&pre)\n    {\n        if (mode == 0 && T)\n        {\n            _FindPreByPointer2(T->lchild, e, pre);\n            if (T->data == e) final = pre; pre = T;\n            _FindPreByPointer2(T->rchild, e, pre);\n        }\n        else if (mode != 0) { printf(\"\\e[31m此二叉树已被线索化 \"); }\n    }\n    void _FindPreByPointer3(TNode *T, ElemType e, TNode *&pre)\n    {\n        if (mode == 0 && T)\n        {\n            _FindPreByPointer3(T->lchild, e, pre);\n            _FindPreByPointer3(T->rchild, e, pre);\n            if (T->data == e) final = pre; pre = T;\n        }\n        else if (mode != 0) { printf(\"\\e[31m此二叉树已被线索化 \"); }\n    }\n    \n    // 指针法找前驱 end /////////////////////////////\n    // 线索化 start ////////////////////////////////\n\n    void _InThread1(TNode *T, TNode *&pre)\n    {\n        if (!T) return;\n        if (!T->lchild) { T->lchild = pre; T->ltag = 1; }\n        if (pre && !pre->rchild) { pre->rchild = T; pre->rtag = 1; }\n        pre = T; //printf(\"%c \", pre->data);\n        if (T->ltag == 0) _InThread1(T->lchild, pre);\n        if (T->rtag == 0) _InThread1(T->rchild, pre);\n    }\n    void _InThread2(TNode *T, TNode *&pre)\n    {\n        if (T)\n        {\n            _InThread2(T->lchild, pre);\n            if (!T->lchild) { T->lchild = pre; T->ltag = 1; }\n            if (pre && !pre->rchild) { pre->rchild = T; pre->rtag = 1; }\n            pre = T; //printf(\"%c \", pre->data);\n            _InThread2(T->rchild, pre);\n        }\n    }\n    void _InThread3(TNode *T, TNode *&pre)\n    {\n        if (!T) return;\n        _InThread3(T->lchild, pre);\n        _InThread3(T->rchild, pre);\n        if (!T->lchild) { T->lchild = pre; T->ltag = 1;\n            // printf(\"%c->lchild ==> %c\\n\", T->data, pre?pre->data:'+');\n        }\n        if (pre && !pre->rchild) { pre->rchild = T; pre->rtag = 1;\n            // printf(\"%c->rchild ==> %c\\n\", pre ? pre->data : '+', T->data);\n        }\n        // else { printf(\"  %c->lchild = %c，且 pre \", T->data, T->lchild ? T->lchild->data : '+'); pre ? printf(\"= %c\\n\", pre->data) : printf(\"不存在\\n\"); }\n        pre = T;\n    }\n\n    // 线索化代码区 end /////////////////////////////\n\n};\n\n```","source":"_posts/数据结构-二叉树相关代码.md","raw":"---\ntitle: 数据结构-二叉树相关代码\ndate: 2022-03-04 10:20:34\ntags:\n---\n\n<!--\n * @Description: \n * @Version: 1.0\n * @Author: hccodec\n * @Date: 2021-09-15 15:57:08\n * @LastEditors: hccodec\n * @LastEditTime: 2021-09-15 16:05:42\n-->\n\n\n可用 `g++ test.cpp -otest; ./test` 命令运行\n\n#### 测试文件\n\n```cpp\n/*\n * @Description: test.cpp 文件\n * @Version: 1.0\n * @Author: hccodec\n * @Date: 2021-09-08 17:02:41\n * @LastEditors: hccodec\n * @LastEditTime: 2021-09-15 16:03:34\n */\n#include <iostream>\nusing namespace std;\n#include \"BiTree.cpp\"\n\nconst char *args[] = {\"先序\", \"中序\", \"后序\", \"层序\"};\n\n/** 测试输出\n * @param {BiTree} *T 递归输出所用二叉树\n * @param {ElemType} * 存放原结果及三种线索化结果的数组\n * @return {*}\n */\nvoid TestOutput(BiTree *T, ElemType **res) {\n    printf(\"\\e[0m递归    \"); for (int i = 1; i <= 3; i++) { printf(\"\\e[0m[\\e[32m%s\\e[0m] \\e[33m\", args[i - 1]); T->PrintRecursion(i); } cout << endl;\n    printf(\"\\e[0m非递归  \"); for (int i = 1; i <= 3; i++) { printf(\"\\e[0m[\\e[32m%s\\e[0m] \\e[33m\", args[i - 1]); res[i - 1] = T->GetOutput(i, true); } cout << endl;\n}\n\nvoid TestInThread(BiTree **Trees) {\n    printf(\"->线索化\\n\");\n    printf(\"\\e[0m正向输出\");\n    for (int i = 0; i < 3; i++) { printf(\"\\e[0m[\\e[32m%s\\e[0m] \\e[33m\", args[i]); Trees[i + 1]->InOrder(); } cout << endl;\n    printf(\"\\e[0m逆向输出\");\n    for (int i = 0; i < 3; i++) { printf(\"\\e[0m[\\e[32m%s\\e[0m] \\e[33m\", args[i]); Trees[i + 1]->RevInOrder(); } cout << endl;\n}\n\nvoid TestPrePost(BiTree **Trees) {\n    printf(\"->\\e[1;36m前驱\\e[1;35m后继\\n\");\n\n    for (int i = 1; i <= 3; i++)\n    {\n        BiTree *Tmp = Trees[i]; TNode *p, *q = Tmp->FirstNode();\n        printf(\"\\e[0m[\\e[32m%s\\e[0m] \", args[i - 1]);\n        for (int j = 0; j < Tmp->count; j++) {\n            p = q;\n            if (Tmp->PreNode(p)) printf(\"\\e[1;36m%2c\\e[0;33m\", Tmp->PreNode(p)->data);\n            else printf(\"\\e[0;36m .\\e[0;33m\");\n            printf(\"%2c\", p->data);\n            if (Tmp->NextNode(p)) printf(\"\\e[1;35m%2c\\e[0;33m\", Tmp->NextNode(p)->data);\n            else printf(\"\\e[0;35m .\\e[0;33m\");\n            cout << \" |\";\n            q = Tmp->NextNode(q);\n        }\n        cout << \"\\b \" << endl;\n    }\n}\n\nvoid TestSimiliar(BiTree *A, BiTree *B) {\n    printf(\"两树%s相似\\n\", A->IsSimiliar(A->T, B->T) ? \"\" : \"不\");\n}\n\nvoid test()\n{\n    ElemType *A = (char*)\"ABCDEFG\";\n    ElemType *B = (char*)\"CBDAFEG\";\n    // ElemType *A = (char*)\"ABCDEFGHI\", *B = (char*)\"BCAEDGHFI\";\n    BiTree *T, *PreBiTree, *InBiTree, *PostBiTree;\n    // Tree *Tmp = (new BiTree(T))->InThread(1);\n    T = new BiTree(A, B);\n    PreBiTree = (new BiTree(A, B))->InThread(1);\n    InBiTree = (new BiTree(A, B))->InThread(2);\n    PostBiTree = (new BiTree(A, B))->InThread(3);\n    BiTree *Trees[4] = {T, PreBiTree, InBiTree, PostBiTree};\n    ElemType *res[4]; // 存放结果序列的数组\n\n    printf(\"\\n\\e[0m[\\e[32m%s\\e[0m输出] \\e[33m\", args[3]); res[3] = T->GetOutput(4, true); cout << \"\\e[0m\" << endl; T->PrettyPrint(true);\n\n    /////////////////////////////////////////////////////////////\n\n    TestOutput(T, res);\n    TestInThread(Trees);\n    TestPrePost(Trees);\n    \n    cout << \"\\e[0m\";\n    return;\n}\n\nint main(int argc, char const *argv[])\n{\n    test();\n    cout << endl;\n    (new BiTree())->PrettyPrint(true);\n    return 0;\n}\n\n```\n\n#### 二叉树源文件\n\n```cpp\n/*\n * @Description: 二叉树类文件\n * @Version: 1.0\n * @Author: hccidec\n * @Date: 2021-09-14 20:10:46\n * @LastEditors: hccodec\n * @LastEditTime: 2021-09-15 16:01:33\n */\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <stack>\n\nusing namespace std;\n#define ElemType char\n\nclass Util {\n    public:\n    class MyException\n    {\n        public:\n        protected:\n        int code;\n    };\n\n    static ElemType *BubbleSort(ElemType const X[], int const n) {\n        return NULL;\n        ElemType tmp; ElemType *res = (char*)X;\n        printf(\"%s %d  \", res, n);\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < n - 1; j++)\n                if (res[j] > res[j + 1]) {\n                    tmp = res[j];\n                    printf(\" res[%d] {%c} = res[%d] {%c}\", j, res[j], j + 1, res[j + 1]);\n                    res[j] = res[j + 1];\n                    res[j + 1] = tmp;\n                }\n        return res;\n    }\n};\n\nstruct TNode { ElemType data; TNode *lchild, *rchild, *parent; int ltag, rtag; };\n\nbool print = true;\n\nclass BiTree\n{\npublic:\n    TNode *T = NULL;\n    int height = 0, width = 0, count = 0, size = 0; // 树的宽、高、节点数和所占位置总数\n    char *repr_string;\n    int mode = 0; // 0 表示未被线索化, 1-3 分别表示 先序线索化、中序线索化、后序线索化\n\n    BiTree() { Reset(); GetInfo(); }\n    BiTree(ElemType const *Pre, ElemType const *In, bool bias = 0) {\n        if (Util::BubbleSort(Pre, strlen(Pre)) - Util::BubbleSort(In, strlen(In)) != 0) {\n            printf(\"输入序列\\e[32m!\\e[0m> 序列 \\e[33m%s\\e[0m(先序) 与序列 \\e[33m%s\\e[0m(中序)不合法\", Pre, In);\n            Reset();\n        }\n        else {\n            if (print) printf(\"\\e[32m!\\e[0m> 由序列 \\e[33m%s\\e[0m(先序) \\e[33m%s\\e[0m(中序)\", Pre, In);\n            // printf(\"Pre = %s, In = %s, 1 = %d, nPre = %d, 1 = %d, nIn = %d\\n\", Pre, In, 1, nPre, 1, nIn);\n            try {\n                T = PreInCre(Pre, In, 0, strlen(Pre) - 1, 0, strlen(In) - 1); count++;\n                // throw 0.5;\n            }\n            catch(double) {\n                cerr << \"\\n\\e[1;31m发生异常\\e[0m\"; exit(0);\n            }\n        }\n        GetInfo();\n        if (print) printf(\" 生成%s\\e[0m二叉树\\n\", IsComplete() ? (IsFull() ? \"\\e[1;32m满\\e[0m\" : \"完全\") : \"普通\");\n    }\n    BiTree(BiTree *T) { this->T = T->T; this->mode = T->mode; GetInfo(); }\n\n    /** 获取结点\n     * @param {ElemType} e 所获结点的数据域的值\n     * @return {*}\n     */\n    TNode * GetNode(ElemType e) {\n        queue<TNode*> q; TNode *p = T; q.push(p);\n        while(!q.empty()) {\n            if (q.front()->data == e) return q.front();\n            else {\n                p = q.front();\n                if (ExistChild(p, 0)) q.push(p->lchild);\n                if (ExistChild(p, 1)) q.push(p->rchild);\n                q.pop();\n            }\n        }\n        printf(\"未找到结点 %c\\n\", e);\n        return NULL;\n    }\n\n    void GetInfo () {\n        queue<ElemType> q; queue<TNode*> _q; q.push(T->data); _q.push(T); TNode *p = FirstNode(T); int tmp = 0;\n        while(tmp < count - 1) {\n            p = _q.front();\n            if (ExistChild(p, 0)) { _q.push(p->lchild); q.push(p->lchild->data); tmp++; }\n            else { q.push('^'); _q.push(NewNode('^')); }\n            if (ExistChild(p, 1)) { _q.push(p->rchild); q.push(p->rchild->data); tmp++; }\n            else { q.push('^'); _q.push(NewNode('^')); }\n            _q.pop();\n        }\n        size = q.size();\n        height = floor(log2(size + 1)) + (log2(size + 1) - floor(log2(size + 1)) == 0 ? 0 : 1);\n        repr_string = new ElemType[size]; for (int i = 0; i < size; i++) { repr_string[i] = q.front(); q.pop(); }\n    }\n\n    /** 创建新结点\n     * @param {ElemType} e 要创建的结点的数据域的值\n     * @return {*}\n     */\n    TNode * NewNode(ElemType e) {\n        TNode *p;\n        try{\n            p = new(nothrow) TNode;\n        }catch(bad_alloc &memExp) {\n            cerr << memExp.what() << endl;\n            printf(\"出现异常\");\n        }\n        p->data = e;\n        p->lchild = p->rchild = p->parent = NULL;\n        p->ltag = p->rtag = 0;\n        return p;\n    }\n\n    /** 添加新结点\n     * @param {ElemType} target 其父结点\n     * @param {ElemType} e      要添加的内容\n     * @param {int} side        添加位置（左孩子为0，右孩子为1）\n     * @return {*}\n     */\n    BiTree * AddNode(ElemType target, ElemType e, int side) {\n        TNode *p = GetNode(target);\n        TNode *q = NewNode(e);\n        return AddNode(p, q, side);\n    }\n\n    /** 添加新结点\n     * @param {TNode} *target   其父结点\n     * @param {ElemType} e      要添加的内容\n     * @param {int} side        添加位置（左孩子为0，右孩子为1）\n     * @return {*}\n     */\n    BiTree * AddNode(TNode *target, ElemType e, int side) {\n        TNode *q = NewNode(e);\n        return AddNode(target, q, side);\n    }\n\n    /** 添加新结点\n     * @param {TNode} *target   其父结点\n     * @param {TNode} *e        要添加的内容\n     * @param {int} side        添加位置（左孩子为0，右孩子为1）\n     * @return {*}\n     */\n    BiTree * AddNode(TNode *target, TNode *e, int side) {\n        if (!target) { printf(\"\\e[1;31m要添加的位置不存在，无法添加结点‘%c’\\e[0m\\n\", e->data); return this; }\n        // if (mode != 0) { printf(\"\\e[1;31m暂时不支持向线索化的树\\e[0m\\n\"); return this; }\n        if(ExistChild(target, side)) {\n            printf(\"\\e[1;31m结点‘%c’要插入的位置'%c'已有%s结点\\e[0m\\n\", e->data, target->data, side == 0 ? \"左\" : (side == 1 ? \"右\" : \"×\")); return this;}\n        if (side != 0 && side != 1) { printf(\"\\e[1;31m添加位置不合法，添加位置（左孩子为0，右孩子为1）\\e[0m\\n\"); return this;}\n        if (side == 0) { target->lchild = e;}\n        else if (side == 1) { target->rchild = e;}\n        count++; e->parent = target;\n        return this;\n    }\n\n    /** 更改指定结点\n     * @param {ElemType} target 其父结点\n     * @param {ElemType} e      要添加的内容\n     * @param {int} side        添加位置（左孩子为0，右孩子为1）\n     * @return {*}\n     */\n    BiTree * ChangeNode(ElemType target, ElemType e) {\n        TNode *p = GetNode(target);\n        return ChangeNode(p, e);\n    }\n\n    /** 更改指定结点\n     * @param {TNode} *target   其父结点\n     * @param {ElemType} e      要添加的内容\n     * @param {int} side        添加位置（左孩子为0，右孩子为1）\n     * @return {*}\n     */\n    BiTree * ChangeNode(TNode *target, ElemType e) {\n        if (!target) { printf(\"\\e[1;31m未找到该结点，无法添加\\e[0m\\n\"); return this; }\n        target->data = e;\n        return this;\n    }\n\n    /** 判断是否存在子节点\n     * @param {TNode} *p 要判断的结点\n     * @param {int} side 0表示左，1表示右\n     * @return {*}\n     */\n    bool ExistChild(TNode *p, int side) {\n        if (!p) { printf(\"结点为空 \"); return false; }\n        switch (side) {\n            case 0: return p->lchild && p->ltag == 0;\n            case 1: return p->rchild && p->rtag == 0;\n            default: printf(\"程序有误请检查\"); return false;\n        }\n    }\n\n    void Reset()\n    {\n        T = NewNode('A'); count++; this\n        ->AddNode('A', 'B', 0)\n        ->AddNode('A', 'C', 1)\n        ->AddNode('B', 'D', 0)\n        ->AddNode('B', 'E', 1)\n        ->AddNode('C', 'F', 0)\n        ->AddNode('D', 'G', 1)\n        ->AddNode('F', 'I', 1)\n        ->AddNode('E', 'H', 0);\n    }\n\n    /** 首结点\n     * @param {TNode} *p\n     * @return {*}\n     */\n    TNode * FirstNode(TNode *p = NULL) {\n        if (!p) p = T;\n        switch (mode) {\n            case 1: return p;\n            case 2: while (p->ltag == 0) { p = p->lchild; } return p;\n            case 3: while (true) { if (p->ltag == 0) p = p->lchild; else if (p->rtag == 0) p = p->rchild; else return p; } break;\n            default: break;\n        }\n        return T;\n    }\n\n    /** 尾结点\n     * @param {TNode} *p\n     * @return {*}\n     */\n    TNode * LastNode(TNode *p = NULL) {\n        if (!p) p = T;\n        switch (mode) {\n            case 1: while (true) { if (p->rtag == 0) p = p->rchild; else if (p->ltag == 0) p = p->lchild; else return p; }\n            case 2: while (p->rtag == 0) { p = p->rchild; } return p;\n            case 3: return p;\n            default: break;\n        }\n        return NULL;\n    }\n\n    /** 前驱结点\n     * @param {TNode} *p\n     * @return {*}\n     */\n    TNode * PreNode(TNode *p) {\n        switch (mode) {\n            case 1:\n                if (!p->parent) return NULL;\n                else if (p->parent->lchild == p) return p->parent; // 如果是左节点\n                else if (p->parent->ltag == 1) return p->parent;\n                else return LastNode(p->parent->lchild); //左节点存在，返回左子树最后一个结点\n            case 2:\n                if (p->ltag == 0) return LastNode(p->lchild);\n                return p->lchild;\n            case 3:\n                if (p->ltag == 0 && p->rtag == 0) return p->rchild;\n                return p->lchild;\n            default: break;\n        }\n        return NULL;\n    }\n\n    /** 后继结点\n     * @param {TNode} *p\n     * @return {*}\n     */\n    TNode * NextNode(TNode *p) {\n        switch (mode) {\n            case 1:\n                if (p->rtag == 0 && p->ltag == 0) return p->lchild;\n                return p->rchild;\n            case 2:\n                if (p->rtag == 0) return FirstNode(p->rchild);\n                return p->rchild;\n            case 3:\n                if (!p->parent) return NULL;\n                else if (p->parent->rchild == p) return p->parent;\n                else if (p->parent->rtag == 1) return p->parent;\n                else return FirstNode(p->parent->rchild);\n            default: break;\n        }\n        return NULL;\n    }\n\n    void InOrder() {\n        for (TNode *p = FirstNode(T); p; p = NextNode(p)) printf(\"%c \", p->data);\n    }\n    void RevInOrder() {\n        for (TNode *p = LastNode(T); p; p = PreNode(p)) printf(\"%c \", p->data);\n    }\n\n    /** 递归打印\n     * @param {int} type 1-3分别表示【先序、中序、后序】\n     * @return {*}\n     */\n    void PrintRecursion(int type)\n    {\n        switch (type)\n        {\n        case 1:\n            return _Print1(T);\n        case 2:\n            return _Print2(T);\n        case 3:\n            return _Print3(T);\n        default:\n            printf(\"\\e[1;31m[PrintRecursion] 类型错误，请输入正确类型：\\e[0;33m1-3分别表示【先序、中序、后序】\\e[0m\");\n        }\n    }\n\n    /** 非递归打印\n     * @param {int} type 1-4 分别表示【先序、中序、后序、层序】\n     * @param {bool} out out = true 表示输出\n     * @return {*}\n     */\n    ElemType * GetOutput(int type, bool out = false)\n    {\n        if (mode != 0) {\n            printf(\"非递归打印不支持已被线索化的二叉树。因代码直接访问 lchild 和 rchild 指针而未对其指向左右孩子或指向线索化的前驱后继这两种情况进行判断。\\n\");\n            // printf(\"(%d) \", mode);\n            return NULL;\n        }\n        TNode *p = T, *pre = NULL; queue<ElemType> q;\n        stack<TNode *> s; // 辅助栈\n        int tag = 0; // 入栈tag=0；出栈tag=1\n        switch (type)\n        {\n        case 1:\n            while (p || !s.empty())\n                if (p) { if (out) printf(\"%c \", p->data); q.push(p->data); s.push(p); p = ExistChild(p, 0) ? p->lchild : NULL; }\n                else { p = s.top(); p = ExistChild(p, 1) ? p->rchild : NULL; s.pop(); }\n            break;\n        case 2:\n            while (p || !s.empty())\n                if (p) { s.push(p); p = ExistChild(p, 0) ? p->lchild : NULL; }\n                else\n                { p = s.top(); if (out) printf(\"%c \", p->data); q.push(p->data); s.pop(); p = ExistChild(p, 1) ? p->rchild : NULL; }\n            break;\n        case 3:\n            while (p || !s.empty())\n            { // 以下提供了未线索化和已线索化两种实现方式的代码示例\n                if (mode == 0)\n                {\n                    if (tag == 0) { // tag表示非递归遍历的当前操作是入栈（tag=0）还是出栈（tag=1）\n                        // 若为入栈操作则左子结点优先于右子结点入栈\n                        if (p->lchild) { s.push(p); pre = p; p = p->lchild; }\n                        else if (p->rchild) { s.push(p); pre = p; p = p->rchild; }\n                        // 否则为叶子结点。将其入栈并通过标记tag=1控制下一操作改为出栈\n                        else { if (out) printf(\"%c \", p->data); q.push(p->data); pre = p; p = s.top(); tag = 1; }\n                    }\n                    else { \n                        // 出栈，仅需判断当前结点（栈顶元素）是否有未被遍历的右子结点\n                        if (!p->rchild) { pre = p; if (out) printf(\"%c \", p->data); q.push(p->data); s.pop(); p = s.top(); } // 没有右子结点\n                        else {\n                            if (pre == p->rchild) { if (out) printf(\"%c \", p->data); q.push(p->data); pre = p; s.pop(); if (!s.empty()) p = s.top(); else break; }\n                            else { pre = p; p = p->rchild; tag = 0; }\n                        }\n                    }\n                }\n                else\n                {\n                    if (p) { s.push(p); p = ExistChild(p, 0) ? p->lchild : NULL; }\n                    else {\n                        p = s.top();\n                        if (ExistChild(p, 1) && p->rchild != pre) p = p->rchild;\n                        else {\n                            p = s.top();\n                            if (out) printf(\"%c \", p->data);\n                            pre = p;\n                            p = NULL;\n                            s.pop();\n                        }\n                    }\n                }\n            }\n            break;\n        case 4:\n            return _Print4(T, true);\n        default:\n            printf(\"检查type变量，type 1-4 分别表示【先序、中序、后序、层序】\");\n            break;\n        }\n        int size = q.size();\n        ElemType *res = new ElemType[size + 1];\n        for (int i = 1; i <= size; i++)\n        {\n            res[i] = q.front();\n            q.pop();\n        }\n        return res;\n    }\n\n    TNode * FindPreByPointer(ElemType e, int type) {\n        TNode *pre = NULL;\n        switch (type)\n        {\n        case 1:\n            _FindPreByPointer1(T, e, pre);\n            break;\n        case 2:\n            _FindPreByPointer2(T, e, pre);\n            break;\n        case 3:\n            _FindPreByPointer3(T, e, pre);\n            break;\n        default:\n            printf(\"\\e[1;31m类型错误，请输入正确类型：\\e[0;33m1-4分别表示【先序、中序、后序、层序】\\e[0m\");\n            break;\n        }\n        return final;\n    }\n    \n    /** 线索化\n     * @param {int} type 1-3分别表示【先序、中序、后序】\n     * @return {*}\n     */\n    BiTree * InThread(int type) {\n        TNode *pre = NULL;\n        switch (type)\n        {\n        case 1:\n            if (print) printf(\"[先序线索化]\\n\"); _InThread1(T, pre);\n            mode = 1;\n            break;\n        case 2:\n            if (print) printf(\"[中序线索化]\\n\"); _InThread2(T, pre);\n            mode = 2;\n            break;\n        case 3:\n            if (print) printf(\"[后序线索化]\\n\"); _InThread3(T, pre);\n            mode = 3;\n            break;\n        default:\n            printf(\"\\e[1;31m类型错误，请输入正确类型：\\e[0;33m1-3分别表示【先序、中序、后序】\\e[0m\\n\");\n            mode = type;\n            break;\n        }\n\n        //关于该 if 语句：分析线索化过程知，先序（根左右）和中序（左根右）的尾结点必再无右子结点\n        if (pre) if (!(pre->rchild && pre->rtag == 0)) pre->rtag = 1;\n\n        return this;\n    }\n\n    /** 去线索化\n     * @param {*}\n     * @return {*}\n     */\n    BiTree * UnThread() {\n        if (mode == 0) return this;\n        mode = 0;\n        _UnThread(T);\n        return this;\n    }\n\n    void _UnThread(TNode *T) {\n        if (!T) return;\n        if (T->ltag == 0) _UnThread(T->lchild);\n        if (T->ltag == 1) { T->lchild = NULL; T->ltag = 0; }\n        if (T->rtag == 1) { T->rchild = NULL; T->rtag = 0; }\n        if (T->rtag == 0) _UnThread(T->rchild);\n    }\n\n    /** 按格式打印当前树，支持线索化树\n     * @param {TNode} *T 根结点\n     * @return {*}\n     */\n    BiTree * PrettyPrint(bool printinfo = false, TNode *T = NULL) {\n        if (!T) T = this->T;\n        else {\n            queue<ElemType> q; queue<TNode*> _q; q.push(T->data); _q.push(T); TNode *p = FirstNode(T); int tmp = 0;\n            while(tmp < count - 1) {\n                p = _q.front();\n                if (ExistChild(p, 0)) { _q.push(p->lchild); q.push(p->lchild->data); tmp++; }\n                else { q.push('^'); _q.push(NewNode('^')); }\n                if (ExistChild(p, 1)) { _q.push(p->rchild); q.push(p->rchild->data); tmp++; }\n                else { q.push('^'); _q.push(NewNode('^')); }\n                _q.pop();\n        }\n        size = q.size();\n        height = floor(log2(size + 1)) + (log2(size + 1) - floor(log2(size + 1)) == 0 ? 0 : 1);\n        repr_string = new ElemType[size]; for (int i = 0; i < size; i++) { repr_string[i] = q.front(); q.pop(); }}\n        int i = 0, j = 0;\n        if (printinfo) printf(\"[结点数] \\e[32m%d\\e[0m，[所占位置] \\e[32m%d\\e[0m，[树高(层数)] \\e[32m%d\\e[0m [序列字符串] \\e[32m%s\\e[0m \\n\\e[33m\", count, size, height, repr_string);\n        for (int i = 0; i < 2 * pow(2, height - 1) - 1; i++) printf(\"--\"); cout << endl;\n        for (i = 1, j = 1; i <= size; i++) {\n            if (i == pow(2, j - 1)) { for (int k = 0; k < pow(2, height - j) - 1; k++) printf(\"  \"); }   // 行前空格(判据：当前是否为行首)\n            if (repr_string[i - 1] == '^') printf(\" .\"); else printf(\"%2c\", repr_string[i - 1]);\n            if (i == pow(2, j) - 1) { cout << endl; j++; }                                          // 换行(判据：当前是否为上一行行尾)\n            else{\n                for (int k = 1; k < pow(2, height - j + 1); k++) printf(\"  \");\n            }                  //行中空格\n        }\n        if (i != pow(2, j - 1)) cout << endl;\n        for (int i = 0; i < 2 * pow(2, height - 1) - 1; i++) printf(\"--\");\n        printf(\"\\e[0m\\n\");\n        return this;\n    }\n\n    int GetHeight(TNode *T = NULL, bool print = false) {\n        if (!T) { if (this->T) T = this->T; } else return 0;\n        queue<TNode*> q;\n        TNode *p = T, *last = T; int level = 0;\n        q.push(p); if (print) cout << \"\\n\";\n        while (!q.empty())\n        {\n            if (print) cout << \"[\";\n            p = q.front();\n            if (ExistChild(p, 0)) q.push(p->lchild);\n            if (ExistChild(p, 1)) q.push(p->rchild);\n            if (p == last) { if (print) printf(\"(到%c)\", last->data); level++; last = q.back();}\n            q.pop();\n            if (print) { queue <TNode*> Q = q; while(!Q.empty()) { cout<<\" \"<<Q.front()->data; Q.pop(); } }\n            if (print) cout << \"] \";\n\n        }\n        return level;\n\n    }\n\n    /** 递归方式实现根据先序和中序序列建立新二叉树\n     * @param {ElemType *} A    先序序列\n     * @param {ElemType *} B    中序序列\n     * @param {int} l1          先序 序列 首 结点下标\n     * @param {int} h1          先序 序列 尾 结点下标\n     * @param {int} l2          中序 序列 首 结点下标\n     * @param {int} h2          中序 序列 尾 结点下标\n     * @param {int} bias        数组指针偏移量，默认数组从下标 1 开始\n     * @param {bool} cover      是否覆盖原树，默认为false (不覆盖)\n     * @return {*}\n     */\n    TNode * PreInCre(ElemType const * A, ElemType const * B, int l1, int h1, int l2, int h2, int bias = 0, bool cover = false) {\n        // printf(\"{{欲添加 A[%d] = %c}} l1=%d, l2=%d, h1=%d, h2=%d\\n\", l1, A[l1], l1, l2, h1, h2);\n        TNode *p;\n        try {\n            p = NewNode(A[l1]); // 根结点\n        }\n        catch (exception&) {\n            throw(33);\n        }\n        int i; for (i = l2; B[i] != p->data; i++); // 划分中序序列\n        // printf(\"%d:%c \", i, p->data);\n        int llen = i - l2, rlen = h2 - i;\n        // printf(\"{{添加 %c}} llen=%d, rlen=%d, l1=%d, l2=%d, h1=%d, h2=%d\\n\", p->data, llen, rlen, l1, l2, h1, h2);\n        if (llen) AddNode(p, PreInCre(A, B, l1 + 1, l1 + llen, l2, l2 + llen - 1), 0);\n        else p->lchild = NULL;\n        if (rlen) AddNode(p, PreInCre(A, B, h1 - rlen + 1, h1, h2 - rlen + 1, h2), 1);\n        else p->rchild = NULL;\n        return p;\n    }\n    \n    /** 判断二叉树是否为完全二叉树\n     * @param {TNode} *T\n     * @return {*}\n     */\n    bool IsComplete (TNode *T = NULL) {\n        if (!T) T = this->T;\n        queue<TNode*> q; TNode *p = T; q.push(p);\n        while(!q.empty()) {\n            p = q.front(); q.pop();\n            if (p) {\n                if (p->ltag == 0) q.push(p->lchild);\n                if (p->rtag == 0) q.push(p->rchild);\n            }\n            else while(!q.empty()) {\n                p = q.front(); q.pop();\n                if (p) return false;\n            }\n        }\n        return true;\n    }\n\n    /** 判断二叉树是否为满二叉树\n     * @param {TNode} *T\n     * @return {*}\n     */\n    bool IsFull (TNode *T = NULL) {\n        return IsComplete() && count == size;\n    }\n\n    /** 判断两个二叉树是否相似\n     * @param {TNode} *T1\n     * @param {TNode} *T2\n     * @return {*}\n     */\n    bool IsSimiliar(TNode *T1, TNode *T2) {\n        bool left = 0, right = 0;\n        if (!T1 && !T2) return true;\n        if (!T1 || !T2) return false;\n        left = IsSimiliar(ExistChild(T1, 0) ? T1->lchild : NULL, ExistChild(T2, 0) ? T2->lchild : NULL);\n        right = IsSimiliar(ExistChild(T1, 1) ? T1->rchild : NULL, ExistChild(T2, 1) ? T2->rchild : NULL);\n        return left && right;\n    }\n\nprivate:\n    TNode *final = NULL; // 用土办法找到中序前驱的结果\n\n    // 递归打印 start //////////////////////////////\n\n    void _Print1(TNode *T)\n    {\n        if (T)\n        {\n            printf(\"%c \", T->data);\n            if (ExistChild(T, 0)) _Print1(T->lchild);\n            if (ExistChild(T, 1)) _Print1(T->rchild);\n        }\n    }\n    void _Print2(TNode *T)\n    {\n        if (T)\n        {\n            if (ExistChild(T, 0)) _Print2(T->lchild);\n            printf(\"%c \", T->data);\n            if (ExistChild(T, 1)) _Print2(T->rchild);\n        }\n    }\n    void _Print3(TNode *T)\n    {\n        if (T)\n        {\n            if (ExistChild(T, 0)) _Print3(T->lchild);\n            if (ExistChild(T, 1)) _Print3(T->rchild);\n            printf(\"%c \", T->data);\n        }\n    }\n    ElemType * _Print4(TNode *T, bool out = false)\n    {\n        queue<ElemType> q; // 存放最终结果的队列\n        queue<TNode *> _q; // 层序遍历的辅助队列\n        _q.push(T);\n        while (!_q.empty())\n        {\n            q.push(_q.front()->data);\n            if (ExistChild(_q.front(), 0)) _q.push(_q.front()->lchild);\n            if (ExistChild(_q.front(), 1)) _q.push(_q.front()->rchild);\n            _q.pop();\n        }\n        int size = q.size();\n        ElemType *res = new ElemType[size];\n        for (int i = 0; i < size; i++)\n        {\n            res[i] = q.front();\n            if (out) printf(\"%c \", q.front());\n            q.pop();\n        }\n        return res;\n    }\n\n    // 递归打印 end /////////////////////////////////\n    // 指针法找前驱 start ///////////////////////////\n\n    void _FindPreByPointer1(TNode *T, ElemType e, TNode *&pre)\n    {\n        if (mode == 0 && T)\n        {\n            if (T->data == e) final = pre; pre = T;\n            _FindPreByPointer1(T->lchild, e, pre);\n            _FindPreByPointer1(T->rchild, e, pre);\n        }\n        else if (mode != 0) { printf(\"\\e[31m此二叉树已被线索化 \"); }\n    }\n    void _FindPreByPointer2(TNode *T, ElemType e, TNode *&pre)\n    {\n        if (mode == 0 && T)\n        {\n            _FindPreByPointer2(T->lchild, e, pre);\n            if (T->data == e) final = pre; pre = T;\n            _FindPreByPointer2(T->rchild, e, pre);\n        }\n        else if (mode != 0) { printf(\"\\e[31m此二叉树已被线索化 \"); }\n    }\n    void _FindPreByPointer3(TNode *T, ElemType e, TNode *&pre)\n    {\n        if (mode == 0 && T)\n        {\n            _FindPreByPointer3(T->lchild, e, pre);\n            _FindPreByPointer3(T->rchild, e, pre);\n            if (T->data == e) final = pre; pre = T;\n        }\n        else if (mode != 0) { printf(\"\\e[31m此二叉树已被线索化 \"); }\n    }\n    \n    // 指针法找前驱 end /////////////////////////////\n    // 线索化 start ////////////////////////////////\n\n    void _InThread1(TNode *T, TNode *&pre)\n    {\n        if (!T) return;\n        if (!T->lchild) { T->lchild = pre; T->ltag = 1; }\n        if (pre && !pre->rchild) { pre->rchild = T; pre->rtag = 1; }\n        pre = T; //printf(\"%c \", pre->data);\n        if (T->ltag == 0) _InThread1(T->lchild, pre);\n        if (T->rtag == 0) _InThread1(T->rchild, pre);\n    }\n    void _InThread2(TNode *T, TNode *&pre)\n    {\n        if (T)\n        {\n            _InThread2(T->lchild, pre);\n            if (!T->lchild) { T->lchild = pre; T->ltag = 1; }\n            if (pre && !pre->rchild) { pre->rchild = T; pre->rtag = 1; }\n            pre = T; //printf(\"%c \", pre->data);\n            _InThread2(T->rchild, pre);\n        }\n    }\n    void _InThread3(TNode *T, TNode *&pre)\n    {\n        if (!T) return;\n        _InThread3(T->lchild, pre);\n        _InThread3(T->rchild, pre);\n        if (!T->lchild) { T->lchild = pre; T->ltag = 1;\n            // printf(\"%c->lchild ==> %c\\n\", T->data, pre?pre->data:'+');\n        }\n        if (pre && !pre->rchild) { pre->rchild = T; pre->rtag = 1;\n            // printf(\"%c->rchild ==> %c\\n\", pre ? pre->data : '+', T->data);\n        }\n        // else { printf(\"  %c->lchild = %c，且 pre \", T->data, T->lchild ? T->lchild->data : '+'); pre ? printf(\"= %c\\n\", pre->data) : printf(\"不存在\\n\"); }\n        pre = T;\n    }\n\n    // 线索化代码区 end /////////////////////////////\n\n};\n\n```","slug":"数据结构-二叉树相关代码","published":1,"updated":"2022-03-04T02:21:54.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0bsr0ra000grcsf8tom6h3h","content":"<!--\n * @Description: \n * @Version: 1.0\n * @Author: hccodec\n * @Date: 2021-09-15 15:57:08\n * @LastEditors: hccodec\n * @LastEditTime: 2021-09-15 16:05:42\n-->\n\n\n<p>可用 <code>g++ test.cpp -otest; ./test</code> 命令运行</p>\n<h4 id=\"测试文件\"><a href=\"#测试文件\" class=\"headerlink\" title=\"测试文件\"></a>测试文件</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: test.cpp 文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @Version: 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author: hccodec</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2021-09-08 17:02:41</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditors: hccodec</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditTime: 2021-09-15 16:03:34</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;BiTree.cpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *args[] = &#123;<span class=\"string\">&quot;先序&quot;</span>, <span class=\"string\">&quot;中序&quot;</span>, <span class=\"string\">&quot;后序&quot;</span>, <span class=\"string\">&quot;层序&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 测试输出</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;BiTree&#125; *T 递归输出所用二叉树</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ElemType&#125; * 存放原结果及三种线索化结果的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TestOutput</span><span class=\"params\">(BiTree *T, ElemType **res)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m递归    &quot;</span>); <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m[\\e[32m%s\\e[0m] \\e[33m&quot;</span>, args[i - <span class=\"number\">1</span>]); T-&gt;<span class=\"built_in\">PrintRecursion</span>(i); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m非递归  &quot;</span>); <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m[\\e[32m%s\\e[0m] \\e[33m&quot;</span>, args[i - <span class=\"number\">1</span>]); res[i - <span class=\"number\">1</span>] = T-&gt;<span class=\"built_in\">GetOutput</span>(i, <span class=\"literal\">true</span>); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TestInThread</span><span class=\"params\">(BiTree **Trees)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-&gt;线索化\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m正向输出&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m[\\e[32m%s\\e[0m] \\e[33m&quot;</span>, args[i]); Trees[i + <span class=\"number\">1</span>]-&gt;<span class=\"built_in\">InOrder</span>(); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m逆向输出&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m[\\e[32m%s\\e[0m] \\e[33m&quot;</span>, args[i]); Trees[i + <span class=\"number\">1</span>]-&gt;<span class=\"built_in\">RevInOrder</span>(); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TestPrePost</span><span class=\"params\">(BiTree **Trees)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-&gt;\\e[1;36m前驱\\e[1;35m后继\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        BiTree *Tmp = Trees[i]; TNode *p, *q = Tmp-&gt;<span class=\"built_in\">FirstNode</span>();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m[\\e[32m%s\\e[0m] &quot;</span>, args[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; Tmp-&gt;count; j++) &#123;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Tmp-&gt;<span class=\"built_in\">PreNode</span>(p)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;36m%2c\\e[0;33m&quot;</span>, Tmp-&gt;<span class=\"built_in\">PreNode</span>(p)-&gt;data);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0;36m .\\e[0;33m&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%2c&quot;</span>, p-&gt;data);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Tmp-&gt;<span class=\"built_in\">NextNode</span>(p)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;35m%2c\\e[0;33m&quot;</span>, Tmp-&gt;<span class=\"built_in\">NextNode</span>(p)-&gt;data);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0;35m .\\e[0;33m&quot;</span>);</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; |&quot;</span>;</span><br><span class=\"line\">            q = Tmp-&gt;<span class=\"built_in\">NextNode</span>(q);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;\\b &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TestSimiliar</span><span class=\"params\">(BiTree *A, BiTree *B)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;两树%s相似\\n&quot;</span>, A-&gt;<span class=\"built_in\">IsSimiliar</span>(A-&gt;T, B-&gt;T) ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot;不&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ElemType *A = (<span class=\"type\">char</span>*)<span class=\"string\">&quot;ABCDEFG&quot;</span>;</span><br><span class=\"line\">    ElemType *B = (<span class=\"type\">char</span>*)<span class=\"string\">&quot;CBDAFEG&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// ElemType *A = (char*)&quot;ABCDEFGHI&quot;, *B = (char*)&quot;BCAEDGHFI&quot;;</span></span><br><span class=\"line\">    BiTree *T, *PreBiTree, *InBiTree, *PostBiTree;</span><br><span class=\"line\">    <span class=\"comment\">// Tree *Tmp = (new BiTree(T))-&gt;InThread(1);</span></span><br><span class=\"line\">    T = <span class=\"keyword\">new</span> <span class=\"built_in\">BiTree</span>(A, B);</span><br><span class=\"line\">    PreBiTree = (<span class=\"keyword\">new</span> <span class=\"built_in\">BiTree</span>(A, B))-&gt;<span class=\"built_in\">InThread</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    InBiTree = (<span class=\"keyword\">new</span> <span class=\"built_in\">BiTree</span>(A, B))-&gt;<span class=\"built_in\">InThread</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    PostBiTree = (<span class=\"keyword\">new</span> <span class=\"built_in\">BiTree</span>(A, B))-&gt;<span class=\"built_in\">InThread</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    BiTree *Trees[<span class=\"number\">4</span>] = &#123;T, PreBiTree, InBiTree, PostBiTree&#125;;</span><br><span class=\"line\">    ElemType *res[<span class=\"number\">4</span>]; <span class=\"comment\">// 存放结果序列的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n\\e[0m[\\e[32m%s\\e[0m输出] \\e[33m&quot;</span>, args[<span class=\"number\">3</span>]); res[<span class=\"number\">3</span>] = T-&gt;<span class=\"built_in\">GetOutput</span>(<span class=\"number\">4</span>, <span class=\"literal\">true</span>); cout &lt;&lt; <span class=\"string\">&quot;\\e[0m&quot;</span> &lt;&lt; endl; T-&gt;<span class=\"built_in\">PrettyPrint</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">TestOutput</span>(T, res);</span><br><span class=\"line\">    <span class=\"built_in\">TestInThread</span>(Trees);</span><br><span class=\"line\">    <span class=\"built_in\">TestPrePost</span>(Trees);</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;\\e[0m&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">test</span>();</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    (<span class=\"keyword\">new</span> <span class=\"built_in\">BiTree</span>())-&gt;<span class=\"built_in\">PrettyPrint</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树源文件\"><a href=\"#二叉树源文件\" class=\"headerlink\" title=\"二叉树源文件\"></a>二叉树源文件</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: 二叉树类文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @Version: 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author: hccidec</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2021-09-14 20:10:46</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditors: hccodec</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditTime: 2021-09-15 16:01:33</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ElemType char</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Util</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">MyException</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">        <span class=\"type\">int</span> code;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> ElemType *<span class=\"title\">BubbleSort</span><span class=\"params\">(ElemType <span class=\"type\">const</span> X[], <span class=\"type\">int</span> <span class=\"type\">const</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        ElemType tmp; ElemType *res = (<span class=\"type\">char</span>*)X;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %d  &quot;</span>, res, n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n - <span class=\"number\">1</span>; j++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (res[j] &gt; res[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    tmp = res[j];</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; res[%d] &#123;%c&#125; = res[%d] &#123;%c&#125;&quot;</span>, j, res[j], j + <span class=\"number\">1</span>, res[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">                    res[j] = res[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    res[j + <span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TNode</span> &#123; ElemType data; TNode *lchild, *rchild, *parent; <span class=\"type\">int</span> ltag, rtag; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> print = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BiTree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    TNode *T = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> height = <span class=\"number\">0</span>, width = <span class=\"number\">0</span>, count = <span class=\"number\">0</span>, size = <span class=\"number\">0</span>; <span class=\"comment\">// 树的宽、高、节点数和所占位置总数</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *repr_string;</span><br><span class=\"line\">    <span class=\"type\">int</span> mode = <span class=\"number\">0</span>; <span class=\"comment\">// 0 表示未被线索化, 1-3 分别表示 先序线索化、中序线索化、后序线索化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">BiTree</span>() &#123; <span class=\"built_in\">Reset</span>(); <span class=\"built_in\">GetInfo</span>(); &#125;</span><br><span class=\"line\">    <span class=\"built_in\">BiTree</span>(ElemType <span class=\"type\">const</span> *Pre, ElemType <span class=\"type\">const</span> *In, <span class=\"type\">bool</span> bias = <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Util::<span class=\"built_in\">BubbleSort</span>(Pre, <span class=\"built_in\">strlen</span>(Pre)) - Util::<span class=\"built_in\">BubbleSort</span>(In, <span class=\"built_in\">strlen</span>(In)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入序列\\e[32m!\\e[0m&gt; 序列 \\e[33m%s\\e[0m(先序) 与序列 \\e[33m%s\\e[0m(中序)不合法&quot;</span>, Pre, In);</span><br><span class=\"line\">            <span class=\"built_in\">Reset</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[32m!\\e[0m&gt; 由序列 \\e[33m%s\\e[0m(先序) \\e[33m%s\\e[0m(中序)&quot;</span>, Pre, In);</span><br><span class=\"line\">            <span class=\"comment\">// printf(&quot;Pre = %s, In = %s, 1 = %d, nPre = %d, 1 = %d, nIn = %d\\n&quot;, Pre, In, 1, nPre, 1, nIn);</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                T = <span class=\"built_in\">PreInCre</span>(Pre, In, <span class=\"number\">0</span>, <span class=\"built_in\">strlen</span>(Pre) - <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"built_in\">strlen</span>(In) - <span class=\"number\">1</span>); count++;</span><br><span class=\"line\">                <span class=\"comment\">// throw 0.5;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">catch</span>(<span class=\"type\">double</span>) &#123;</span><br><span class=\"line\">                cerr &lt;&lt; <span class=\"string\">&quot;\\n\\e[1;31m发生异常\\e[0m&quot;</span>; <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">GetInfo</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (print) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; 生成%s\\e[0m二叉树\\n&quot;</span>, <span class=\"built_in\">IsComplete</span>() ? (<span class=\"built_in\">IsFull</span>() ? <span class=\"string\">&quot;\\e[1;32m满\\e[0m&quot;</span> : <span class=\"string\">&quot;完全&quot;</span>) : <span class=\"string\">&quot;普通&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">BiTree</span>(BiTree *T) &#123; <span class=\"keyword\">this</span>-&gt;T = T-&gt;T; <span class=\"keyword\">this</span>-&gt;mode = T-&gt;mode; <span class=\"built_in\">GetInfo</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 获取结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; e 所获结点的数据域的值</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">GetNode</span><span class=\"params\">(ElemType e)</span> </span>&#123;</span><br><span class=\"line\">        queue&lt;TNode*&gt; q; TNode *p = T; q.<span class=\"built_in\">push</span>(p);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q.<span class=\"built_in\">front</span>()-&gt;data == e) <span class=\"keyword\">return</span> q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                p = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>)) q.<span class=\"built_in\">push</span>(p-&gt;lchild);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>)) q.<span class=\"built_in\">push</span>(p-&gt;rchild);</span><br><span class=\"line\">                q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;未找到结点 %c\\n&quot;</span>, e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">GetInfo</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        queue&lt;ElemType&gt; q; queue&lt;TNode*&gt; _q; q.<span class=\"built_in\">push</span>(T-&gt;data); _q.<span class=\"built_in\">push</span>(T); TNode *p = <span class=\"built_in\">FirstNode</span>(T); <span class=\"type\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(tmp &lt; count - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            p = _q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>)) &#123; _q.<span class=\"built_in\">push</span>(p-&gt;lchild); q.<span class=\"built_in\">push</span>(p-&gt;lchild-&gt;data); tmp++; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123; q.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;^&#x27;</span>); _q.<span class=\"built_in\">push</span>(<span class=\"built_in\">NewNode</span>(<span class=\"string\">&#x27;^&#x27;</span>)); &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>)) &#123; _q.<span class=\"built_in\">push</span>(p-&gt;rchild); q.<span class=\"built_in\">push</span>(p-&gt;rchild-&gt;data); tmp++; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123; q.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;^&#x27;</span>); _q.<span class=\"built_in\">push</span>(<span class=\"built_in\">NewNode</span>(<span class=\"string\">&#x27;^&#x27;</span>)); &#125;</span><br><span class=\"line\">            _q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        size = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        height = <span class=\"built_in\">floor</span>(<span class=\"built_in\">log2</span>(size + <span class=\"number\">1</span>)) + (<span class=\"built_in\">log2</span>(size + <span class=\"number\">1</span>) - <span class=\"built_in\">floor</span>(<span class=\"built_in\">log2</span>(size + <span class=\"number\">1</span>)) == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">        repr_string = <span class=\"keyword\">new</span> ElemType[size]; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123; repr_string[i] = q.<span class=\"built_in\">front</span>(); q.<span class=\"built_in\">pop</span>(); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 创建新结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; e 要创建的结点的数据域的值</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">NewNode</span><span class=\"params\">(ElemType e)</span> </span>&#123;</span><br><span class=\"line\">        TNode *p;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            p = <span class=\"built_in\">new</span>(nothrow) TNode;</span><br><span class=\"line\">        &#125;<span class=\"built_in\">catch</span>(bad_alloc &amp;memExp) &#123;</span><br><span class=\"line\">            cerr &lt;&lt; memExp.<span class=\"built_in\">what</span>() &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出现异常&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p-&gt;data = e;</span><br><span class=\"line\">        p-&gt;lchild = p-&gt;rchild = p-&gt;parent = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        p-&gt;ltag = p-&gt;rtag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 添加新结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; target 其父结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; e      要添加的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; side        添加位置（左孩子为0，右孩子为1）</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">AddNode</span><span class=\"params\">(ElemType target, ElemType e, <span class=\"type\">int</span> side)</span> </span>&#123;</span><br><span class=\"line\">        TNode *p = <span class=\"built_in\">GetNode</span>(target);</span><br><span class=\"line\">        TNode *q = <span class=\"built_in\">NewNode</span>(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">AddNode</span>(p, q, side);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 添加新结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *target   其父结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; e      要添加的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; side        添加位置（左孩子为0，右孩子为1）</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">AddNode</span><span class=\"params\">(TNode *target, ElemType e, <span class=\"type\">int</span> side)</span> </span>&#123;</span><br><span class=\"line\">        TNode *q = <span class=\"built_in\">NewNode</span>(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">AddNode</span>(target, q, side);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 添加新结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *target   其父结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *e        要添加的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; side        添加位置（左孩子为0，右孩子为1）</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">AddNode</span><span class=\"params\">(TNode *target, TNode *e, <span class=\"type\">int</span> side)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!target) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m要添加的位置不存在，无法添加结点‘%c’\\e[0m\\n&quot;</span>, e-&gt;data); <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">        <span class=\"comment\">// if (mode != 0) &#123; printf(&quot;\\e[1;31m暂时不支持向线索化的树\\e[0m\\n&quot;); return this; &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">ExistChild</span>(target, side)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m结点‘%c’要插入的位置&#x27;%c&#x27;已有%s结点\\e[0m\\n&quot;</span>, e-&gt;data, target-&gt;data, side == <span class=\"number\">0</span> ? <span class=\"string\">&quot;左&quot;</span> : (side == <span class=\"number\">1</span> ? <span class=\"string\">&quot;右&quot;</span> : <span class=\"string\">&quot;×&quot;</span>)); <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (side != <span class=\"number\">0</span> &amp;&amp; side != <span class=\"number\">1</span>) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m添加位置不合法，添加位置（左孩子为0，右孩子为1）\\e[0m\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (side == <span class=\"number\">0</span>) &#123; target-&gt;lchild = e;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (side == <span class=\"number\">1</span>) &#123; target-&gt;rchild = e;&#125;</span><br><span class=\"line\">        count++; e-&gt;parent = target;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 更改指定结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; target 其父结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; e      要添加的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; side        添加位置（左孩子为0，右孩子为1）</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">ChangeNode</span><span class=\"params\">(ElemType target, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">        TNode *p = <span class=\"built_in\">GetNode</span>(target);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">ChangeNode</span>(p, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 更改指定结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *target   其父结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; e      要添加的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; side        添加位置（左孩子为0，右孩子为1）</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">ChangeNode</span><span class=\"params\">(TNode *target, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!target) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m未找到该结点，无法添加\\e[0m\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">        target-&gt;data = e;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 判断是否存在子节点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *p 要判断的结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; side 0表示左，1表示右</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">ExistChild</span><span class=\"params\">(TNode *p, <span class=\"type\">int</span> side)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!p) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;结点为空 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (side) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>: <span class=\"keyword\">return</span> p-&gt;lchild &amp;&amp; p-&gt;ltag == <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> p-&gt;rchild &amp;&amp; p-&gt;rtag == <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;程序有误请检查&quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Reset</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        T = <span class=\"built_in\">NewNode</span>(<span class=\"string\">&#x27;A&#x27;</span>); count++; <span class=\"keyword\">this</span></span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;H&#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 首结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *p</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">FirstNode</span><span class=\"params\">(TNode *p = <span class=\"literal\">NULL</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!p) p = T;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (mode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">while</span> (p-&gt;ltag == <span class=\"number\">0</span>) &#123; p = p-&gt;lchild; &#125; <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123; <span class=\"keyword\">if</span> (p-&gt;ltag == <span class=\"number\">0</span>) p = p-&gt;lchild; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;rtag == <span class=\"number\">0</span>) p = p-&gt;rchild; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> p; &#125; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 尾结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *p</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">LastNode</span><span class=\"params\">(TNode *p = <span class=\"literal\">NULL</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!p) p = T;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (mode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123; <span class=\"keyword\">if</span> (p-&gt;rtag == <span class=\"number\">0</span>) p = p-&gt;rchild; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;ltag == <span class=\"number\">0</span>) p = p-&gt;lchild; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> p; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">while</span> (p-&gt;rtag == <span class=\"number\">0</span>) &#123; p = p-&gt;rchild; &#125; <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 前驱结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *p</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">PreNode</span><span class=\"params\">(TNode *p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (mode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!p-&gt;parent) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;parent-&gt;lchild == p) <span class=\"keyword\">return</span> p-&gt;parent; <span class=\"comment\">// 如果是左节点</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;parent-&gt;ltag == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> p-&gt;parent;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">LastNode</span>(p-&gt;parent-&gt;lchild); <span class=\"comment\">//左节点存在，返回左子树最后一个结点</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p-&gt;ltag == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">LastNode</span>(p-&gt;lchild);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p-&gt;lchild;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p-&gt;ltag == <span class=\"number\">0</span> &amp;&amp; p-&gt;rtag == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> p-&gt;rchild;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p-&gt;lchild;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 后继结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *p</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">NextNode</span><span class=\"params\">(TNode *p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (mode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p-&gt;rtag == <span class=\"number\">0</span> &amp;&amp; p-&gt;ltag == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> p-&gt;lchild;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p-&gt;rchild;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p-&gt;rtag == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">FirstNode</span>(p-&gt;rchild);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p-&gt;rchild;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!p-&gt;parent) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;parent-&gt;rchild == p) <span class=\"keyword\">return</span> p-&gt;parent;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;parent-&gt;rtag == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> p-&gt;parent;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">FirstNode</span>(p-&gt;parent-&gt;rchild);</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (TNode *p = <span class=\"built_in\">FirstNode</span>(T); p; p = <span class=\"built_in\">NextNode</span>(p)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">RevInOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (TNode *p = <span class=\"built_in\">LastNode</span>(T); p; p = <span class=\"built_in\">PreNode</span>(p)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 递归打印</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; type 1-3分别表示【先序、中序、后序】</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintRecursion</span><span class=\"params\">(<span class=\"type\">int</span> type)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _Print1(T);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _Print2(T);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _Print3(T);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m[PrintRecursion] 类型错误，请输入正确类型：\\e[0;33m1-3分别表示【先序、中序、后序】\\e[0m&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 非递归打印</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; type 1-4 分别表示【先序、中序、后序、层序】</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;bool&#125; out out = true 表示输出</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">ElemType * <span class=\"title\">GetOutput</span><span class=\"params\">(<span class=\"type\">int</span> type, <span class=\"type\">bool</span> out = <span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mode != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;非递归打印不支持已被线索化的二叉树。因代码直接访问 lchild 和 rchild 指针而未对其指向左右孩子或指向线索化的前驱后继这两种情况进行判断。\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// printf(&quot;(%d) &quot;, mode);</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TNode *p = T, *pre = <span class=\"literal\">NULL</span>; queue&lt;ElemType&gt; q;</span><br><span class=\"line\">        stack&lt;TNode *&gt; s; <span class=\"comment\">// 辅助栈</span></span><br><span class=\"line\">        <span class=\"type\">int</span> tag = <span class=\"number\">0</span>; <span class=\"comment\">// 入栈tag=0；出栈tag=1</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p || !s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p) &#123; <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data); q.<span class=\"built_in\">push</span>(p-&gt;data); s.<span class=\"built_in\">push</span>(p); p = <span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>) ? p-&gt;lchild : <span class=\"literal\">NULL</span>; &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; p = s.<span class=\"built_in\">top</span>(); p = <span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>) ? p-&gt;rchild : <span class=\"literal\">NULL</span>; s.<span class=\"built_in\">pop</span>(); &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p || !s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p) &#123; s.<span class=\"built_in\">push</span>(p); p = <span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>) ? p-&gt;lchild : <span class=\"literal\">NULL</span>; &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123; p = s.<span class=\"built_in\">top</span>(); <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data); q.<span class=\"built_in\">push</span>(p-&gt;data); s.<span class=\"built_in\">pop</span>(); p = <span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>) ? p-&gt;rchild : <span class=\"literal\">NULL</span>; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p || !s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">            &#123; <span class=\"comment\">// 以下提供了未线索化和已线索化两种实现方式的代码示例</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mode == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tag == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// tag表示非递归遍历的当前操作是入栈（tag=0）还是出栈（tag=1）</span></span><br><span class=\"line\">                        <span class=\"comment\">// 若为入栈操作则左子结点优先于右子结点入栈</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (p-&gt;lchild) &#123; s.<span class=\"built_in\">push</span>(p); pre = p; p = p-&gt;lchild; &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;rchild) &#123; s.<span class=\"built_in\">push</span>(p); pre = p; p = p-&gt;rchild; &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 否则为叶子结点。将其入栈并通过标记tag=1控制下一操作改为出栈</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data); q.<span class=\"built_in\">push</span>(p-&gt;data); pre = p; p = s.<span class=\"built_in\">top</span>(); tag = <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">                        <span class=\"comment\">// 出栈，仅需判断当前结点（栈顶元素）是否有未被遍历的右子结点</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!p-&gt;rchild) &#123; pre = p; <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data); q.<span class=\"built_in\">push</span>(p-&gt;data); s.<span class=\"built_in\">pop</span>(); p = s.<span class=\"built_in\">top</span>(); &#125; <span class=\"comment\">// 没有右子结点</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (pre == p-&gt;rchild) &#123; <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data); q.<span class=\"built_in\">push</span>(p-&gt;data); pre = p; s.<span class=\"built_in\">pop</span>(); <span class=\"keyword\">if</span> (!s.<span class=\"built_in\">empty</span>()) p = s.<span class=\"built_in\">top</span>(); <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123; pre = p; p = p-&gt;rchild; tag = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (p) &#123; s.<span class=\"built_in\">push</span>(p); p = <span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>) ? p-&gt;lchild : <span class=\"literal\">NULL</span>; &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        p = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>) &amp;&amp; p-&gt;rchild != pre) p = p-&gt;rchild;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            p = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class=\"line\">                            pre = p;</span><br><span class=\"line\">                            p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _Print4(T, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;检查type变量，type 1-4 分别表示【先序、中序、后序、层序】&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> size = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        ElemType *res = <span class=\"keyword\">new</span> ElemType[size + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= size; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[i] = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">FindPreByPointer</span><span class=\"params\">(ElemType e, <span class=\"type\">int</span> type)</span> </span>&#123;</span><br><span class=\"line\">        TNode *pre = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            _FindPreByPointer1(T, e, pre);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            _FindPreByPointer2(T, e, pre);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            _FindPreByPointer3(T, e, pre);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m类型错误，请输入正确类型：\\e[0;33m1-4分别表示【先序、中序、后序、层序】\\e[0m&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">final</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** 线索化</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; type 1-3分别表示【先序、中序、后序】</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">InThread</span><span class=\"params\">(<span class=\"type\">int</span> type)</span> </span>&#123;</span><br><span class=\"line\">        TNode *pre = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[先序线索化]\\n&quot;</span>); _InThread1(T, pre);</span><br><span class=\"line\">            mode = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[中序线索化]\\n&quot;</span>); _InThread2(T, pre);</span><br><span class=\"line\">            mode = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[后序线索化]\\n&quot;</span>); _InThread3(T, pre);</span><br><span class=\"line\">            mode = <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m类型错误，请输入正确类型：\\e[0;33m1-3分别表示【先序、中序、后序】\\e[0m\\n&quot;</span>);</span><br><span class=\"line\">            mode = type;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关于该 if 语句：分析线索化过程知，先序（根左右）和中序（左根右）的尾结点必再无右子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre) <span class=\"keyword\">if</span> (!(pre-&gt;rchild &amp;&amp; pre-&gt;rtag == <span class=\"number\">0</span>)) pre-&gt;rtag = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 去线索化</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">UnThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mode == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        mode = <span class=\"number\">0</span>;</span><br><span class=\"line\">        _UnThread(T);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> _UnThread(TNode *T) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;ltag == <span class=\"number\">0</span>) _UnThread(T-&gt;lchild);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;ltag == <span class=\"number\">1</span>) &#123; T-&gt;lchild = <span class=\"literal\">NULL</span>; T-&gt;ltag = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;rtag == <span class=\"number\">1</span>) &#123; T-&gt;rchild = <span class=\"literal\">NULL</span>; T-&gt;rtag = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;rtag == <span class=\"number\">0</span>) _UnThread(T-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 按格式打印当前树，支持线索化树</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *T 根结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">PrettyPrint</span><span class=\"params\">(<span class=\"type\">bool</span> printinfo = <span class=\"literal\">false</span>, TNode *T = <span class=\"literal\">NULL</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T) T = <span class=\"keyword\">this</span>-&gt;T;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            queue&lt;ElemType&gt; q; queue&lt;TNode*&gt; _q; q.<span class=\"built_in\">push</span>(T-&gt;data); _q.<span class=\"built_in\">push</span>(T); TNode *p = <span class=\"built_in\">FirstNode</span>(T); <span class=\"type\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(tmp &lt; count - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                p = _q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>)) &#123; _q.<span class=\"built_in\">push</span>(p-&gt;lchild); q.<span class=\"built_in\">push</span>(p-&gt;lchild-&gt;data); tmp++; &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; q.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;^&#x27;</span>); _q.<span class=\"built_in\">push</span>(<span class=\"built_in\">NewNode</span>(<span class=\"string\">&#x27;^&#x27;</span>)); &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>)) &#123; _q.<span class=\"built_in\">push</span>(p-&gt;rchild); q.<span class=\"built_in\">push</span>(p-&gt;rchild-&gt;data); tmp++; &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; q.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;^&#x27;</span>); _q.<span class=\"built_in\">push</span>(<span class=\"built_in\">NewNode</span>(<span class=\"string\">&#x27;^&#x27;</span>)); &#125;</span><br><span class=\"line\">                _q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        size = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        height = <span class=\"built_in\">floor</span>(<span class=\"built_in\">log2</span>(size + <span class=\"number\">1</span>)) + (<span class=\"built_in\">log2</span>(size + <span class=\"number\">1</span>) - <span class=\"built_in\">floor</span>(<span class=\"built_in\">log2</span>(size + <span class=\"number\">1</span>)) == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">        repr_string = <span class=\"keyword\">new</span> ElemType[size]; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123; repr_string[i] = q.<span class=\"built_in\">front</span>(); q.<span class=\"built_in\">pop</span>(); &#125;&#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (printinfo) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[结点数] \\e[32m%d\\e[0m，[所占位置] \\e[32m%d\\e[0m，[树高(层数)] \\e[32m%d\\e[0m [序列字符串] \\e[32m%s\\e[0m \\n\\e[33m&quot;</span>, count, size, height, repr_string);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, height - <span class=\"number\">1</span>) - <span class=\"number\">1</span>; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--&quot;</span>); cout &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>, j = <span class=\"number\">1</span>; i &lt;= size; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, j - <span class=\"number\">1</span>)) &#123; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, height - j) - <span class=\"number\">1</span>; k++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;  &quot;</span>); &#125;   <span class=\"comment\">// 行前空格(判据：当前是否为行首)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (repr_string[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;^&#x27;</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; .&quot;</span>); <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%2c&quot;</span>, repr_string[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, j) - <span class=\"number\">1</span>) &#123; cout &lt;&lt; endl; j++; &#125;                                          <span class=\"comment\">// 换行(判据：当前是否为上一行行尾)</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt; <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, height - j + <span class=\"number\">1</span>); k++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">            &#125;                  <span class=\"comment\">//行中空格</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, j - <span class=\"number\">1</span>)) cout &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, height - <span class=\"number\">1</span>) - <span class=\"number\">1</span>; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetHeight</span><span class=\"params\">(TNode *T = <span class=\"literal\">NULL</span>, <span class=\"type\">bool</span> print = <span class=\"literal\">false</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T) &#123; <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;T) T = <span class=\"keyword\">this</span>-&gt;T; &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        queue&lt;TNode*&gt; q;</span><br><span class=\"line\">        TNode *p = T, *last = T; <span class=\"type\">int</span> level = <span class=\"number\">0</span>;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(p); <span class=\"keyword\">if</span> (print) cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) cout &lt;&lt; <span class=\"string\">&quot;[&quot;</span>;</span><br><span class=\"line\">            p = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>)) q.<span class=\"built_in\">push</span>(p-&gt;lchild);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>)) q.<span class=\"built_in\">push</span>(p-&gt;rchild);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == last) &#123; <span class=\"keyword\">if</span> (print) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;(到%c)&quot;</span>, last-&gt;data); level++; last = q.<span class=\"built_in\">back</span>();&#125;</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) &#123; queue &lt;TNode*&gt; Q = q; <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>()) &#123; cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;Q.<span class=\"built_in\">front</span>()-&gt;data; Q.<span class=\"built_in\">pop</span>(); &#125; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) cout &lt;&lt; <span class=\"string\">&quot;] &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> level;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 递归方式实现根据先序和中序序列建立新二叉树</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType *&#125; A    先序序列</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType *&#125; B    中序序列</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; l1          先序 序列 首 结点下标</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; h1          先序 序列 尾 结点下标</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; l2          中序 序列 首 结点下标</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; h2          中序 序列 尾 结点下标</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; bias        数组指针偏移量，默认数组从下标 1 开始</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;bool&#125; cover      是否覆盖原树，默认为false (不覆盖)</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">PreInCre</span><span class=\"params\">(ElemType <span class=\"type\">const</span> * A, ElemType <span class=\"type\">const</span> * B, <span class=\"type\">int</span> l1, <span class=\"type\">int</span> h1, <span class=\"type\">int</span> l2, <span class=\"type\">int</span> h2, <span class=\"type\">int</span> bias = <span class=\"number\">0</span>, <span class=\"type\">bool</span> cover = <span class=\"literal\">false</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;&#123;&#123;欲添加 A[%d] = %c&#125;&#125; l1=%d, l2=%d, h1=%d, h2=%d\\n&quot;, l1, A[l1], l1, l2, h1, h2);</span></span><br><span class=\"line\">        TNode *p;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            p = <span class=\"built_in\">NewNode</span>(A[l1]); <span class=\"comment\">// 根结点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">catch</span> (exception&amp;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span>(<span class=\"number\">33</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> i; <span class=\"keyword\">for</span> (i = l2; B[i] != p-&gt;data; i++); <span class=\"comment\">// 划分中序序列</span></span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;%d:%c &quot;, i, p-&gt;data);</span></span><br><span class=\"line\">        <span class=\"type\">int</span> llen = i - l2, rlen = h2 - i;</span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;&#123;&#123;添加 %c&#125;&#125; llen=%d, rlen=%d, l1=%d, l2=%d, h1=%d, h2=%d\\n&quot;, p-&gt;data, llen, rlen, l1, l2, h1, h2);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (llen) <span class=\"built_in\">AddNode</span>(p, <span class=\"built_in\">PreInCre</span>(A, B, l1 + <span class=\"number\">1</span>, l1 + llen, l2, l2 + llen - <span class=\"number\">1</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> p-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rlen) <span class=\"built_in\">AddNode</span>(p, <span class=\"built_in\">PreInCre</span>(A, B, h1 - rlen + <span class=\"number\">1</span>, h1, h2 - rlen + <span class=\"number\">1</span>, h2), <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> p-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** 判断二叉树是否为完全二叉树</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *T</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsComplete</span> <span class=\"params\">(TNode *T = <span class=\"literal\">NULL</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T) T = <span class=\"keyword\">this</span>-&gt;T;</span><br><span class=\"line\">        queue&lt;TNode*&gt; q; TNode *p = T; q.<span class=\"built_in\">push</span>(p);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            p = q.<span class=\"built_in\">front</span>(); q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p-&gt;ltag == <span class=\"number\">0</span>) q.<span class=\"built_in\">push</span>(p-&gt;lchild);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p-&gt;rtag == <span class=\"number\">0</span>) q.<span class=\"built_in\">push</span>(p-&gt;rchild);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                p = q.<span class=\"built_in\">front</span>(); q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 判断二叉树是否为满二叉树</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *T</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsFull</span> <span class=\"params\">(TNode *T = <span class=\"literal\">NULL</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">IsComplete</span>() &amp;&amp; count == size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 判断两个二叉树是否相似</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *T1</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *T2</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsSimiliar</span><span class=\"params\">(TNode *T1, TNode *T2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">bool</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T1 &amp;&amp; !T2) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T1 || !T2) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        left = <span class=\"built_in\">IsSimiliar</span>(<span class=\"built_in\">ExistChild</span>(T1, <span class=\"number\">0</span>) ? T1-&gt;lchild : <span class=\"literal\">NULL</span>, <span class=\"built_in\">ExistChild</span>(T2, <span class=\"number\">0</span>) ? T2-&gt;lchild : <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        right = <span class=\"built_in\">IsSimiliar</span>(<span class=\"built_in\">ExistChild</span>(T1, <span class=\"number\">1</span>) ? T1-&gt;rchild : <span class=\"literal\">NULL</span>, <span class=\"built_in\">ExistChild</span>(T2, <span class=\"number\">1</span>) ? T2-&gt;rchild : <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left &amp;&amp; right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    TNode *<span class=\"keyword\">final</span> = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 用土办法找到中序前驱的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归打印 start //////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> _Print1(TNode *T)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, T-&gt;data);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(T, <span class=\"number\">0</span>)) _Print1(T-&gt;lchild);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(T, <span class=\"number\">1</span>)) _Print1(T-&gt;rchild);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> _Print2(TNode *T)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(T, <span class=\"number\">0</span>)) _Print2(T-&gt;lchild);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, T-&gt;data);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(T, <span class=\"number\">1</span>)) _Print2(T-&gt;rchild);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> _Print3(TNode *T)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(T, <span class=\"number\">0</span>)) _Print3(T-&gt;lchild);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(T, <span class=\"number\">1</span>)) _Print3(T-&gt;rchild);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, T-&gt;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ElemType * _Print4(TNode *T, <span class=\"type\">bool</span> out = <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        queue&lt;ElemType&gt; q; <span class=\"comment\">// 存放最终结果的队列</span></span><br><span class=\"line\">        queue&lt;TNode *&gt; _q; <span class=\"comment\">// 层序遍历的辅助队列</span></span><br><span class=\"line\">        _q.<span class=\"built_in\">push</span>(T);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!_q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(_q.<span class=\"built_in\">front</span>()-&gt;data);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(_q.<span class=\"built_in\">front</span>(), <span class=\"number\">0</span>)) _q.<span class=\"built_in\">push</span>(_q.<span class=\"built_in\">front</span>()-&gt;lchild);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(_q.<span class=\"built_in\">front</span>(), <span class=\"number\">1</span>)) _q.<span class=\"built_in\">push</span>(_q.<span class=\"built_in\">front</span>()-&gt;rchild);</span><br><span class=\"line\">            _q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> size = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        ElemType *res = <span class=\"keyword\">new</span> ElemType[size];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[i] = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, q.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归打印 end /////////////////////////////////</span></span><br><span class=\"line\">    <span class=\"comment\">// 指针法找前驱 start ///////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> _FindPreByPointer1(TNode *T, ElemType e, TNode *&amp;pre)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mode == <span class=\"number\">0</span> &amp;&amp; T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (T-&gt;data == e) <span class=\"keyword\">final</span> = pre; pre = T;</span><br><span class=\"line\">            _FindPreByPointer1(T-&gt;lchild, e, pre);</span><br><span class=\"line\">            _FindPreByPointer1(T-&gt;rchild, e, pre);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mode != <span class=\"number\">0</span>) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[31m此二叉树已被线索化 &quot;</span>); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> _FindPreByPointer2(TNode *T, ElemType e, TNode *&amp;pre)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mode == <span class=\"number\">0</span> &amp;&amp; T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _FindPreByPointer2(T-&gt;lchild, e, pre);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (T-&gt;data == e) <span class=\"keyword\">final</span> = pre; pre = T;</span><br><span class=\"line\">            _FindPreByPointer2(T-&gt;rchild, e, pre);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mode != <span class=\"number\">0</span>) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[31m此二叉树已被线索化 &quot;</span>); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> _FindPreByPointer3(TNode *T, ElemType e, TNode *&amp;pre)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mode == <span class=\"number\">0</span> &amp;&amp; T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _FindPreByPointer3(T-&gt;lchild, e, pre);</span><br><span class=\"line\">            _FindPreByPointer3(T-&gt;rchild, e, pre);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (T-&gt;data == e) <span class=\"keyword\">final</span> = pre; pre = T;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mode != <span class=\"number\">0</span>) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[31m此二叉树已被线索化 &quot;</span>); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 指针法找前驱 end /////////////////////////////</span></span><br><span class=\"line\">    <span class=\"comment\">// 线索化 start ////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> _InThread1(TNode *T, TNode *&amp;pre)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T-&gt;lchild) &#123; T-&gt;lchild = pre; T-&gt;ltag = <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre &amp;&amp; !pre-&gt;rchild) &#123; pre-&gt;rchild = T; pre-&gt;rtag = <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">        pre = T; <span class=\"comment\">//printf(&quot;%c &quot;, pre-&gt;data);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;ltag == <span class=\"number\">0</span>) _InThread1(T-&gt;lchild, pre);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;rtag == <span class=\"number\">0</span>) _InThread1(T-&gt;rchild, pre);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> _InThread2(TNode *T, TNode *&amp;pre)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _InThread2(T-&gt;lchild, pre);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!T-&gt;lchild) &#123; T-&gt;lchild = pre; T-&gt;ltag = <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pre &amp;&amp; !pre-&gt;rchild) &#123; pre-&gt;rchild = T; pre-&gt;rtag = <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">            pre = T; <span class=\"comment\">//printf(&quot;%c &quot;, pre-&gt;data);</span></span><br><span class=\"line\">            _InThread2(T-&gt;rchild, pre);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> _InThread3(TNode *T, TNode *&amp;pre)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        _InThread3(T-&gt;lchild, pre);</span><br><span class=\"line\">        _InThread3(T-&gt;rchild, pre);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T-&gt;lchild) &#123; T-&gt;lchild = pre; T-&gt;ltag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// printf(&quot;%c-&gt;lchild ==&gt; %c\\n&quot;, T-&gt;data, pre?pre-&gt;data:&#x27;+&#x27;);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre &amp;&amp; !pre-&gt;rchild) &#123; pre-&gt;rchild = T; pre-&gt;rtag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// printf(&quot;%c-&gt;rchild ==&gt; %c\\n&quot;, pre ? pre-&gt;data : &#x27;+&#x27;, T-&gt;data);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// else &#123; printf(&quot;  %c-&gt;lchild = %c，且 pre &quot;, T-&gt;data, T-&gt;lchild ? T-&gt;lchild-&gt;data : &#x27;+&#x27;); pre ? printf(&quot;= %c\\n&quot;, pre-&gt;data) : printf(&quot;不存在\\n&quot;); &#125;</span></span><br><span class=\"line\">        pre = T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 线索化代码区 end /////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<!--\n * @Description: \n * @Version: 1.0\n * @Author: hccodec\n * @Date: 2021-09-15 15:57:08\n * @LastEditors: hccodec\n * @LastEditTime: 2021-09-15 16:05:42\n-->\n\n\n<p>可用 <code>g++ test.cpp -otest; ./test</code> 命令运行</p>\n<h4 id=\"测试文件\"><a href=\"#测试文件\" class=\"headerlink\" title=\"测试文件\"></a>测试文件</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: test.cpp 文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @Version: 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author: hccodec</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2021-09-08 17:02:41</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditors: hccodec</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditTime: 2021-09-15 16:03:34</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;BiTree.cpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *args[] = &#123;<span class=\"string\">&quot;先序&quot;</span>, <span class=\"string\">&quot;中序&quot;</span>, <span class=\"string\">&quot;后序&quot;</span>, <span class=\"string\">&quot;层序&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 测试输出</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;BiTree&#125; *T 递归输出所用二叉树</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;ElemType&#125; * 存放原结果及三种线索化结果的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TestOutput</span><span class=\"params\">(BiTree *T, ElemType **res)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m递归    &quot;</span>); <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m[\\e[32m%s\\e[0m] \\e[33m&quot;</span>, args[i - <span class=\"number\">1</span>]); T-&gt;<span class=\"built_in\">PrintRecursion</span>(i); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m非递归  &quot;</span>); <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m[\\e[32m%s\\e[0m] \\e[33m&quot;</span>, args[i - <span class=\"number\">1</span>]); res[i - <span class=\"number\">1</span>] = T-&gt;<span class=\"built_in\">GetOutput</span>(i, <span class=\"literal\">true</span>); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TestInThread</span><span class=\"params\">(BiTree **Trees)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-&gt;线索化\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m正向输出&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m[\\e[32m%s\\e[0m] \\e[33m&quot;</span>, args[i]); Trees[i + <span class=\"number\">1</span>]-&gt;<span class=\"built_in\">InOrder</span>(); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m逆向输出&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m[\\e[32m%s\\e[0m] \\e[33m&quot;</span>, args[i]); Trees[i + <span class=\"number\">1</span>]-&gt;<span class=\"built_in\">RevInOrder</span>(); &#125; cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TestPrePost</span><span class=\"params\">(BiTree **Trees)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-&gt;\\e[1;36m前驱\\e[1;35m后继\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        BiTree *Tmp = Trees[i]; TNode *p, *q = Tmp-&gt;<span class=\"built_in\">FirstNode</span>();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m[\\e[32m%s\\e[0m] &quot;</span>, args[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; Tmp-&gt;count; j++) &#123;</span><br><span class=\"line\">            p = q;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Tmp-&gt;<span class=\"built_in\">PreNode</span>(p)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;36m%2c\\e[0;33m&quot;</span>, Tmp-&gt;<span class=\"built_in\">PreNode</span>(p)-&gt;data);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0;36m .\\e[0;33m&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%2c&quot;</span>, p-&gt;data);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Tmp-&gt;<span class=\"built_in\">NextNode</span>(p)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;35m%2c\\e[0;33m&quot;</span>, Tmp-&gt;<span class=\"built_in\">NextNode</span>(p)-&gt;data);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0;35m .\\e[0;33m&quot;</span>);</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; |&quot;</span>;</span><br><span class=\"line\">            q = Tmp-&gt;<span class=\"built_in\">NextNode</span>(q);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;\\b &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TestSimiliar</span><span class=\"params\">(BiTree *A, BiTree *B)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;两树%s相似\\n&quot;</span>, A-&gt;<span class=\"built_in\">IsSimiliar</span>(A-&gt;T, B-&gt;T) ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot;不&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ElemType *A = (<span class=\"type\">char</span>*)<span class=\"string\">&quot;ABCDEFG&quot;</span>;</span><br><span class=\"line\">    ElemType *B = (<span class=\"type\">char</span>*)<span class=\"string\">&quot;CBDAFEG&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// ElemType *A = (char*)&quot;ABCDEFGHI&quot;, *B = (char*)&quot;BCAEDGHFI&quot;;</span></span><br><span class=\"line\">    BiTree *T, *PreBiTree, *InBiTree, *PostBiTree;</span><br><span class=\"line\">    <span class=\"comment\">// Tree *Tmp = (new BiTree(T))-&gt;InThread(1);</span></span><br><span class=\"line\">    T = <span class=\"keyword\">new</span> <span class=\"built_in\">BiTree</span>(A, B);</span><br><span class=\"line\">    PreBiTree = (<span class=\"keyword\">new</span> <span class=\"built_in\">BiTree</span>(A, B))-&gt;<span class=\"built_in\">InThread</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    InBiTree = (<span class=\"keyword\">new</span> <span class=\"built_in\">BiTree</span>(A, B))-&gt;<span class=\"built_in\">InThread</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    PostBiTree = (<span class=\"keyword\">new</span> <span class=\"built_in\">BiTree</span>(A, B))-&gt;<span class=\"built_in\">InThread</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    BiTree *Trees[<span class=\"number\">4</span>] = &#123;T, PreBiTree, InBiTree, PostBiTree&#125;;</span><br><span class=\"line\">    ElemType *res[<span class=\"number\">4</span>]; <span class=\"comment\">// 存放结果序列的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n\\e[0m[\\e[32m%s\\e[0m输出] \\e[33m&quot;</span>, args[<span class=\"number\">3</span>]); res[<span class=\"number\">3</span>] = T-&gt;<span class=\"built_in\">GetOutput</span>(<span class=\"number\">4</span>, <span class=\"literal\">true</span>); cout &lt;&lt; <span class=\"string\">&quot;\\e[0m&quot;</span> &lt;&lt; endl; T-&gt;<span class=\"built_in\">PrettyPrint</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">TestOutput</span>(T, res);</span><br><span class=\"line\">    <span class=\"built_in\">TestInThread</span>(Trees);</span><br><span class=\"line\">    <span class=\"built_in\">TestPrePost</span>(Trees);</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;\\e[0m&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">test</span>();</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    (<span class=\"keyword\">new</span> <span class=\"built_in\">BiTree</span>())-&gt;<span class=\"built_in\">PrettyPrint</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树源文件\"><a href=\"#二叉树源文件\" class=\"headerlink\" title=\"二叉树源文件\"></a>二叉树源文件</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: 二叉树类文件</span></span><br><span class=\"line\"><span class=\"comment\"> * @Version: 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author: hccidec</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2021-09-14 20:10:46</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditors: hccodec</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditTime: 2021-09-15 16:01:33</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ElemType char</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Util</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">MyException</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">        <span class=\"type\">int</span> code;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> ElemType *<span class=\"title\">BubbleSort</span><span class=\"params\">(ElemType <span class=\"type\">const</span> X[], <span class=\"type\">int</span> <span class=\"type\">const</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        ElemType tmp; ElemType *res = (<span class=\"type\">char</span>*)X;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %d  &quot;</span>, res, n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n - <span class=\"number\">1</span>; j++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (res[j] &gt; res[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    tmp = res[j];</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; res[%d] &#123;%c&#125; = res[%d] &#123;%c&#125;&quot;</span>, j, res[j], j + <span class=\"number\">1</span>, res[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">                    res[j] = res[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    res[j + <span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TNode</span> &#123; ElemType data; TNode *lchild, *rchild, *parent; <span class=\"type\">int</span> ltag, rtag; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> print = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BiTree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    TNode *T = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> height = <span class=\"number\">0</span>, width = <span class=\"number\">0</span>, count = <span class=\"number\">0</span>, size = <span class=\"number\">0</span>; <span class=\"comment\">// 树的宽、高、节点数和所占位置总数</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *repr_string;</span><br><span class=\"line\">    <span class=\"type\">int</span> mode = <span class=\"number\">0</span>; <span class=\"comment\">// 0 表示未被线索化, 1-3 分别表示 先序线索化、中序线索化、后序线索化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">BiTree</span>() &#123; <span class=\"built_in\">Reset</span>(); <span class=\"built_in\">GetInfo</span>(); &#125;</span><br><span class=\"line\">    <span class=\"built_in\">BiTree</span>(ElemType <span class=\"type\">const</span> *Pre, ElemType <span class=\"type\">const</span> *In, <span class=\"type\">bool</span> bias = <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Util::<span class=\"built_in\">BubbleSort</span>(Pre, <span class=\"built_in\">strlen</span>(Pre)) - Util::<span class=\"built_in\">BubbleSort</span>(In, <span class=\"built_in\">strlen</span>(In)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入序列\\e[32m!\\e[0m&gt; 序列 \\e[33m%s\\e[0m(先序) 与序列 \\e[33m%s\\e[0m(中序)不合法&quot;</span>, Pre, In);</span><br><span class=\"line\">            <span class=\"built_in\">Reset</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[32m!\\e[0m&gt; 由序列 \\e[33m%s\\e[0m(先序) \\e[33m%s\\e[0m(中序)&quot;</span>, Pre, In);</span><br><span class=\"line\">            <span class=\"comment\">// printf(&quot;Pre = %s, In = %s, 1 = %d, nPre = %d, 1 = %d, nIn = %d\\n&quot;, Pre, In, 1, nPre, 1, nIn);</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                T = <span class=\"built_in\">PreInCre</span>(Pre, In, <span class=\"number\">0</span>, <span class=\"built_in\">strlen</span>(Pre) - <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"built_in\">strlen</span>(In) - <span class=\"number\">1</span>); count++;</span><br><span class=\"line\">                <span class=\"comment\">// throw 0.5;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">catch</span>(<span class=\"type\">double</span>) &#123;</span><br><span class=\"line\">                cerr &lt;&lt; <span class=\"string\">&quot;\\n\\e[1;31m发生异常\\e[0m&quot;</span>; <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">GetInfo</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (print) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; 生成%s\\e[0m二叉树\\n&quot;</span>, <span class=\"built_in\">IsComplete</span>() ? (<span class=\"built_in\">IsFull</span>() ? <span class=\"string\">&quot;\\e[1;32m满\\e[0m&quot;</span> : <span class=\"string\">&quot;完全&quot;</span>) : <span class=\"string\">&quot;普通&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">BiTree</span>(BiTree *T) &#123; <span class=\"keyword\">this</span>-&gt;T = T-&gt;T; <span class=\"keyword\">this</span>-&gt;mode = T-&gt;mode; <span class=\"built_in\">GetInfo</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 获取结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; e 所获结点的数据域的值</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">GetNode</span><span class=\"params\">(ElemType e)</span> </span>&#123;</span><br><span class=\"line\">        queue&lt;TNode*&gt; q; TNode *p = T; q.<span class=\"built_in\">push</span>(p);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q.<span class=\"built_in\">front</span>()-&gt;data == e) <span class=\"keyword\">return</span> q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                p = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>)) q.<span class=\"built_in\">push</span>(p-&gt;lchild);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>)) q.<span class=\"built_in\">push</span>(p-&gt;rchild);</span><br><span class=\"line\">                q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;未找到结点 %c\\n&quot;</span>, e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">GetInfo</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        queue&lt;ElemType&gt; q; queue&lt;TNode*&gt; _q; q.<span class=\"built_in\">push</span>(T-&gt;data); _q.<span class=\"built_in\">push</span>(T); TNode *p = <span class=\"built_in\">FirstNode</span>(T); <span class=\"type\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(tmp &lt; count - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            p = _q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>)) &#123; _q.<span class=\"built_in\">push</span>(p-&gt;lchild); q.<span class=\"built_in\">push</span>(p-&gt;lchild-&gt;data); tmp++; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123; q.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;^&#x27;</span>); _q.<span class=\"built_in\">push</span>(<span class=\"built_in\">NewNode</span>(<span class=\"string\">&#x27;^&#x27;</span>)); &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>)) &#123; _q.<span class=\"built_in\">push</span>(p-&gt;rchild); q.<span class=\"built_in\">push</span>(p-&gt;rchild-&gt;data); tmp++; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123; q.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;^&#x27;</span>); _q.<span class=\"built_in\">push</span>(<span class=\"built_in\">NewNode</span>(<span class=\"string\">&#x27;^&#x27;</span>)); &#125;</span><br><span class=\"line\">            _q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        size = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        height = <span class=\"built_in\">floor</span>(<span class=\"built_in\">log2</span>(size + <span class=\"number\">1</span>)) + (<span class=\"built_in\">log2</span>(size + <span class=\"number\">1</span>) - <span class=\"built_in\">floor</span>(<span class=\"built_in\">log2</span>(size + <span class=\"number\">1</span>)) == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">        repr_string = <span class=\"keyword\">new</span> ElemType[size]; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123; repr_string[i] = q.<span class=\"built_in\">front</span>(); q.<span class=\"built_in\">pop</span>(); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 创建新结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; e 要创建的结点的数据域的值</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">NewNode</span><span class=\"params\">(ElemType e)</span> </span>&#123;</span><br><span class=\"line\">        TNode *p;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            p = <span class=\"built_in\">new</span>(nothrow) TNode;</span><br><span class=\"line\">        &#125;<span class=\"built_in\">catch</span>(bad_alloc &amp;memExp) &#123;</span><br><span class=\"line\">            cerr &lt;&lt; memExp.<span class=\"built_in\">what</span>() &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出现异常&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p-&gt;data = e;</span><br><span class=\"line\">        p-&gt;lchild = p-&gt;rchild = p-&gt;parent = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        p-&gt;ltag = p-&gt;rtag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 添加新结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; target 其父结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; e      要添加的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; side        添加位置（左孩子为0，右孩子为1）</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">AddNode</span><span class=\"params\">(ElemType target, ElemType e, <span class=\"type\">int</span> side)</span> </span>&#123;</span><br><span class=\"line\">        TNode *p = <span class=\"built_in\">GetNode</span>(target);</span><br><span class=\"line\">        TNode *q = <span class=\"built_in\">NewNode</span>(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">AddNode</span>(p, q, side);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 添加新结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *target   其父结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; e      要添加的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; side        添加位置（左孩子为0，右孩子为1）</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">AddNode</span><span class=\"params\">(TNode *target, ElemType e, <span class=\"type\">int</span> side)</span> </span>&#123;</span><br><span class=\"line\">        TNode *q = <span class=\"built_in\">NewNode</span>(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">AddNode</span>(target, q, side);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 添加新结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *target   其父结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *e        要添加的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; side        添加位置（左孩子为0，右孩子为1）</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">AddNode</span><span class=\"params\">(TNode *target, TNode *e, <span class=\"type\">int</span> side)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!target) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m要添加的位置不存在，无法添加结点‘%c’\\e[0m\\n&quot;</span>, e-&gt;data); <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">        <span class=\"comment\">// if (mode != 0) &#123; printf(&quot;\\e[1;31m暂时不支持向线索化的树\\e[0m\\n&quot;); return this; &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">ExistChild</span>(target, side)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m结点‘%c’要插入的位置&#x27;%c&#x27;已有%s结点\\e[0m\\n&quot;</span>, e-&gt;data, target-&gt;data, side == <span class=\"number\">0</span> ? <span class=\"string\">&quot;左&quot;</span> : (side == <span class=\"number\">1</span> ? <span class=\"string\">&quot;右&quot;</span> : <span class=\"string\">&quot;×&quot;</span>)); <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (side != <span class=\"number\">0</span> &amp;&amp; side != <span class=\"number\">1</span>) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m添加位置不合法，添加位置（左孩子为0，右孩子为1）\\e[0m\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (side == <span class=\"number\">0</span>) &#123; target-&gt;lchild = e;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (side == <span class=\"number\">1</span>) &#123; target-&gt;rchild = e;&#125;</span><br><span class=\"line\">        count++; e-&gt;parent = target;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 更改指定结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; target 其父结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; e      要添加的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; side        添加位置（左孩子为0，右孩子为1）</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">ChangeNode</span><span class=\"params\">(ElemType target, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">        TNode *p = <span class=\"built_in\">GetNode</span>(target);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">ChangeNode</span>(p, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 更改指定结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *target   其父结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType&#125; e      要添加的内容</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; side        添加位置（左孩子为0，右孩子为1）</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">ChangeNode</span><span class=\"params\">(TNode *target, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!target) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m未找到该结点，无法添加\\e[0m\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">        target-&gt;data = e;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 判断是否存在子节点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *p 要判断的结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; side 0表示左，1表示右</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">ExistChild</span><span class=\"params\">(TNode *p, <span class=\"type\">int</span> side)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!p) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;结点为空 &quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (side) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>: <span class=\"keyword\">return</span> p-&gt;lchild &amp;&amp; p-&gt;ltag == <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> p-&gt;rchild &amp;&amp; p-&gt;rtag == <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;程序有误请检查&quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Reset</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        T = <span class=\"built_in\">NewNode</span>(<span class=\"string\">&#x27;A&#x27;</span>); count++; <span class=\"keyword\">this</span></span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        -&gt;<span class=\"built_in\">AddNode</span>(<span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;H&#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 首结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *p</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">FirstNode</span><span class=\"params\">(TNode *p = <span class=\"literal\">NULL</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!p) p = T;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (mode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">while</span> (p-&gt;ltag == <span class=\"number\">0</span>) &#123; p = p-&gt;lchild; &#125; <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123; <span class=\"keyword\">if</span> (p-&gt;ltag == <span class=\"number\">0</span>) p = p-&gt;lchild; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;rtag == <span class=\"number\">0</span>) p = p-&gt;rchild; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> p; &#125; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 尾结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *p</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">LastNode</span><span class=\"params\">(TNode *p = <span class=\"literal\">NULL</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!p) p = T;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (mode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123; <span class=\"keyword\">if</span> (p-&gt;rtag == <span class=\"number\">0</span>) p = p-&gt;rchild; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;ltag == <span class=\"number\">0</span>) p = p-&gt;lchild; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> p; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">while</span> (p-&gt;rtag == <span class=\"number\">0</span>) &#123; p = p-&gt;rchild; &#125; <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 前驱结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *p</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">PreNode</span><span class=\"params\">(TNode *p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (mode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!p-&gt;parent) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;parent-&gt;lchild == p) <span class=\"keyword\">return</span> p-&gt;parent; <span class=\"comment\">// 如果是左节点</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;parent-&gt;ltag == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> p-&gt;parent;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">LastNode</span>(p-&gt;parent-&gt;lchild); <span class=\"comment\">//左节点存在，返回左子树最后一个结点</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p-&gt;ltag == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">LastNode</span>(p-&gt;lchild);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p-&gt;lchild;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p-&gt;ltag == <span class=\"number\">0</span> &amp;&amp; p-&gt;rtag == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> p-&gt;rchild;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p-&gt;lchild;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 后继结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *p</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">NextNode</span><span class=\"params\">(TNode *p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (mode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p-&gt;rtag == <span class=\"number\">0</span> &amp;&amp; p-&gt;ltag == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> p-&gt;lchild;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p-&gt;rchild;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p-&gt;rtag == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">FirstNode</span>(p-&gt;rchild);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p-&gt;rchild;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!p-&gt;parent) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;parent-&gt;rchild == p) <span class=\"keyword\">return</span> p-&gt;parent;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;parent-&gt;rtag == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> p-&gt;parent;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">FirstNode</span>(p-&gt;parent-&gt;rchild);</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (TNode *p = <span class=\"built_in\">FirstNode</span>(T); p; p = <span class=\"built_in\">NextNode</span>(p)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">RevInOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (TNode *p = <span class=\"built_in\">LastNode</span>(T); p; p = <span class=\"built_in\">PreNode</span>(p)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 递归打印</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; type 1-3分别表示【先序、中序、后序】</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintRecursion</span><span class=\"params\">(<span class=\"type\">int</span> type)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _Print1(T);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _Print2(T);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _Print3(T);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m[PrintRecursion] 类型错误，请输入正确类型：\\e[0;33m1-3分别表示【先序、中序、后序】\\e[0m&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 非递归打印</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; type 1-4 分别表示【先序、中序、后序、层序】</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;bool&#125; out out = true 表示输出</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">ElemType * <span class=\"title\">GetOutput</span><span class=\"params\">(<span class=\"type\">int</span> type, <span class=\"type\">bool</span> out = <span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mode != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;非递归打印不支持已被线索化的二叉树。因代码直接访问 lchild 和 rchild 指针而未对其指向左右孩子或指向线索化的前驱后继这两种情况进行判断。\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// printf(&quot;(%d) &quot;, mode);</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TNode *p = T, *pre = <span class=\"literal\">NULL</span>; queue&lt;ElemType&gt; q;</span><br><span class=\"line\">        stack&lt;TNode *&gt; s; <span class=\"comment\">// 辅助栈</span></span><br><span class=\"line\">        <span class=\"type\">int</span> tag = <span class=\"number\">0</span>; <span class=\"comment\">// 入栈tag=0；出栈tag=1</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p || !s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p) &#123; <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data); q.<span class=\"built_in\">push</span>(p-&gt;data); s.<span class=\"built_in\">push</span>(p); p = <span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>) ? p-&gt;lchild : <span class=\"literal\">NULL</span>; &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; p = s.<span class=\"built_in\">top</span>(); p = <span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>) ? p-&gt;rchild : <span class=\"literal\">NULL</span>; s.<span class=\"built_in\">pop</span>(); &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p || !s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p) &#123; s.<span class=\"built_in\">push</span>(p); p = <span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>) ? p-&gt;lchild : <span class=\"literal\">NULL</span>; &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123; p = s.<span class=\"built_in\">top</span>(); <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data); q.<span class=\"built_in\">push</span>(p-&gt;data); s.<span class=\"built_in\">pop</span>(); p = <span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>) ? p-&gt;rchild : <span class=\"literal\">NULL</span>; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p || !s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">            &#123; <span class=\"comment\">// 以下提供了未线索化和已线索化两种实现方式的代码示例</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mode == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tag == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// tag表示非递归遍历的当前操作是入栈（tag=0）还是出栈（tag=1）</span></span><br><span class=\"line\">                        <span class=\"comment\">// 若为入栈操作则左子结点优先于右子结点入栈</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (p-&gt;lchild) &#123; s.<span class=\"built_in\">push</span>(p); pre = p; p = p-&gt;lchild; &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;rchild) &#123; s.<span class=\"built_in\">push</span>(p); pre = p; p = p-&gt;rchild; &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 否则为叶子结点。将其入栈并通过标记tag=1控制下一操作改为出栈</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data); q.<span class=\"built_in\">push</span>(p-&gt;data); pre = p; p = s.<span class=\"built_in\">top</span>(); tag = <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">                        <span class=\"comment\">// 出栈，仅需判断当前结点（栈顶元素）是否有未被遍历的右子结点</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!p-&gt;rchild) &#123; pre = p; <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data); q.<span class=\"built_in\">push</span>(p-&gt;data); s.<span class=\"built_in\">pop</span>(); p = s.<span class=\"built_in\">top</span>(); &#125; <span class=\"comment\">// 没有右子结点</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (pre == p-&gt;rchild) &#123; <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data); q.<span class=\"built_in\">push</span>(p-&gt;data); pre = p; s.<span class=\"built_in\">pop</span>(); <span class=\"keyword\">if</span> (!s.<span class=\"built_in\">empty</span>()) p = s.<span class=\"built_in\">top</span>(); <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123; pre = p; p = p-&gt;rchild; tag = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (p) &#123; s.<span class=\"built_in\">push</span>(p); p = <span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>) ? p-&gt;lchild : <span class=\"literal\">NULL</span>; &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        p = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>) &amp;&amp; p-&gt;rchild != pre) p = p-&gt;rchild;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            p = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class=\"line\">                            pre = p;</span><br><span class=\"line\">                            p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _Print4(T, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;检查type变量，type 1-4 分别表示【先序、中序、后序、层序】&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> size = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        ElemType *res = <span class=\"keyword\">new</span> ElemType[size + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= size; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[i] = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">FindPreByPointer</span><span class=\"params\">(ElemType e, <span class=\"type\">int</span> type)</span> </span>&#123;</span><br><span class=\"line\">        TNode *pre = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            _FindPreByPointer1(T, e, pre);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            _FindPreByPointer2(T, e, pre);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            _FindPreByPointer3(T, e, pre);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m类型错误，请输入正确类型：\\e[0;33m1-4分别表示【先序、中序、后序、层序】\\e[0m&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">final</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** 线索化</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; type 1-3分别表示【先序、中序、后序】</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">InThread</span><span class=\"params\">(<span class=\"type\">int</span> type)</span> </span>&#123;</span><br><span class=\"line\">        TNode *pre = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[先序线索化]\\n&quot;</span>); _InThread1(T, pre);</span><br><span class=\"line\">            mode = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[中序线索化]\\n&quot;</span>); _InThread2(T, pre);</span><br><span class=\"line\">            mode = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[后序线索化]\\n&quot;</span>); _InThread3(T, pre);</span><br><span class=\"line\">            mode = <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[1;31m类型错误，请输入正确类型：\\e[0;33m1-3分别表示【先序、中序、后序】\\e[0m\\n&quot;</span>);</span><br><span class=\"line\">            mode = type;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关于该 if 语句：分析线索化过程知，先序（根左右）和中序（左根右）的尾结点必再无右子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre) <span class=\"keyword\">if</span> (!(pre-&gt;rchild &amp;&amp; pre-&gt;rtag == <span class=\"number\">0</span>)) pre-&gt;rtag = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 去线索化</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">UnThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mode == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        mode = <span class=\"number\">0</span>;</span><br><span class=\"line\">        _UnThread(T);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> _UnThread(TNode *T) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;ltag == <span class=\"number\">0</span>) _UnThread(T-&gt;lchild);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;ltag == <span class=\"number\">1</span>) &#123; T-&gt;lchild = <span class=\"literal\">NULL</span>; T-&gt;ltag = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;rtag == <span class=\"number\">1</span>) &#123; T-&gt;rchild = <span class=\"literal\">NULL</span>; T-&gt;rtag = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;rtag == <span class=\"number\">0</span>) _UnThread(T-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 按格式打印当前树，支持线索化树</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *T 根结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">BiTree * <span class=\"title\">PrettyPrint</span><span class=\"params\">(<span class=\"type\">bool</span> printinfo = <span class=\"literal\">false</span>, TNode *T = <span class=\"literal\">NULL</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T) T = <span class=\"keyword\">this</span>-&gt;T;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            queue&lt;ElemType&gt; q; queue&lt;TNode*&gt; _q; q.<span class=\"built_in\">push</span>(T-&gt;data); _q.<span class=\"built_in\">push</span>(T); TNode *p = <span class=\"built_in\">FirstNode</span>(T); <span class=\"type\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(tmp &lt; count - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                p = _q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>)) &#123; _q.<span class=\"built_in\">push</span>(p-&gt;lchild); q.<span class=\"built_in\">push</span>(p-&gt;lchild-&gt;data); tmp++; &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; q.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;^&#x27;</span>); _q.<span class=\"built_in\">push</span>(<span class=\"built_in\">NewNode</span>(<span class=\"string\">&#x27;^&#x27;</span>)); &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>)) &#123; _q.<span class=\"built_in\">push</span>(p-&gt;rchild); q.<span class=\"built_in\">push</span>(p-&gt;rchild-&gt;data); tmp++; &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; q.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;^&#x27;</span>); _q.<span class=\"built_in\">push</span>(<span class=\"built_in\">NewNode</span>(<span class=\"string\">&#x27;^&#x27;</span>)); &#125;</span><br><span class=\"line\">                _q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        size = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        height = <span class=\"built_in\">floor</span>(<span class=\"built_in\">log2</span>(size + <span class=\"number\">1</span>)) + (<span class=\"built_in\">log2</span>(size + <span class=\"number\">1</span>) - <span class=\"built_in\">floor</span>(<span class=\"built_in\">log2</span>(size + <span class=\"number\">1</span>)) == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">        repr_string = <span class=\"keyword\">new</span> ElemType[size]; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123; repr_string[i] = q.<span class=\"built_in\">front</span>(); q.<span class=\"built_in\">pop</span>(); &#125;&#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (printinfo) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[结点数] \\e[32m%d\\e[0m，[所占位置] \\e[32m%d\\e[0m，[树高(层数)] \\e[32m%d\\e[0m [序列字符串] \\e[32m%s\\e[0m \\n\\e[33m&quot;</span>, count, size, height, repr_string);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, height - <span class=\"number\">1</span>) - <span class=\"number\">1</span>; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--&quot;</span>); cout &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>, j = <span class=\"number\">1</span>; i &lt;= size; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, j - <span class=\"number\">1</span>)) &#123; <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, height - j) - <span class=\"number\">1</span>; k++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;  &quot;</span>); &#125;   <span class=\"comment\">// 行前空格(判据：当前是否为行首)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (repr_string[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;^&#x27;</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; .&quot;</span>); <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%2c&quot;</span>, repr_string[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, j) - <span class=\"number\">1</span>) &#123; cout &lt;&lt; endl; j++; &#125;                                          <span class=\"comment\">// 换行(判据：当前是否为上一行行尾)</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt; <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, height - j + <span class=\"number\">1</span>); k++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">            &#125;                  <span class=\"comment\">//行中空格</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, j - <span class=\"number\">1</span>)) cout &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * <span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, height - <span class=\"number\">1</span>) - <span class=\"number\">1</span>; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[0m\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetHeight</span><span class=\"params\">(TNode *T = <span class=\"literal\">NULL</span>, <span class=\"type\">bool</span> print = <span class=\"literal\">false</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T) &#123; <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;T) T = <span class=\"keyword\">this</span>-&gt;T; &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        queue&lt;TNode*&gt; q;</span><br><span class=\"line\">        TNode *p = T, *last = T; <span class=\"type\">int</span> level = <span class=\"number\">0</span>;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(p); <span class=\"keyword\">if</span> (print) cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) cout &lt;&lt; <span class=\"string\">&quot;[&quot;</span>;</span><br><span class=\"line\">            p = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">0</span>)) q.<span class=\"built_in\">push</span>(p-&gt;lchild);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(p, <span class=\"number\">1</span>)) q.<span class=\"built_in\">push</span>(p-&gt;rchild);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == last) &#123; <span class=\"keyword\">if</span> (print) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;(到%c)&quot;</span>, last-&gt;data); level++; last = q.<span class=\"built_in\">back</span>();&#125;</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) &#123; queue &lt;TNode*&gt; Q = q; <span class=\"keyword\">while</span>(!Q.<span class=\"built_in\">empty</span>()) &#123; cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;Q.<span class=\"built_in\">front</span>()-&gt;data; Q.<span class=\"built_in\">pop</span>(); &#125; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (print) cout &lt;&lt; <span class=\"string\">&quot;] &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> level;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 递归方式实现根据先序和中序序列建立新二叉树</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType *&#125; A    先序序列</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;ElemType *&#125; B    中序序列</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; l1          先序 序列 首 结点下标</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; h1          先序 序列 尾 结点下标</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; l2          中序 序列 首 结点下标</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; h2          中序 序列 尾 结点下标</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;int&#125; bias        数组指针偏移量，默认数组从下标 1 开始</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;bool&#125; cover      是否覆盖原树，默认为false (不覆盖)</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">TNode * <span class=\"title\">PreInCre</span><span class=\"params\">(ElemType <span class=\"type\">const</span> * A, ElemType <span class=\"type\">const</span> * B, <span class=\"type\">int</span> l1, <span class=\"type\">int</span> h1, <span class=\"type\">int</span> l2, <span class=\"type\">int</span> h2, <span class=\"type\">int</span> bias = <span class=\"number\">0</span>, <span class=\"type\">bool</span> cover = <span class=\"literal\">false</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;&#123;&#123;欲添加 A[%d] = %c&#125;&#125; l1=%d, l2=%d, h1=%d, h2=%d\\n&quot;, l1, A[l1], l1, l2, h1, h2);</span></span><br><span class=\"line\">        TNode *p;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            p = <span class=\"built_in\">NewNode</span>(A[l1]); <span class=\"comment\">// 根结点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">catch</span> (exception&amp;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span>(<span class=\"number\">33</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> i; <span class=\"keyword\">for</span> (i = l2; B[i] != p-&gt;data; i++); <span class=\"comment\">// 划分中序序列</span></span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;%d:%c &quot;, i, p-&gt;data);</span></span><br><span class=\"line\">        <span class=\"type\">int</span> llen = i - l2, rlen = h2 - i;</span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;&#123;&#123;添加 %c&#125;&#125; llen=%d, rlen=%d, l1=%d, l2=%d, h1=%d, h2=%d\\n&quot;, p-&gt;data, llen, rlen, l1, l2, h1, h2);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (llen) <span class=\"built_in\">AddNode</span>(p, <span class=\"built_in\">PreInCre</span>(A, B, l1 + <span class=\"number\">1</span>, l1 + llen, l2, l2 + llen - <span class=\"number\">1</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> p-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rlen) <span class=\"built_in\">AddNode</span>(p, <span class=\"built_in\">PreInCre</span>(A, B, h1 - rlen + <span class=\"number\">1</span>, h1, h2 - rlen + <span class=\"number\">1</span>, h2), <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> p-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** 判断二叉树是否为完全二叉树</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *T</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsComplete</span> <span class=\"params\">(TNode *T = <span class=\"literal\">NULL</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T) T = <span class=\"keyword\">this</span>-&gt;T;</span><br><span class=\"line\">        queue&lt;TNode*&gt; q; TNode *p = T; q.<span class=\"built_in\">push</span>(p);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            p = q.<span class=\"built_in\">front</span>(); q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p-&gt;ltag == <span class=\"number\">0</span>) q.<span class=\"built_in\">push</span>(p-&gt;lchild);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p-&gt;rtag == <span class=\"number\">0</span>) q.<span class=\"built_in\">push</span>(p-&gt;rchild);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                p = q.<span class=\"built_in\">front</span>(); q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 判断二叉树是否为满二叉树</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *T</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsFull</span> <span class=\"params\">(TNode *T = <span class=\"literal\">NULL</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">IsComplete</span>() &amp;&amp; count == size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 判断两个二叉树是否相似</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *T1</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;TNode&#125; *T2</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;*&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsSimiliar</span><span class=\"params\">(TNode *T1, TNode *T2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">bool</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T1 &amp;&amp; !T2) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T1 || !T2) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        left = <span class=\"built_in\">IsSimiliar</span>(<span class=\"built_in\">ExistChild</span>(T1, <span class=\"number\">0</span>) ? T1-&gt;lchild : <span class=\"literal\">NULL</span>, <span class=\"built_in\">ExistChild</span>(T2, <span class=\"number\">0</span>) ? T2-&gt;lchild : <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        right = <span class=\"built_in\">IsSimiliar</span>(<span class=\"built_in\">ExistChild</span>(T1, <span class=\"number\">1</span>) ? T1-&gt;rchild : <span class=\"literal\">NULL</span>, <span class=\"built_in\">ExistChild</span>(T2, <span class=\"number\">1</span>) ? T2-&gt;rchild : <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left &amp;&amp; right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    TNode *<span class=\"keyword\">final</span> = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 用土办法找到中序前驱的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归打印 start //////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> _Print1(TNode *T)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, T-&gt;data);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(T, <span class=\"number\">0</span>)) _Print1(T-&gt;lchild);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(T, <span class=\"number\">1</span>)) _Print1(T-&gt;rchild);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> _Print2(TNode *T)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(T, <span class=\"number\">0</span>)) _Print2(T-&gt;lchild);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, T-&gt;data);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(T, <span class=\"number\">1</span>)) _Print2(T-&gt;rchild);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> _Print3(TNode *T)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(T, <span class=\"number\">0</span>)) _Print3(T-&gt;lchild);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(T, <span class=\"number\">1</span>)) _Print3(T-&gt;rchild);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, T-&gt;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ElemType * _Print4(TNode *T, <span class=\"type\">bool</span> out = <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        queue&lt;ElemType&gt; q; <span class=\"comment\">// 存放最终结果的队列</span></span><br><span class=\"line\">        queue&lt;TNode *&gt; _q; <span class=\"comment\">// 层序遍历的辅助队列</span></span><br><span class=\"line\">        _q.<span class=\"built_in\">push</span>(T);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!_q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(_q.<span class=\"built_in\">front</span>()-&gt;data);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(_q.<span class=\"built_in\">front</span>(), <span class=\"number\">0</span>)) _q.<span class=\"built_in\">push</span>(_q.<span class=\"built_in\">front</span>()-&gt;lchild);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ExistChild</span>(_q.<span class=\"built_in\">front</span>(), <span class=\"number\">1</span>)) _q.<span class=\"built_in\">push</span>(_q.<span class=\"built_in\">front</span>()-&gt;rchild);</span><br><span class=\"line\">            _q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> size = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        ElemType *res = <span class=\"keyword\">new</span> ElemType[size];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[i] = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (out) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>, q.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归打印 end /////////////////////////////////</span></span><br><span class=\"line\">    <span class=\"comment\">// 指针法找前驱 start ///////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> _FindPreByPointer1(TNode *T, ElemType e, TNode *&amp;pre)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mode == <span class=\"number\">0</span> &amp;&amp; T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (T-&gt;data == e) <span class=\"keyword\">final</span> = pre; pre = T;</span><br><span class=\"line\">            _FindPreByPointer1(T-&gt;lchild, e, pre);</span><br><span class=\"line\">            _FindPreByPointer1(T-&gt;rchild, e, pre);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mode != <span class=\"number\">0</span>) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[31m此二叉树已被线索化 &quot;</span>); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> _FindPreByPointer2(TNode *T, ElemType e, TNode *&amp;pre)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mode == <span class=\"number\">0</span> &amp;&amp; T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _FindPreByPointer2(T-&gt;lchild, e, pre);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (T-&gt;data == e) <span class=\"keyword\">final</span> = pre; pre = T;</span><br><span class=\"line\">            _FindPreByPointer2(T-&gt;rchild, e, pre);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mode != <span class=\"number\">0</span>) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[31m此二叉树已被线索化 &quot;</span>); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> _FindPreByPointer3(TNode *T, ElemType e, TNode *&amp;pre)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mode == <span class=\"number\">0</span> &amp;&amp; T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _FindPreByPointer3(T-&gt;lchild, e, pre);</span><br><span class=\"line\">            _FindPreByPointer3(T-&gt;rchild, e, pre);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (T-&gt;data == e) <span class=\"keyword\">final</span> = pre; pre = T;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mode != <span class=\"number\">0</span>) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\e[31m此二叉树已被线索化 &quot;</span>); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 指针法找前驱 end /////////////////////////////</span></span><br><span class=\"line\">    <span class=\"comment\">// 线索化 start ////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> _InThread1(TNode *T, TNode *&amp;pre)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T-&gt;lchild) &#123; T-&gt;lchild = pre; T-&gt;ltag = <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre &amp;&amp; !pre-&gt;rchild) &#123; pre-&gt;rchild = T; pre-&gt;rtag = <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">        pre = T; <span class=\"comment\">//printf(&quot;%c &quot;, pre-&gt;data);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;ltag == <span class=\"number\">0</span>) _InThread1(T-&gt;lchild, pre);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;rtag == <span class=\"number\">0</span>) _InThread1(T-&gt;rchild, pre);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> _InThread2(TNode *T, TNode *&amp;pre)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _InThread2(T-&gt;lchild, pre);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!T-&gt;lchild) &#123; T-&gt;lchild = pre; T-&gt;ltag = <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pre &amp;&amp; !pre-&gt;rchild) &#123; pre-&gt;rchild = T; pre-&gt;rtag = <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">            pre = T; <span class=\"comment\">//printf(&quot;%c &quot;, pre-&gt;data);</span></span><br><span class=\"line\">            _InThread2(T-&gt;rchild, pre);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">void</span> _InThread3(TNode *T, TNode *&amp;pre)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        _InThread3(T-&gt;lchild, pre);</span><br><span class=\"line\">        _InThread3(T-&gt;rchild, pre);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!T-&gt;lchild) &#123; T-&gt;lchild = pre; T-&gt;ltag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// printf(&quot;%c-&gt;lchild ==&gt; %c\\n&quot;, T-&gt;data, pre?pre-&gt;data:&#x27;+&#x27;);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre &amp;&amp; !pre-&gt;rchild) &#123; pre-&gt;rchild = T; pre-&gt;rtag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// printf(&quot;%c-&gt;rchild ==&gt; %c\\n&quot;, pre ? pre-&gt;data : &#x27;+&#x27;, T-&gt;data);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// else &#123; printf(&quot;  %c-&gt;lchild = %c，且 pre &quot;, T-&gt;data, T-&gt;lchild ? T-&gt;lchild-&gt;data : &#x27;+&#x27;); pre ? printf(&quot;= %c\\n&quot;, pre-&gt;data) : printf(&quot;不存在\\n&quot;); &#125;</span></span><br><span class=\"line\">        pre = T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 线索化代码区 end /////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}